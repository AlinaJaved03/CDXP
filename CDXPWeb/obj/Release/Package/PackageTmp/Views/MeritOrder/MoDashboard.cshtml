
@{
    ViewBag.Title = "Stock Information";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<div id="pcontent">

    <style type="text/css">
        .form-control {
            height: 35px !important;
        }

        .sweet-alert {
            width: 33%
        }

        .txt-dark {
            line-height: 5px !important;
        }

        .td, th {
            padding: 0px !important;
        }

        table.dataTable tbody th, table.dataTable tbody td {
            padding: 0px 8px !important;
        }



        /*******************************
        * MODAL AS LEFT/RIGHT SIDEBAR
        * Add "left" or "right" in modal parent div, after class="modal".
        * Get free snippets on bootpen.com
        *******************************/
        .modal-dialog {
            overflow-y: initial !important
        }

        .modal-body {
            height: 80vh;
            overflow-y: auto;
        }

        .modal.left .modal-dialog,
        .modal.right .modal-dialog {
            position: fixed;
            margin: auto;
            width: 320px;
            height: 100%;
            -webkit-transform: translate3d(0%, 0, 0);
            -ms-transform: translate3d(0%, 0, 0);
            -o-transform: translate3d(0%, 0, 0);
            transform: translate3d(0%, 0, 0);
        }

        .modal.left .modal-content,
        .modal.right .modal-content {
            height: 100%;
            overflow-y: auto;
        }

        .modal.left .modal-body,
        .modal.right .modal-body {
            padding: 15px 15px 80px;
        }

        /*Left*/
        .modal.left.fade .modal-dialog {
            left: -320px;
            -webkit-transition: opacity 0.3s linear, left 0.3s ease-out;
            -moz-transition: opacity 0.3s linear, left 0.3s ease-out;
            -o-transition: opacity 0.3s linear, left 0.3s ease-out;
            transition: opacity 0.3s linear, left 0.3s ease-out;
        }

        .modal.left.fade.in .modal-dialog {
            left: 0;
        }

        /*Right*/
        .modal.right.fade .modal-dialog {
            right: -320px;
            -webkit-transition: opacity 0.3s linear, right 0.3s ease-out;
            -moz-transition: opacity 0.3s linear, right 0.3s ease-out;
            -o-transition: opacity 0.3s linear, right 0.3s ease-out;
            transition: opacity 0.3s linear, right 0.3s ease-out;
            width: 800px;
        }

        .modal.right.fade.in .modal-dialog {
            right: 0;
        }

        /* ----- MODAL STYLE ----- */
        .modal-content {
            border-radius: 0;
            border: none;
        }

        .modal-header {
            border-bottom-color: #EEEEEE;
            background-color: #FAFAFA;
        }

        /* ----- v CAN BE DELETED v ----- */
        body {
            background-color: #78909C;
        }

        .demo {
            padding-top: 60px;
            padding-bottom: 110px;
        }

        .btn-demo {
            margin: 15px;
            padding: 10px 15px;
            border-radius: 0;
            font-size: 16px;
            background-color: #FFFFFF;
        }

            .btn-demo:focus {
                outline: 0;
            }

        .demo-footer {
            position: fixed;
            bottom: 0;
            width: 100%;
            padding: 15px;
            background-color: #212121;
            text-align: center;
        }

            .demo-footer > a {
                text-decoration: none;
                font-weight: bold;
                font-size: 16px;
                color: #fff;
            }



        .darkblueBg {
            background-color: #1d4a6deb;
            color: white;
        }

        .fa-trash {
            color: red;
        }

        .readonly {
            background-color: #f2f2f2; /* Light gray background */
            color: #666; /* Dark gray text color */
            pointer-events: none; /* Disable pointer events */
        }


        .fa-edit {
            color: blue;
        }

        .dropdownCustomStyle {
            background: #1d4a6deb;
            color: white;
            border-radius: 10px !important;
            height: 35px;
        }

        .noBorder {
            border: none !important;
        }

        .noBottomBorder {
            border-bottom: none !important;
            font-weight: bold !important;
        }

        .OnlyLeftBorder {
            border-top: none !important;
            border-bottom: none !important;
            border-right: none !important;
        }

        .roundedDate {
            border-radius: 18px !important;
            background-color: #CBCACA !important;
            color: #FFFFFF;
            font-weight: bold;
        }

        .dropbtn {
            font-size: 12px;
            border: none;
            cursor: pointer;
        }

        /*.dropbtn:hover, .dropbtn:focus {
                background-color: #2980B9;
            }*/

        .dropdown {
            position: relative;
            display: inline-block;
        }

        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f1f1f1;
            /*min-width: 100%;
            overflow: auto;*/
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
            overflow-wrap: anywhere;
            right: -316%;
        }

            .dropdown-content a {
                color: black;
                min-width: max-content;
                text-decoration: none;
                display: flex;
                padding: 3px 8px;
            }

        .dropdown a:hover {
            background-color: #ddd;
        }

        .show {
            display: block;
        }

        .td, th {
            padding: 0px !important;
        }

        .table-bordered > thead > tr > td, .table-bordered > thead > tr > th {
            border-width: 3px;
        }

        .td, th {
            padding: 4px !important;
        }

        .icondisabled {
            color: #786b6b !important;
        }

        .date-icon-datonly {
            /*position: absolute;
            top: 9px;
            right: 28px;
            cursor: pointer;
            color: #aaa;
            font-size: 24px;*/
            position: absolute;
            top: 50%;
            left: 129px;
            transform: translateY(-50%);
            font-size: 15px;
            color: #1D4A6D;
        }



        .date-icon-dateRange {
            /*position: absolute;
            top: 33px;
            right: 28px;*/
            /* pointer-events: none; */
            /*cursor: pointer;
            color: #aaa;
            font-size: 24px;*/
            position: absolute;
            top: 68%;
            left: 219px;
            transform: translateY(-50%);
            font-size: 15px;
            color: #1D4A6D;
        }

        .required {
            color: red;
        }

        table.dataTable thead th {
            border-bottom: none;
        }

        table.dataTable.no-footer {
            border-bottom: none;
        }

        table.dataTable {
            border-collapse: unset;
            border-spacing: 0;
        }

        .table-bordered > tbody > tr > td, .table-bordered > tbody > tr > th, .table-bordered > tfoot > tr > td, .table-bordered > tfoot > tr > th, .table-bordered > thead > tr > td, .table-bordered > thead > tr > th {
            border: 1px solid #ddd;
        }

        /* width */
        ::-webkit-scrollbar {
            width: 5px;
            height: 5px
        }

        /* Track */
        ::-webkit-scrollbar-track {
            box-shadow: inset 0 0 5px grey;
            border-radius: 5px;
        }

        /* Handle */
        ::-webkit-scrollbar-thumb {
            background: #1D4A6D;
            border-radius: 5px;
        }

            /* Handle on hover */
            ::-webkit-scrollbar-thumb:hover {
                background: #1D4A6D;
            }
        /**/
        option:not(:checked) {
            background-color: #fff;
            color: #212121
        }

        option {
            background-color: #1d4a6deb;
            color: #ffffff
        }

        #btnSubmitReceipts, #btnSubmitActualConsumption {
            margin: 1%
        }

        .customRoundbutton {
            border-radius: 7px !important;
            line-height: 14px;
            width: 114px;
        }

        .roundedDate {
            background: #fff !important;
            font-weight: bold;
            border-color: #1d4a6deb;
            border-radius: 7px !important;
            /*background-color: #CBCACA !important;*/
            color: #1d4a6deb;
            height: 35px;
        }

        .roundedDateLocked {
            font-weight: bold;
            border-color: #1d4a6deb;
            border-radius: 7px !important;
            background-color: #CBCACA !important;
            color: #1d4a6deb;
            height: 35px;
            width: 147px;
            text-align: left;
            padding-right: 12%;
            box-sizing: border-box;
        }

        #tbl_results, #tbl_results_detailedList { /**/
            width: 100% !important;
            /*table-layout: fixed;
            overflow-wrap: break-word;*/
        }
        /* .ExportCol{
            display:none;
        }*/
        /*.table-bordered {*/ /**/
        /*table-layout: fixed;
            overflow-wrap: break-word;
        }*/

        input[type=text] {
            height: 15px;
        }


        .switch {
            position: relative;
            display: inline-block;
            width: 48px;
            height: 34px;
        }

            .switch input {
                opacity: 0;
                width: 0;
                height: 0;
            }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: -13px;
            background-color: #ccc;
            -webkit-transition: .4s;
            transition: .4s;
        }

            .slider:before {
                position: absolute;
                content: "";
                height: 13px;
                width: 13px;
                left: 4px;
                bottom: 2px;
                background-color: white;
                -webkit-transition: .4s;
                transition: .4s;
            }

        input:checked + .slider {
            background-color: #2196F3;
        }

        input:focus + .slider {
            box-shadow: 0 0 1px #2196F3;
        }

        input:checked + .slider:before {
            -webkit-transform: translateX(26px);
            -ms-transform: translateX(26px);
            transform: translateX(26px);
        }

        /* Rounded sliders */
        .slider.round {
            border-radius: 34px;
        }

            .slider.round:before {
                border-radius: 50%;
            }

        .col-lg-4 {
            padding-bottom: 15px !important;
            padding-right: 15px !important;
            padding-left: 15px !important;
            padding-top: 0px !important;
        }
    </style>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" style="padding: 0px;">
            <div class="panel panel-default card-view panel-refresh">
                <div class="refresh-container">
                    <div class="la-anim-1"></div>
                </div>
                @*<div class="panel-heading">
                        <div class="pull-left" style="display: inline-flex;">
                            <i class="fa fa-wpforms" style="padding-top: 4px;margin-right: 5px;color:#fff;"></i>
                            <h6 class="panel-title txt-light">@ViewBag.Title</h6>
                        </div>
                        <div class="pull-right">
                            <a class="pull-left inline-block mr-15" data-toggle="collapse" href="#collapse_1" aria-expanded="true">
                                    <i class="zmdi zmdi-chevron-down"></i>
                                    <i class="zmdi zmdi-chevron-up"></i>
                                </a>

                        </div>
                        <div class="clearfix"></div>
                    </div>*@
                <input type="hidden" value="@ViewBag.VendorId" id="vendorId" />
                <input type="hidden" value="@ViewBag.UserId" id="userId" />
                <input type="hidden" value="@ViewBag.PortalLock" id="PortalLock" />

                <input type="hidden" value="0" id="fuelIndexHidden" />
                <input type="hidden" value="" id="dateHidden" />
                <input type="hidden" value="" id="fuelTypeActual" />

                <div class="row">
                    @*<div class="col-lg-3">
                            <div class="form-group">
                                <select class="form-control dropdownCustomStyle" id="vendorIdDrp" onchange="return populateFuelTypes()">
                                    <option value="-1" selected>Select Vendor</option>
                                    @Html.Raw(@ViewBag.Ipplist)
                                </select>
                            </div>
                        </div>*@

                    @*<div class="col-lg-2">
                            <div class="form-group">
                                <input type="date" id="tempdate" onchange="return getStockDate()" class="form-control" />
                            </div>

                        </div>*@
                    <div class="col-lg-2">
                        <div class="form-group">
                            <select class="form-control dropdownCustomStyle" id="fuelType" onchange="return populateFuelIndex()">
                                <option value="-1" selected>Select Fuel Type</option>
                                @Html.Raw(@ViewBag.FuelType)
                            </select>
                        </div>
                    </div>

                    @if (ViewBag.PortalLock == "1")
                    {


                        <div class="col-lg-10">
                            <div class="alert alert-dismissible fade show" role="alert" style="opacity: 1.5; border-radius: 12px; border: 1px dashed; ">
                                <marquee>
                                    <strong>Warning!</strong> Portal is locked from @ViewBag.Portal_lockStart to @ViewBag.Portal_lockEnd
                                </marquee>
                                @*<button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>*@
                            </div>
                        </div>
                    }


                </div>

                <div class="row NonRlngAndGas">
                    <div class="col-lg-4 col-md-4 col-sm-4">
                        <div class="tab0">
                            &nbsp;<div class="tab1">&nbsp;Opening Stock</div>
                            <div class="tab2">&nbsp;</div>
                        </div>
                        <div style=" height: 114px; overflow: auto; ">
                            <table class="table table-bordered">
                                <thead style=" position: sticky; top: -2px;">
                                    <tr>
                                        <th scope="col" class="text-center clsQuantity">Qty(MT)</th>
                                        <th scope="col" class="text-center clsRate">Rate(Rs./MT)</th>
                                        <th scope="col" class="text-center clsAmount">Amount(Rs.)</th>
                                    </tr>
                                </thead>
                                <tbody id="tbl_openingstock_res">
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <div class="col-lg-4 col-md-4 col-sm-4">
                        <div class="tab0">
                            &nbsp;<div class="tab1">&nbsp;Receipt Stock</div>
                            <div class="tab2">&nbsp;</div>
                        </div>
                        <div style=" height: 114px; overflow: auto; ">
                            <table class="table table-bordered">
                                <thead style=" position: sticky; top: -2px;">
                                    <tr>
                                        <th scope="col" class="text-center clsQuantity">Qty(MT)</th>
                                        <th scope="col" class="text-center clsRate">Rate(Rs./MT)</th>
                                        <th scope="col" class="text-center clsAmount">Amount(Rs.)</th>

                                    </tr>
                                </thead>
                                <tbody id="tbl_receiptstock_res">
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <div class="col-lg-4 col-md-4 col-sm-4">
                        <div class="tab0">
                            &nbsp;<div class="tab1">&nbsp;Closing Stock</div>
                            <div class="tab2">&nbsp;</div>
                        </div>
                        <div style=" height: 114px; overflow: auto; ">
                            <table class="table table-bordered">
                                <thead style=" position: sticky; top: -2px;">
                                    <tr>
                                        <th scope="col" class="text-center clsQuantity">Qty(MT)</th>
                                        <th scope="col" class="text-center clsRate">Rate(Rs./MT)</th>
                                        <th scope="col" class="text-center clsAmount">Amount(Rs.)</th>
                                    </tr>
                                </thead>
                                <tbody id="tbl_closingstock_res">
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>



                <div class="row">
                    <div class="col-lg-12 col-md-12">
                        <div class="container-fluid">

                            <ul class="nav nav-tabs">
                                <li class="NonRlngAndGas" id="receiptsTab"><a data-toggle="tab" href="#receipts">Receipts</a></li>
                                <li class="NonRlngAndGas" id="consumptionTab"><a data-toggle="tab" href="#consumption">Actual Consumption</a></li>
                                <li class="NonRlngAndGas" id="estimationTab"><a data-toggle="tab" href="#estimation">Estimated Consumption</a></li>
                                <li class="NonRlngAndGas" id="detailedlistTab"><a data-toggle="tab" href="#detailedlist">Detailed List</a></li>
                                <li class="RlngAndGas " id="actualconsumptionTab"><a data-toggle="tab" href="#actualconsumption">Actual Data</a></li>
                                <li class="RlngAndGas" id="estimatedconsumptionTab"><a data-toggle="tab" href="#estimatedconsumption">Estimated Data</a></li>
                                <li class="RlngAndGas" id="detailedlistRlngGasTab"><a data-toggle="tab" href="#detailedlistRlngGas">Detailed List</a></li>
                                <li class="BothCases" id="MoDataTab"><a data-toggle="tab" href="#modata">MO Data</a></li>
                                <li class="BothCases" id="RefValueTab"><a data-toggle="tab" href="#refValueTab">Reference Values</a></li>

                            </ul>

                            <div class="tab-content">
                                <div id="receipts" class="tab-pane fade">
                                    <div class="container-fluid">
                                        <br />
                                        <div class="row">

                                            <div class="col-md-2 pull-right">
                                                <button class="btn btn-primary pull-right customRoundbutton" id="addreceiptModalBtn" style=" border-color: #1d4a6deb; background-color: #1d4a6deb;">
                                                    <i class="fa fa-plus"></i> Add
                                                </button>
                                            </div>
                                            <div class="col-md-3 pull-left" style="position: relative;">
                                                <input class=" form-control  roundedDateLocked text-center" readonly id="date" />
                                                <i class="date-icon-datonly fa fa-calendar" aria-hidden="true"></i>
                                            </div>

                                        </div>
                                        <br />
                                        <div class="table-responsive" style="height: 249px; width: 100%; display: block;">
                                            <table class="table table-bordered">
                                                <thead>
                                                    <tr style="height:35px;">
                                                        @*<th scope="col" class="text-center darkblueBg">Date</th>*@
                                                        <th scope="col" class="text-center darkblueBg clsQuantity">Quantity(MT)</th>
                                                        <th scope="col" class="text-center darkblueBg clsRate">Rate(Rs./MT)</th>
                                                        <th scope="col" class="text-center darkblueBg clsAmount">Amount(Rs.)</th>
                                                        <th scope="col" class="text-center darkblueBg">Attachments</th>
                                                        <th scope="col" class="text-center darkblueBg">Action</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="tbl_entered_receipts">
                                                </tbody>
                                            </table>

                                            <div class="col text-center">
                                                <button class="btn btn-success col text-center customRoundbutton" id="btnSubmitReceipts" onclick="return submitReceipts()">Submit</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div id="consumption" class="tab-pane fade ">
                                    <div class="container-fluid">
                                        <br />

                                        <div class="row">

                                            <div class="col-md-2 pull-right">
                                                <button class="btn btn-primary pull-right customRoundbutton" id="addActualConsumptionModalBtn" style="border-color: #1d4a6deb; background-color: #1d4a6deb;">
                                                    <i class="fa fa-plus"></i> Add
                                                </button>
                                            </div>
                                            <div class="col-md-3 pull-left">
                                                <input class=" form-control roundedDateLocked text-center" readonly id="consumptiondate" />
                                                <i class="date-icon-datonly fa fa-calendar" aria-hidden="true"></i>
                                            </div>

                                        </div>

                                        <br />
                                        <div class="table-responsive" style="height: 249px; width: 100%;">

                                            <table class="table table-bordered" id="actualConsumption_tbl">
                                                <thead>
                                                    <tr style="height:35px;">
                                                        <th scope="col" class="text-center darkblueBg">Date</th>
                                                        <th scope="col" class="text-center darkblueBg clsQuantity">Quantity(MT)</th>
                                                        <th scope="col" class="text-center darkblueBg clsRate">Rate(Rs./MT)</th>
                                                        <th scope="col" class="text-center darkblueBg clsAmount">Amount(Rs.)</th>
                                                        <th scope="col" class="text-center darkblueBg">Weighted Average Rate(Rs.)</th>
                                                        <th scope="col" class="text-center darkblueBg">Attachement</th>
                                                        <th scope="col" class="text-center darkblueBg">Action</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="ajaxRes_actualconsumption">
                                                </tbody>
                                            </table>


                                            <div class="col text-center">
                                                <button class="btn btn-success customRoundbutton" onclick="return submitActualConsumption()" id="btnSubmitActualConsumption">Submit</button>
                                            </div>
                                        </div>

                                    </div>
                                </div>

                                <div id="estimation" class="tab-pane fade ">
                                    <div class="container-fluid">
                                        <br />

                                        <div class="row">

                                            <div class="col-md-2 pull-right">
                                                <button class="btn btn-primary pull-right customRoundbutton" id="addEstConsumptionModalBtn" style="border-color: #1d4a6deb; background-color: #1d4a6deb;">
                                                    <i class="fa fa-plus"></i> Add
                                                </button>
                                            </div>
                                            <div class="col-md-3 pull-left">
                                                <input class=" form-control roundedDateLocked text-center" readonly id="estimateddate" />
                                                <i class="date-icon-datonly fa fa-calendar" aria-hidden="true"></i>
                                            </div>

                                        </div>

                                        <br />
                                        <div class="table-responsive" style="height: 249px; width: 100%;">

                                            <table class="table table-bordered" id="estConsumption_tbl">
                                                <thead>
                                                    <tr style="height:35px;">
                                                        <th scope="col" class="text-center darkblueBg">Date</th>
                                                        <th scope="col" class="text-center darkblueBg clsQuantity">Quantity(MT)</th>
                                                        <th scope="col" class="text-center darkblueBg clsRate">Rate(Rs./MT)</th>
                                                        <th scope="col" class="text-center darkblueBg clsAmount">Amount(Rs.)</th>
                                                        <th scope="col" class="text-center darkblueBg">Weighted Average Rate(Rs.)</th>
                                                        <th scope="col" class="text-center darkblueBg">Attachement</th>
                                                        <th scope="col" class="text-center darkblueBg">Action</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="ajaxRes_estconsumption">
                                                </tbody>
                                            </table>


                                            <div class="col text-center">
                                                <button class="btn btn-success customRoundbutton" onclick="return submitEstConsumption()" id="btnSubmitEstConsumption">Submit</button>
                                            </div>
                                        </div>

                                    </div>
                                </div>




                                <div id="detailedlist" class="tab-pane fade ">
                                    <div class="container-fluid">


                                        @*<div class="row">
                                                <div class="col-md-3">
                                                    <input type="text" id="daterange" class="form-control roundedDate" />
                                                </div>
                                            </div>*@
                                        <br />
                                        <div class="row">

                                            <div class="col-md-2 pull-right" style=" padding-top: 24px;">
                                                <button class="btn btn-primary" id="btnExportDetailedList" style=" border-color: #1d4a6deb; background-color: #1d4a6deb; border-radius: 7px; float: right; text-align: center; line-height: 14px;">
                                                    <i class="fa fa-download"></i> Export
                                                </button>
                                            </div>
                                            <div class="col-md-3 pull-left" style="position: absolute;">
                                                <label style="color: #1d4a6deb; font-weight: bold; ">Select Date Range</label>
                                                <input class=" form-control  roundedDate" readonly id="daterange" style="color: #1d4a6deb; background: #fff !important; font-weight: bold; border-color: #1d4a6deb; padding-left: 6%;width:81%" />
                                                <i id="dateRangeIcon" class="date-icon-dateRange fa fa-calendar" aria-hidden="true"></i>
                                            </div>

                                        </div>

                                        <br />
                                        <div class="table-responsive" style="overflow: auto; max-height: 642px; min-height: auto !important; ">
                                            @*<label class="ExportCol">Power Producer</label>
                                                <label class="ExportCol">'+ $('#NameTitlebar').text()  +'</label>
                                                <label class="ExportCol">Date Range</label>
                                                <label class="ExportCol">'+ $('#daterange').val() +'</label>*@


                                            <table class="table table-bordered" id="tbl_results_detailedList">
                                                <thead style="position: sticky; top: -2px;">
                                                    @*<tr>
                                                            <th class="ExportCol">Power Producer: </th>
                                                            <th class="ExportCol" id="expIPP"></th>
                                                            <th class="ExportCol"></th>
                                                            <th class="ExportCol">Fuel Type: </th>
                                                            <th class="ExportCol" id="expFuel"></th>
                                                            <th class="ExportCol"></th>
                                                            <th class="ExportCol">Date Range: </th>
                                                            <th class="ExportCol" id="expDate"></th>
                                                        </tr>*@
                                                    <tr style="height: 35px;">
                                                        <th scope="col" width="100px" class="text-center darkblueBg noBorder noBottomBorder"></th>
                                                        <th scope="col" class="text-center darkblueBg noBottomBorder" colspan="3">Opening Stock</th>
                                                        <th scope="col" class="text-center darkblueBg noBottomBorder" colspan="3">Receipt</th>
                                                        <th scope="col" class="text-center darkblueBg noBottomBorder" colspan="4">Actual Consumption</th>
                                                        <th scope="col" class="text-center darkblueBg noBottomBorder" colspan="3">Closing</th>
                                                    </tr>
                                                    <tr style="height: 35px;">
                                                        <th scope="col" class="text-center darkblueBg noBorder" style="padding: 0px 32px !important">Date <br /> &nbsp;</th>
                                                        <th scope="col" class="text-center darkblueBg OnlyLeftBorder clsQuantityDet ">Quantity <br />(MT)</th>
                                                        <th scope="col" class="text-center darkblueBg noBorder clsRateDet">Rate <br />(Rs./MT)</th>
                                                        <th scope="col" class="text-center darkblueBg noBorder clsAmountDet">Amount <br />(Rs.)</th>
                                                        <th scope="col" class="text-center darkblueBg OnlyLeftBorder clsQuantityDet">Quantity <br />(MT)</th>
                                                        <th scope="col" class="text-center darkblueBg noBorder clsRateDet">Rate <br />(Rs./MT)</th>
                                                        <th scope="col" class="text-center darkblueBg noBorder clsAmountDet">Amount <br />(Rs.)</th>
                                                        <th scope="col" class="text-center darkblueBg OnlyLeftBorder clsQuantityDet">Quantity <br />(MT)</th>
                                                        <th scope="col" class="text-center darkblueBg noBorder clsRateDet">Rate <br />(Rs./MT)</th>
                                                        <th scope="col" class="text-center darkblueBg noBorder clsAmountDet">Amount <br />(Rs.)</th>
                                                        <th scope="col" class="text-center darkblueBg noBorder">WAR <br />(Rs.)</th>
                                                        <th scope="col" class="text-center darkblueBg OnlyLeftBorder clsQuantityDet">Quantity <br />(MT)</th>
                                                        <th scope="col" class="text-center darkblueBg noBorder clsRateDet">Rate <br />(Rs./MT)</th>
                                                        <th scope="col" class="text-center darkblueBg noBorder clsAmountDet">Amount <br />(Rs.)</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="ajaxRes_detailedlist">
                                                </tbody>
                                            </table>
                                        </div>
                                        <div id="dvexl_detailedList" style="display: none;">
                                            <table id="tblprnt_detailedList">
                                                <thead id="tblprntHead_detailedList">
                                                    <tr>
                                                        <th class="ExportCol">Power Producer: </th>
                                                        <th class="ExportCol" id="expIPP"></th>
                                                        <th class="ExportCol"></th>
                                                        <th class="ExportCol">Fuel Type: </th>
                                                        <th class="ExportCol" id="expFuel"></th>
                                                        <th class="ExportCol"></th>
                                                        <th class="ExportCol">Date Range: </th>
                                                        <th class="ExportCol" id="expDate"></th>
                                                    </tr>
                                                    <tr style="height: 35px;">
                                                        <th scope="col" width="100px" class="text-center darkblueBg noBorder noBottomBorder"></th>
                                                        <th scope="col" class="text-center darkblueBg noBottomBorder" colspan="3">Opening Stock</th>
                                                        <th scope="col" class="text-center darkblueBg noBottomBorder" colspan="3">Receipt</th>
                                                        <th scope="col" class="text-center darkblueBg noBottomBorder" colspan="4">Actual Consumption</th>
                                                        <th scope="col" class="text-center darkblueBg noBottomBorder" colspan="3">Closing</th>
                                                    </tr>
                                                    <tr style="height: 35px;">
                                                        <th scope="col" class="text-cenr darkblueBg noBorder" style="padding: 0px 32px !important">Date<br /> &nbsp;</th>
                                                        <th scope="col" class="text-center darkblueBg OnlyLeftBorder">Quantity<br /> (MT)</th>
                                                        <th scope="col" class="text-center darkblueBg noBorder">Rate <br />(Rs./MT)</th>
                                                        <th scope="col" class="text-center darkblueBg noBorder">Amount <br />(Rs.)</th>
                                                        <th scope="col" class="text-center darkblueBg OnlyLeftBorder">Quantity <br />(MT)</th>
                                                        <th scope="col" class="text-center darkblueBg noBorder">Rate <br />(Rs./MT)</th>
                                                        <th scope="col" class="text-center darkblueBg noBorder">Amount <br />(Rs.)</th>
                                                        <th scope="col" class="text-center darkblueBg OnlyLeftBorder">Quantity <br />(MT)</th>
                                                        <th scope="col" class="text-center darkblueBg noBorder">Rate <br />(Rs./MT)</th>
                                                        <th scope="col" class="text-center darkblueBg noBorder">Amount <br />(Rs.)</th>
                                                        <th scope="col" class="text-center darkblueBg noBorder">WAR <br />(Rs.)</th>
                                                        <th scope="col" class="text-center darkblueBg OnlyLeftBorder">Quantity <br />(MT)</th>
                                                        <th scope="col" class="text-center darkblueBg noBorder">Rate <br />(Rs./MT)</th>
                                                        <th scope="col" class="text-center darkblueBg noBorder">Amount <br />(Rs.)</th>
                                                    </tr>


                                                </thead>
                                                <tbody id="tblprntBody_detailedList"></tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>

                                <div id="actualconsumption" class="tab-pane fade ">
                                    <div class="container-fluid">
                                        <br />

                                        <div class="row">

                                            <div class="col-md-2 pull-right">
                                                <button class="btn btn-primary pull-right customRoundbutton" id="addActualConsumptionForRlngAndGas_ModalBtn" style="border-color: #1d4a6deb; background-color: #1d4a6deb;">
                                                    <i class="fa fa-plus"></i> Add
                                                </button>
                                            </div>
                                            <div class="col-md-3 pull-left">
                                                <input class=" form-control roundedDateLocked text-center" readonly id="actualconsumptiondate" />
                                                <i class="date-icon-datonly fa fa-calendar" aria-hidden="true"></i>
                                            </div>

                                        </div>
                                        <br />
                                        <div class="table-responsive" style="height: 249px; width: 100%;">
                                            <table class="table table-bordered">
                                                <thead>
                                                    <tr style="height:35px;" class="ajaxRes_actualconsumption_ForRlngGas_Header">
                                                    </tr>
                                                </thead>
                                                <tbody class="ajaxRes_actualconsumption_ForRlngGas">
                                                </tbody>
                                            </table>


                                            <div class="col text-center">
                                                <button class="btn btn-success customRoundbutton" onclick="return submitActualConsumption_ForRlngGas(1)" id="btnSubmitActualConsumption_ForRlngAndGas">Submit</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div id="estimatedconsumption" class="tab-pane fade ">
                                    <div class="container-fluid">
                                        <br />

                                        <div class="row">

                                            <div class="col-md-2 pull-right">
                                                <button class="btn btn-primary pull-right customRoundbutton" id="addEstimatedConsumptionForRlngAndGas_ModalBtn" style="border-color: #1d4a6deb; background-color: #1d4a6deb;">
                                                    <i class="fa fa-plus"></i> Add
                                                </button>
                                            </div>
                                            <div class="col-md-3 pull-left">
                                                <input class=" form-control roundedDateLocked text-center" readonly id="estimatedconsumptiondate" />
                                                <i class="date-icon-datonly fa fa-calendar" aria-hidden="true"></i>
                                            </div>

                                        </div>
                                        <br />
                                        <div class="table-responsive" style="height: 249px; width: 100%;">
                                            <table class="table table-bordered">
                                                <thead>
                                                    <tr style="height:35px;" class="ajaxRes_actualconsumption_ForRlngGas_Header">
                                                    </tr>
                                                </thead>
                                                <tbody class="ajaxRes_actualconsumption_ForRlngGas">
                                                </tbody>
                                            </table>


                                            <div class="col text-center">
                                                <button class="btn btn-success customRoundbutton" onclick="return submitActualConsumption_ForRlngGas(2)" id="btnSubmitEstimatedConsummtion_ForRlngAndGas">Submit</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div id="modata" class="tab-pane fade">
                                    <div class="container-fluid">
                                        <br />
                                        <div class="row">
                                            <div class="col-md-2 pull-right">
                                                <button class="btn btn-primary customRoundbutton" id="addMoDataModalBtn" style=" border-color: #1d4a6deb; background-color: #1d4a6deb; float: right;">
                                                    <i class="fa fa-plus"></i> Add
                                                </button>
                                            </div>
                                            <div class="col-md-3 pull-left">
                                                <input class=" form-control  roundedDateLocked text-center" readonly id="MoDataDate" />
                                                <i class="date-icon-datonly fa fa-calendar" aria-hidden="true"></i>
                                            </div>
                                        </div>

                                        <br />
                                        <div class="table-responsive" style="height: 193px;width: 100%;">
                                            <table class="table table-bordered">
                                                <thead>
                                                    <tr style="height:35px;" class="ajaxRes_MoData_Header">
                                                    </tr>
                                                </thead>
                                                <tbody class="ajaxRes_MoData">
                                                </tbody>
                                            </table>

                                            <div class="col text-center">
                                                <button class="btn btn-success customRoundbutton" id="btnSubmitMoData" onclick="return submitMoData()">Submit</button>
                                            </div>
                                        </div>



                                        <label style="font-weight:bold;">Energy Cost Component</label>

                                        <div class="table-responsive" style="height: 193px;width: 100%;">
                                            <table class="table table-bordered">
                                                <thead>
                                                    <tr style="height:35px;">
                                                        <th class="text-center darkblueBg">Date</th>
                                                        <th class="text-center darkblueBg">IPP</th>
                                                        <th class="text-center darkblueBg">FCC (Rs./kWh)</th>
                                                        <th class="text-center darkblueBg">Total Variable O&M (Rs./kWh)</th>
                                                        <th class="text-center darkblueBg">Other Cost (Rs./kWh)</th>
                                                        <th class="text-center darkblueBg">Adjustment (Rs./kWh)</th>
                                                        <th class="text-center darkblueBg">Total (Rs./kWh)</th>

                                                    </tr>
                                                </thead>
                                                <tbody class="" id="ajaxRes_MoData2">
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>


                                <div id="refValueTab" class="tab-pane fade">
                                    <div class="container-fluid">
                                        <br />
                                        @*<div class="row">

                                                <div class="col-md-3 pull-left">
                                                    <input class=" form-control  roundedDateLocked text-center" readonly id="MoDataDate" />
                                                    <i class="date-icon-datonly fa fa-calendar" aria-hidden="true"></i>
                                                </div>
                                            </div>*@

                                        <br />
                                        <div class="table-responsive" style="height: 193px;width: 100%;">
                                            <table class="table table-bordered">
                                                <thead>
                                                    <tr style="height:35px;" class="ajaxRes_RefVal_Header">
                                                    </tr>
                                                </thead>
                                                <tbody class="ajaxRes_RefVal">
                                                </tbody>
                                            </table>
                                        </div>

                                    </div>
                                </div>

                                <div id="detailedlistRlngGas" class="tab-pane fade ">
                                    <div class="container-fluid">
                                        <br />
                                        <div class="row">

                                            <div class="col-md-2 pull-right" style=" padding-top: 24px;">
                                                <button class="btn btn-primary" id="btnExport" style=" border-color: #1d4a6deb; background-color: #1d4a6deb; border-radius: 7px; float: right; text-align: center; line-height: 14px;">
                                                    <i class="fa fa-download"></i> Export
                                                </button>
                                            </div>
                                            <div class="col-md-3 pull-left" style="position:absolute">
                                                <label style="color: #1d4a6deb; font-weight: bold; ">Select Date Range</label>
                                                <input class=" form-control  roundedDate " readonly id="daterangeRlngGas" style="color: #1d4a6deb; background: #fff !important; font-weight: bold; border-color: #1d4a6deb; padding-left: 6%; width: 81%" />
                                                <i id="dateRangeRlngGasIcon" class="date-icon-dateRange fa fa-calendar" aria-hidden="true"></i>
                                            </div>

                                        </div>

                                        <br />
                                        <div class="table-responsive" style="overflow: auto; max-height: 642px; min-height: auto !important; ">
                                            <table class="table table-bordered" id="tbl_results">
                                                <thead style="position: sticky; top: -2px;">
                                                    @*<tr>
                                                            <th class="ExportCol">Power Producer: </th>
                                                            <th class="ExportCol" id="expIPP_RLNG"></th>
                                                            <th class="ExportCol"></th>
                                                            <th class="ExportCol">Fuel Type: </th>
                                                            <th class="ExportCol" id="expFuel_RLNG"></th>
                                                            <th class="ExportCol"></th>
                                                            <th class="ExportCol">Date Range: </th>
                                                            <th class="ExportCol" id="expDate_RLNG"></th>
                                                        </tr>*@
                                                    <tr style="height:35px;" class="ajaxRes_detailedlist_ForRlngGas_Header">
                                                    </tr>
                                                </thead>
                                                <tbody class="ajaxRes_detailedlist_ForRlngGas">
                                                </tbody>
                                            </table>
                                        </div>
                                        <div id="dvexl" style="display: none;">
                                            <table id="tblprnt">
                                                <thead id="tblprntHead"></thead>
                                                <tbody id="tblprntBody"></tbody>
                                            </table>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>




                <!-- Modal -->
                <div class="modal right fade" id="addreceiptModal" tabindex="-1" role="dialog" aria-labelledby="addreceiptModal">
                    <div class="modal-dialog" role="document" style=" margin-top: 10%; width: 800px;">
                        <div class="modal-content" style=" border-radius: 26px;">

                            <div class="modal-header" style="background-color: #1d4a6deb;">
                                <h5 class="modal-title" id="receiptHeading" style=" color: #FAFAFA;"> Add Receipt</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close" style=" margin-top: -21px; color: white;">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>

                            <div class="modal-body">
                                <form>

                                    <div class="row">
                                        <div class="form-group col-md-4">
                                            @*<select class="form-control dropdownCustomStyle" id="fuelIndex" onchange="return populateComponents_bySelection()">
                                                </select>*@
                                            <select class="form-control dropdownCustomStyle" id="fuelIndex" onchange="return populatesubtype_bySelection()">
                                            </select>
                                        </div>

                                        <div class="form-group col-md-4">
                                            <select class="form-control dropdownCustomStyle" id="selectsubtype" style="display:none">
                                            </select>
                                        </div>
                                    </div>
                                    <input id="mtReceiptsHeader_Id" value="0" type="hidden" />

                                    <div class="row" id="receiptComponents">

                                    </div>


                                    <div class="row">
                                        <div class="form-group col-md-4">
                                            <label for="inputEmail4">Upload Files</label>
                                            <input type="file" class="form-control clsUpload" id="files" name="files[]" multiple onchange="encodeImgtoBase64(this)" accept="application/msword,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/pdf, image/*">
                                        </div>
                                        <div class="form-group col-md-4">

                                            <button type="button" class="btn btn-primary customRoundbutton" style=" margin-top: 24px;" onclick="return validateReceipts()" id="btnCalculateReceipt" case="0" datatype="">Calculate</button>


                                            <button type="button" class="btn btn-warning customRoundbutton" style=" margin-top: 24px;" onclick="return addReceipt()" id="btnSaveReceipt">Save</button>

                                            <button type="button" class="btn btn-warning customRoundbutton" style=" margin-top: 24px;" onclick="return updateReceipt()" id="btnUpdateReceipt">Update</button>

                                            @*<button type="button" class="btn btn-danger customRoundbutton" style=" margin-top: 24px;" data-dismiss="modal" aria-label="Close">Close</button>*@
                                        </div>
                                        <div class="form-group col-md-4">

                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="form-group col-md-4" id="downloadReceipt_res">

                                        </div>
                                    </div>
                                    <br />
                                </form>
                            </div>

                        </div><!-- modal-content -->
                    </div><!-- modal-dialog -->
                </div>
                <!-- modal -->
                <!-- Modal -->
                <div class="modal right fade" id="addconsumptionModal" tabindex="-1" role="dialog" aria-labelledby="addconsumptionModal">
                    <div class="modal-dialog" role="document" style=" margin-top: 10%; width: 800px;">
                        <div class="modal-content" style=" border-radius: 26px;">

                            <div class="modal-header" style="background-color: #1d4a6deb;">
                                <h5 class="modal-title" id="consumptionHeading" style=" color: #FAFAFA;"><span class="fa fa-file-text-o"></span> Add Consumption</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close" style=" margin-top: -21px; color: white;">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>

                            <div class="modal-body">
                                <form>

                                    <input id="mtConsumptionHeader_Id" value="0" type="hidden" />
                                    <div class="row" id="actualConsumptionComponents">
                                    </div>

                                    <div class="table-responsive" style="height: 300px; width: 100%; " id="fuelTableHeight">

                                        <table class="table table-bordered" id="tdActualFuelConsumption">
                                            <thead>
                                                <tr style="height:35px;">
                                                    <th scope="col" class="text-center darkblueBg col-md-2" id="refNo">Reference #</th>
                                                    <th scope="col" class="text-center darkblueBg col-md-2">Shipment # </th>
                                                    <th scope="col" class="text-center darkblueBg col-md-2">Quantity (MT)</th>
                                                    <th scope="col" class="text-center darkblueBg col-md-2">Rate(Rs.)</th>
                                                    <th scope="col" class="text-center darkblueBg col-md-2">CV(kCal/kg)</th>
                                                    <th scope="col" class="text-center darkblueBg col-md-2">Consumed Quantity (MT)</th>
                                                    <th scope="col" class="text-center darkblueBg col-md-2">Remaining Quantity(MT)</th>
                                                    @*<th scope="col" class="text-center darkblueBg col-md-2" >Shipment No.</th>*@
                                                </tr>
                                            </thead>
                                            <tbody id="tbl_actualfuelConsumption_res"></tbody>
                                        </table>
                                    </div>
                                    <br />

                                    <div class="row">
                                        <div class="col-md-3">
                                            <label for="totalquantity" id="labeltotalquantity" class="form-label">Total Quantity MT</label>

                                        </div>
                                    </div>


                                    <div class="row">
                                        <div class="col-md-3">
                                            <input class="form-control customQuantitybutton" readonly value="" id="totalquantity" />
                                        </div>
                                    </div>

                                    <br />


                                    <div class="row">
                                        <div class="form-group col-md-4">
                                            <label for="inputEmail4">Upload Files</label>
                                            <input type="file" class="form-control clsUpload" id="files" name="files[]" multiple onchange="encodeImgtoBase64(this)" accept="application/msword, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/pdf, image/*">
                                        </div>
                                        <div class="form-group col-md-4">
                                            <button type="button" class="btn btn-primary customRoundbutton" style=" margin-top: 24px;" onclick="return validateReceipts()" id="btnCalculateConsumption" case="0" datatype="">Calculate</button>
                                            @*<button type="button" class="btn btn-warning customRoundbutton" style=" margin-top: 24px;" onclick="return ActualConsumptionValidation()" id="btnSaveActualConsumption" datatab="0">Save</button>*@
                                            <button type="button" class="btn btn-warning customRoundbutton" style=" margin-top: 24px;" onclick="return addActualConsumption()" id="btnSaveActualConsumption" datatab="0">Save</button>
                                            <button type="button" class="btn btn-warning customRoundbutton" style=" margin-top: 24px;" onclick="return updateActualConsumption()" id="btnUpdateActualConsumption" datatab="0">Update</button>
                                            @*<button type="button" class="btn btn-danger customRoundbutton" style=" margin-top: 24px;" data-dismiss="modal" aria-label="Close">Close</button>*@
                                        </div>
                                        <div class="form-group col-md-4">

                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="form-group col-md-4" id="downloadConsumption_res">

                                        </div>
                                    </div>
                                </form>
                            </div>

                        </div><!-- modal-content -->
                    </div><!-- modal-dialog -->
                </div>

                @*Estimation Start*@

                <div class="modal right fade" id="addestimatedModal" tabindex="-1" role="dialog" aria-labelledby="addestimatedModal">
                    <div class="modal-dialog" role="document" style=" margin-top: 10%; width: 800px;">
                        <div class="modal-content" style=" border-radius: 26px;">

                            <div class="modal-header" style="background-color: #1d4a6deb;">
                                <h5 class="modal-title" id="estimatedHeading" style=" color: #FAFAFA;"><span class="fa fa-file-text-o"></span> Estimated Consumption</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close" style=" margin-top: -21px; color: white;">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>

                            <div class="modal-body">
                                <form>
                                    <input id="mtConsumptionHeader_Id" value="0" type="hidden" />
                                    <div class="row" id="estConsumptionComponents"> </div>
                                    @*<input id="mtConsumptionHeader_Id" value="0" type="hidden" />
                                        <div class="row" id="actualConsumptionComponents">
                                        </div>*@
                                    @*ADD CONSUMPTION GRID*@

                                    <div class="row">
                                        <div class="col-md-3">
                                            <label for="fullloadConsumption" class="form-label ">Full Load Consumption</label>
                                        </div>
                                    </div>


                                    <div class="row">
                                        <div class="col-md-3">
                                            <input class="form-control custom-input-rounded readonly" value="" id="fullloadConsumption" />
                                        </div>
                                    </div>

                                    <br />
                                    <div class="table-responsive" style="height: 249px; width: 100%;">

                                        <table class="table table-bordered">
                                            <thead>
                                                <tr style="height:35px;">
                                                    <th scope="col" class="text-center darkblueBg col-md-2">Reference #</th>
                                                    <th scope="col" class="text-center darkblueBg col-md-2">Shipment # </th>
                                                    <th scope="col" class="text-center darkblueBg col-md-2">Quantity (MT)</th>
                                                    <th scope="col" class="text-center darkblueBg col-md-2">Rate(Rs.)</th>
                                                    <th scope="col" class="text-center darkblueBg col-md-2">CV(kCal/kg)</th>
                                                    <th scope="col" class="text-center darkblueBg col-md-2">Consumed Quantity (MT)</th>
                                                    <th scope="col" class="text-center darkblueBg col-md-2">Remaining Quantity(MT)</th>
                                                </tr>
                                            </thead>
                                            <tbody id="tbl_estfuelConsumption_res"></tbody>
                                        </table>
                                    </div>
                                    <br />

                                    <div class="row">
                                        <div class="col-md-3">
                                            <label for="totalestquantity" id="labeltotalestquantity" class="form-label">Total Quantity MT</label>

                                        </div>
                                    </div>


                                    <div class="row">
                                        <div class="col-md-3">
                                            <input class="form-control customQuantitybutton" readonly value="" id="totalestquantity" />
                                        </div>
                                    </div>

                                    <br />

                                    <div class="row">
                                        <div class="form-group col-md-4">
                                            <label for="inputEmail4">Upload Files</label>
                                            <input type="file" class="form-control clsUpload" id="files" name="files[]" multiple onchange="encodeImgtoBase64(this)" accept="application/msword, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/pdf, image/*">
                                        </div>
                                        <div class="form-group col-md-4">
                                            @*<button type="button" class="btn btn-primary customRoundbutton" style=" margin-top: 24px;" onclick="return validateReceipts()" id="btnCalculateConsumption" case="0" datatype="">Calculate</button>*@
                                            @*<button type="button" class="btn btn-warning customRoundbutton" style=" margin-top: 24px;" onclick="return ActualConsumptionValidation()" id="btnSaveActualConsumption" datatab="0">Save</button>*@
                                            <button type="button" class="btn btn-warning customRoundbutton" style=" margin-top: 24px;" onclick="return addEstConsumption()" id="btnSaveEstConsumption" datatab="0">Save</button>
                                            <button type="button" class="btn btn-warning customRoundbutton" style=" margin-top: 24px;" onclick="return updateEstConsumption()" id="btnUpdateEstConsumption" datatab="0">Update</button>
                                            @*<button type="button" class="btn btn-danger customRoundbutton" style=" margin-top: 24px;" data-dismiss="modal" aria-label="Close">Close</button>*@
                                        </div>
                                        <div class="form-group col-md-4">

                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="form-group col-md-4" id="downloadConsumption_estres">

                                        </div>
                                    </div>
                                </form>
                            </div>

                        </div><!-- modal-content -->
                    </div><!-- modal-dialog -->
                </div>



                @*Estimation End*@



                <!-- modal -->
                <!-- Modal -->
                <div class="modal right fade" id="addMoDataModal" tabindex="-1" role="dialog" aria-labelledby="addMoDataModal">
                    <div class="modal-dialog" role="document" style=" margin-top: 10%; width: 800px;">
                        <div class="modal-content" style=" border-radius: 26px;">
                            <div class="modal-header" style="background-color: #1d4a6deb;">
                                <h5 class="modal-title" id="myModalLabel2" style=" color: #FAFAFA;"><span class="fa fa-file-text-o"></span> Add Data</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close" style=" margin-top: -21px; color: white;">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <form>
                                    <input id="mtMODataHeader_Id" value="0" type="hidden" />
                                    <label style="font-size:12px;" id="fetchLatestMODataDiv">
                                        <span>
                                            <input type="checkbox" onchange="return populatePreviousMoData(this)" style="height: 10px;">
                                            Fetch Latest Data
                                        </span>

                                    </label>

                                    @*<label class="switch">
                                            <input type="checkbox" onchange="return populatePreviousMoData(this)">
                                            <span class="slider round"></span>
                                        </label>*@

                                    <div class="row" id="moDataComponents">
                                    </div>
                                    <div class="row">
                                        <div class="form-group col-md-4">
                                            <label for="inputEmail4">Upload Files</label>
                                            <input type="file" class="form-control clsUpload" id="files" name="files[]" multiple onchange="encodeImgtoBase64(this)" accept="application/msword,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/pdf, image/*">
                                        </div>
                                        <div class="form-group col-md-4">
                                            <button type="button" class="btn btn-warning customRoundbutton" style=" margin-top: 24px;" onclick="return addMoData()" id="btnSaveMoData" datatab="0">Save</button>
                                            <button type="button" class="btn btn-warning customRoundbutton" style=" margin-top: 24px;" onclick="return updateMoData()" id="btnUpdateMoData" datatab="0">Update</button>

                                        </div>
                                        <div class="form-group col-md-4">

                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="form-group col-md-4" id="downloadMOData_res">
                                        </div>
                                    </div>
                                </form>
                            </div>

                        </div><!-- modal-content -->
                    </div><!-- modal-dialog -->
                </div>
                <!-- modal -->

            </div>
        </div>
    </div>
    <script src="~/Content/plugins/moment/min/moment.min.js"></script>


    <script>
        document.getElementById("dateRangeIcon").onclick = function (e) {
            document.getElementById("daterange").focus();
            // You could write code to toggle this
        }
        document.getElementById("dateRangeRlngGasIcon").onclick = function (e) {
            document.getElementById("daterangeRlngGas").focus();
            // You could write code to toggle this
        }
        function populatePreviousMoData(thisCtrl) {
            debugger;
            if (thisCtrl.checked) {
                var vendorId = $('#vendorId').val();
                var fuelType = $('#fuelType').val();
                var date = $('#date').val();

                $.ajax({
                    type: "GET",
                    url: "../MeritOrder/populatePreviousMoData?vendorId=" + vendorId + "&fuelType=" + fuelType + "&date=" + date,
                    dataType: 'json',
                    async: false,

                    beforeSend: function () {
                        $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (data) {


                        var response = JSON.parse(data[0].components);
                        //$('#moDataComponents').html('');
                        if (response.length > 0) {
                            $('#moDataComponents').html('');
                            $.each(response, function (index, value) {

                                var ID = value.ID;
                                var Name = value.Name;
                                var UNIT = value.UNIT;
                                var TYPE = value.TYPE;
                                var Value = value.Value;

                                if (TYPE == "Input") {
                                    var readonly = '';
                                    var type = 'text';
                                    var clsDecimal = 'decicost';
                                }

                                else if (TYPE == "Text") {
                                    var readonly = '';
                                    var type = 'text';
                                    var clsDecimal = '';

                                }
                                else if (TYPE == "Date") {
                                    var readonly = '';
                                    var type = 'date';
                                    var clsDecimal = '';

                                }
                                else if (TYPE == "Calculated") {
                                    var readonly = 'readonly';
                                    var type = 'text';
                                    var clsDecimal = '';

                                }
                                else if (TYPE == "Configurable") {
                                    var readonly = 'readonly';
                                    var type = 'text';
                                    var clsDecimal = 'decicost';

                                }

                                $('#moDataComponents').append(
                                    '<div class="form-group col-md-6">\
                                                                    <label for= "'+ Name + '"   style="font-size: 12px;"> ' + Name + ' <span class="required">*</span></label>\
                                                                    <input type="'+ type + '" class="form-control formulainputs ' + clsDecimal + '" id="' + ID + '" value="' + Value + '" ' + readonly + ' >\
                                                                </div>'
                                );

                            });



                        }
                        $.unblockUI();

                    },
                    error: function (request, textStatus, errorThrown) {
                        // alert(request.getResponseHeader('some_header'));
                        $.unblockUI();
                    }
                });
            }
            else {

            }
        }
        //LockPortal();
        //$(document).mouseup(function (e) {
        //    var container = $("#addreceiptModal");

        //    // if the target of the click isn't the container nor a descendant of the container
        //    if (!container.is(e.target) && container.has(e.target).length === 0) {
        //        // Close the modal
        //    }
        //});

        //$(document).on('click', function (e) {
        //
        //    if ($(e.target).closest('#addreceiptModal').length === 0) {
        //        e.stopPropagation();
        //    }
        //});
        //var modal = document.getElementById("addreceiptModal");

        //window.onclick = function (event) {
        //    if (event.target == modal) {
        //        modal.style.display = "none";
        //    }
        //}

        //$(document).ready(function () {
        //    $("#addreceiptModal").modal({
        //        backdrop: 'static',
        //        keyboard: false
        //    });
        //});
        var isReceiptTabOpened = 0;
        var filesData = [];
        var fuelType = $('#fuelType').val();
        var vendorId = $('#vendorId').val();
        var date = $('#date').val();
        var userId = $('#userId').val();
        var isRequired = false;
        var dateee = new Date();
        var fromDate = dateee.setDate(dateee.getDate() - 3);
        fromDate = moment(fromDate)['_d'];

        dateee = new Date();
        var toDate = dateee.setDate(dateee.getDate() - 1);
        toDate = moment(toDate)['_d'];

        var firstDay = new Date(fromDate);
        var lastDay = new Date(toDate);
        //var firstDay = new Date(dateee.getFullYear(), dateee.getMonth(), 1);
        //var lastDay = new Date(dateee.getFullYear(), dateee.getMonth() + 1, 0);

        //$('#daterange').daterangepicker({ startDate: moment(firstDay).format('MM/DD/YYYY'), endDate: moment(lastDay).format('MM/DD/YYYY') });
        //$('#daterangeRlngGas').daterangepicker({ startDate: moment(firstDay).format('MM/DD/YYYY'), endDate: moment(lastDay).format('MM/DD/YYYY') });
        $('#daterange').daterangepicker({
            startDate: moment(firstDay),

            endDate: moment(lastDay),
            locale: {
                format: 'DD-MMM-YYYY'
            }
        });
        $('#daterangeRlngGas').daterangepicker({
            startDate: moment(firstDay),
            endDate: moment(lastDay),
            locale: {
                format: 'DD-MMM-YYYY'
            }
        });

        $('#daterangeRlngGas').on('apply.daterangepicker', function (ev, picker) {

            getDetailedListForRlngAndGas();

        });

        $('#daterange').on('apply.daterangepicker', function (ev, picker) {

            getDetailedList();

        });

        $('body').off("click", "#addreceiptModalBtn");
        $('body').on("click", "#addreceiptModalBtn", function (event) {

            debugger;
            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }

            filesData = [];
            $('#files').val('');
            $('#downloadReceipt_res').html('');

            $('#btnCalculateReceipt').attr('datatype', "Receipts");
            $('#btnSaveReceipt').hide();
            $('#btnCalculateReceipt').show();
            //$('#addreceiptModal').modal('show'); 24-01-2023
            $('#mtReceiptsHeader_Id').val('0');
            //$('#btnSaveReceipt').show();
            $('#btnUpdateReceipt').hide();
            $('#selectsubtype').hide();
            $('#receiptComponents').html('');
            $('#btnCalculateReceipt').attr('case', '1'); // 1 For save, 2 For update
            $('#receiptHeading').html('');
            $('#receiptHeading').html('<span class="fa fa-file-text-o"></span> Add Receipt');

            if ($('#fuelType').val() == "Coal" || $('#fuelType').val() == "COAL") {
                $('#fuelIndex').val('-1');
                //populateComponents($('#fuelIndexHidden').val(), 1);
            }
            else {
                populateComponents($('#fuelIndexHidden').val(), 1);
            }



            $("#addreceiptModal").modal({
                backdrop: 'static',
                keyboard: false
            });

        });

        $('body').off("click", "#addMoDataModalBtn");
        $('body').on("click", "#addMoDataModalBtn", function (event) {
            debugger;
            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }

            var isValidated = MoDataValidation();
            if (isValidated == "-1") {
                return;
            }


            //$('#selectsubtype').val('');
            $('#fetchLatestMODataDiv').show();
            filesData = [];
            $('.clsUpload').val('');
            //$('#files').val('');
            $('#downloadMOData_res').html('');

            $('#consumptionHeading').html('');
            $('#consumptionHeading').html('<span class="fa fa-file-text-o"></span> Add Data');
            //$('#addMoDataModal').modal('show');
            //$('#mtReceiptsHeader_Id').val('0');
            $('#btnSaveMoData').show();
            $('#btnUpdateMoData').hide();
            $('#moDataComponents').html('');
            populateMODataComponents();
            //$('#fuelIndex').val('-1');
            //$('#receiptHeading').text('Add Receipt');
            //populateComponents($('#fuelIndexHidden').val(), 1);

            $("#addMoDataModal").modal({
                backdrop: 'static',
                keyboard: false
            });

        });

        $('body').off("click", "#addActualConsumptionModalBtn");
        $('body').on("click", "#addActualConsumptionModalBtn", function (event) {
            debugger;
            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }

            var isValidated = ActualConsumptionValidation();
            if (isValidated == "-1") {
                return;
            }
            filesData = [];
            $('.clsUpload').val('');
            $('#downloadConsumption_res').html('');
            $('.consumedMTAct').val('');

            $('#dateHidden').val($('#actualconsumptiondate').val());
            $('#btnCalculateConsumption').attr('datatype', "NormalConsumption");
            $('#btnCalculateConsumption').attr('case', '1');

            $('#btnSaveActualConsumption').show();
            $('#btnCalculateConsumption').hide();
            $('#actualConsumptionComponents').find('.formulainputs').each(function () {

                $('#btnCalculateConsumption').show();
                $('#btnSaveActualConsumption').hide();

            });


           // $('#btnCalculateConsumption').hide();





            $('#consumptionHeading').html('');
            $('#consumptionHeading').html('<span class="fa fa-file-text-o"></span> Add Consumption');


            //$('#addconsumptionModal').modal('show');
            $('#mtConsumptionHeader_Id').val('0');
            //$('#btnSaveActualConsumption').show();
            $('#btnUpdateActualConsumption').hide();
           // populateActualConsumptionComponents($('#fuelIndexHidden').val(), 2);
          //  populateFuelIndexActualConsumptionComponents($('#vendorId').val(), $('#fuelIndexHidden').val(), $('#actualconsumptiondate').val());

            $('#downloadConsumption_res').html('');
            //$('#actualConsumptionComponents').html('');
            //populateComponents($('#fuelIndex').val(), 1);

            if ($("#fuelIndexHidden").val() === '100') {
                populateFuelIndexActualConsumptionComponents($('#vendorId').val(), $('#fuelIndexHidden').val(), $('#actualconsumptiondate').val());
                // populateFuelIndexActualConsumptionComponents($('#vendorId').val(), $('#fuelIndex').val(), $('#estimateddate').val());
                $("#actualConsumptionComponents").hide();
                $("#tdActualFuelConsumption").show();
                $("#totalquantity").show();
                $("#labeltotalquantity").show();
                $("#fuelTableHeight").show();
                $('#totalquantity').val('');
            }
            else {
                populateActualConsumptionComponents($('#fuelIndexHidden').val(), 2);
                $("#actualConsumptionComponents").show();
                $("#tdActualFuelConsumption").hide();
                $("#totalquantity").hide();
                $("#labeltotalquantity").hide();
                $("#fuelTableHeight").hide();
            }

            $("#addconsumptionModal").modal({
                backdrop: 'static',
                keyboard: false
            });

        });

        $('body').off("click", "#estimationTab");
        $('body').on("click", "#estimationTab", function (event) {
            isReceiptTabOpened = 0;
            debugger;
            $('#receiptComponents').html('');
            $('#btnCalculateConsumption').attr('datatype', 'NormalConsumption');

            filesData = [];
            $('#btnSaveEstConsumption').attr('datatab', 2);
            $.ajax({
                type: "GET",
                url: "../MeritOrder/populateFuelIndex?vendorId=" + vendorId + "&fuelType=" + fuelType + "&type=2",
                dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {

                    debugger;
                    if (data.length == 1) {

                        $('#fuelIndexHidden').val(data[0].RuFuelIndex_Id);
                        // 1-->Reciepts, 2-->Actual Consumption, 3-->Estimated Consumption
                    }
                    else {
                        $('#fuelIndexHidden').val('-1');
                    }

                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });

           // populateEstConsumptionComponents($('#fuelIndexHidden').val(), 3);
            getSavedEstConsumption_ForRlngAndGas(2);
            //ActualConsumptionValidation();
           // populateFuelIndexConsumptionComponents($('#vendorId').val(), $('#fuelIndex').val(), $('#estimateddate').val())

             getSavedEstConsumption();

            // 1-->Reciepts, 2-->Actual Consumption, 3-->Estimated Consumption
        });

        $('body').off("click", "#addActualConsumptionForRlngAndGas_ModalBtn");
        $('body').on("click", "#addActualConsumptionForRlngAndGas_ModalBtn", function (event) {

            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }

            var isValidated = ActualConsumptionValidation();
            if (isValidated == "-1") {
                return;
            }

            filesData = [];
            $('.clsUpload').val('');
            $('#downloadConsumption_res').html('');

            $('#dateHidden').val($('#actualconsumptiondate').val());
            $('#btnCalculateConsumption').attr('datatype', "NormalConsumption_ForRlngAndGas");
            $('#btnCalculateConsumption').attr('case', '1');
            //$('#btnSaveActualConsumption').hide();
            //$('#btnCalculateConsumption').show();

            $('#consumptionHeading').html('');
            $('#consumptionHeading').html('<span class="fa fa-file-text-o"></span> Add Data');
            //$('#addconsumptionModal').modal('show');
            $('#mtConsumptionHeader_Id').val('0');
            //$('#btnSaveActualConsumption').show();
            $('#btnUpdateActualConsumption').hide();
            $('#actualConsumptionComponents').html('');

            //filesData = [];
            //$('#btnSaveActualConsumption').attr('datatab', 1); //1 for actual consumption, 2 for estimated consumption
            //getSavedActualConsumption_ForRlngAndGas(1); //1 for actual consumption, 2 for estimated consumption

            // It needs Fuel Index and Data tab for populating the components
            debugger;
            populateActualConsumptionComponents($('#fuelIndexHidden').val(), 2);
            //populateComponents($('#fuelIndex').val(), 1);

            $('#btnSaveActualConsumption').show();
            $('#btnCalculateConsumption').hide();
            $('#actualConsumptionComponents').find('.formulainputs').each(function () {

                $('#btnCalculateConsumption').show();
                $('#btnSaveActualConsumption').hide();

            });


            $("#actualConsumptionComponents").show();
            $("#tdActualFuelConsumption").hide();
            $("#totalquantity").hide();
            $("#labeltotalquantity").hide();
            $("#fuelTableHeight").hide();


            $("#addconsumptionModal").modal({
                backdrop: 'static',
                keyboard: false
            });

        });

        $('body').off("click", "#addEstimatedConsumptionForRlngAndGas_ModalBtn");
        $('body').on("click", "#addEstimatedConsumptionForRlngAndGas_ModalBtn", function (event) {


            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }

            var isValidated = ActualConsumptionValidation();
            if (isValidated == "-1") {
                return;
            }
            filesData = [];
            $('.clsUpload').val('');
            $('#downloadConsumption_res').html('');

            $('#dateHidden').val($('#estimatedconsumptiondate').val());
            $('#btnCalculateConsumption').attr('datatype', "EstimatedConsumption_ForRlngAndGas");
            $('#btnCalculateConsumption').attr('case', '1');
            //$('#btnSaveActualConsumption').hide();
            //$('#btnCalculateConsumption').show();

            $('#consumptionHeading').html('');
            $('#consumptionHeading').html('<span class="fa fa-file-text-o"></span> Add Data');
            //$('#addconsumptionModal').modal('show');
            $('#mtConsumptionHeader_Id').val('0');
            //$('#btnSaveActualConsumption').show();
            $('#btnUpdateActualConsumption').hide();
            //$('#actualConsumptionComponents').html('');
            //populateComponents($('#fuelIndex').val(), 1);
            debugger;
            populateActualConsumptionComponents($('#fuelIndexHidden').val(), 3); //2 for actual consumption, 3 for estimated consumption

            $('#btnSaveActualConsumption').show();
            $('#btnCalculateConsumption').hide();
            $('#actualConsumptionComponents').find('.formulainputs').each(function () {

                $('#btnCalculateConsumption').show();
                $('#btnSaveActualConsumption').hide();

            });

            $("#actualConsumptionComponents").show();
            $("#tdActualFuelConsumption").hide();
            $("#totalquantity").hide();
            $("#labeltotalquantity").hide();
            $("#fuelTableHeight").hide();

            $("#addconsumptionModal").modal({
                backdrop: 'static',
                keyboard: false
            });
        });





        $('body').off("click", "#receiptsTab");
        $('body').on("click", "#receiptsTab", function (event) {

            filesData = [];
            isReceiptTabOpened = 1;
            $('#actualConsumptionComponents').html('');
            RecieptsValidation();
            getSavedReceipt();
            //populateComponents($('#fuelIndex').val(), 1);
            // 1-->Reciepts, 2-->Actual Consumption, 3-->Estimated Consumption


            $.ajax({
                type: "GET",
                url: "../MeritOrder/populateFuelIndex?vendorId=" + vendorId + "&fuelType=" + fuelType + "&type=1",
                dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {
                    debugger;

                    if (data.length == 1) {

                        $('#fuelIndexHidden').val(data[0].RuFuelIndex_Id);
                        // 1-->Reciepts, 2-->Actual Consumption, 3-->Estimated Consumption
                    }
                    else {
                        $('#fuelIndexHidden').val('-1');
                    }

                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });

        });

        $('body').off("click", "#detailedlistTab");
        $('body').on("click", "#detailedlistTab", function (event) {
            isReceiptTabOpened = 0;

            $('#receiptComponents').html('');
            getDetailedList();
            getUnits();
        });

        function exists(arr, search) {
            return arr.some(row => row.includes(search));
        }


        $('body').off("click", "#RefValueTab");
        $('body').on("click", "#RefValueTab", function (event) {
            isReceiptTabOpened = 0;
            $('#receiptComponents').html('');

            var fuelType = $("#fuelType option:selected").text();
            var vendorId = $('#vendorId').val();

            $.ajax({
                type: "GET",
                url: "../MeritOrder/GetRefValues?vendorId=" + vendorId + "&fuelType=" + fuelType,
                dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {

                    $('.ajaxRes_RefVal_Header').html('');
                    $('.ajaxRes_RefVal').html('');

                    var tempArr = JSON.parse(data);
                    if (tempArr.length > 0) {

                        var allRefVals = [];
                        var codes = [];
                        var values = [];
                        var IPPNames = [];

                        $.each(tempArr, function (index, value) {
                            for (var key in value) {
                                if (key == 'Name' && !allRefVals.includes(value.Name)) {
                                    allRefVals.push(value.Name);
                                }

                                if (key == 'Code') {
                                    var val = [{ 'ippName': value.IPPName }, { 'ippcode': value.Code }];

                                    // Check if value.Code already exists in codes
                                    var codeExists = codes.some(function (item) {
                                        return item[1].ippcode === value.Code;
                                    });

                                    if (!codeExists) {
                                        codes.push(val);
                                    }
                                }
                                if (key == 'IPPName' && !IPPNames.includes(value.IPPName)) {
                                    IPPNames.push(value.IPPName);
                                }
                                if (key == 'Value' ) {
                                    values.push(value.Value);
                                }
                            }
                        });

                        // Appending headers for vendor names and dates
                        var headerRow = '';

                        // Appending vendor names
                        headerRow += '<th scope="col" class="text-center darkblueBg">Vendor Name</th>';

                        // Appending dates
                        allRefVals.forEach(function (ref) {
                            headerRow += '<th scope="col" class="text-center darkblueBg">' + ref + '</th>';
                        });

                        headerRow += '';
                        $('.ajaxRes_RefVal_Header').append(headerRow);
                        debugger;

                        // Populating table body with values
                        codes.forEach(function (item) {
                            debugger;
                            var row = '<tr>';
                            // Adding vendor name
                            row += '<td>' + item[0].ippName + '</td>';

                            allRefVals.forEach(function (head) {
                                $.each(tempArr, function (index, value) {
                                    debugger;
                                    if (value.Code === item[1].ippcode && value.Name === head) {
                                        row += '<td>' + value.Value + '</td>';
                                    }


                            });


                            });

                            row += '</tr>';
                            $('.ajaxRes_RefVal').append(row); // Append the row to your table body
                        });

                        //var tr = '<tr>';
                        //$.each(tempArr, function (index, value) {

                        //    $('.ajaxRes_RefVal_Header').append('<th scope="col" class="text-center darkblueBg">' + value.Name + '</th>');
                        //});

                        //for (var i = 0; i < tempArr.length; i++) {
                        //    tr += '<td align="right">' + parseFloat(tempArr[i].Value).toFixed(4) + '</td>';
                        //}

                        //tr += '</tr>';
                        //$('.ajaxRes_RefVal').append(tr);
                    }
                    $.unblockUI();

                },
                error: function () {
                    $.unblockUI();
                }
            });

        });





        $('body').off("click", "#detailedlistRlngGasTab");
        $('body').on("click", "#detailedlistRlngGasTab", function (event) {
            $('#receiptComponents').html('');
            isReceiptTabOpened = 0;

            getDetailedListForRlngAndGas();
        });

        $('body').off("click", "#consumptionTab");
        $('body').on("click", "#consumptionTab", function (event) {
            isReceiptTabOpened = 0;

            $('#receiptComponents').html('');
            $('#btnCalculateConsumption').attr('datatype', 'NormalConsumption');

            filesData = [];
            $('#btnSaveActualConsumption').attr('datatab', 1);
            $.ajax({
                type: "GET",
                url: "../MeritOrder/populateFuelIndex?vendorId=" + vendorId + "&fuelType=" + fuelType + "&type=2",
                dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {

                    debugger;
                    if (data.length == 1) {

                        $('#fuelIndexHidden').val(data[0].RuFuelIndex_Id);
                        // 1-->Reciepts, 2-->Actual Consumption, 3-->Estimated Consumption
                    }
                    else {
                        $('#fuelIndexHidden').val('-1');
                    }

                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });

            //ActualConsumptionValidation();
            populateActualConsumptionComponents($('#fuelIndexHidden').val(), 2);
            getSavedActualConsumption();

            // 1-->Reciepts, 2-->Actual Consumption, 3-->Estimated Consumption
        });

        $('body').off("click", "#estimatedconsumptionTab");
        $('body').on("click", "#estimatedconsumptionTab", function (event) {
            isReceiptTabOpened = 0;


            filesData = [];
            $('#receiptComponents').html('');

            $('#btnSaveActualConsumption').attr('datatab', 2) //1 for actual consumption, 2 for estimated consumption
            $('#btnCalculateConsumption').attr('datatype', "EstimatedConsumption_ForRlngAndGas");

            $('#dateHidden').val($('#estimatedconsumptiondate').val());
            // It needs Fuel Index and Data tab for populating the components
            debugger;
            populateActualConsumptionComponents($('#fuelIndexHidden').val(), 3); //2 for actual consumption, 3 for estimated consumption

            getSavedActualConsumption_ForRlngAndGas(2); //1 for actual consumption, 2 for estimated consumption
            //getSavedActualConsumption();
            // 1-->Reciepts, 2-->Actual Consumption, 3-->Estimated Consumption
        });

        $('body').off("click", "#actualconsumptionTab");
        $('body').on("click", "#actualconsumptionTab", function (event) {
            isReceiptTabOpened = 0;


            filesData = [];
            $('#receiptComponents').html('');
            $('#dateHidden').val($('#actualconsumptiondate').val());
            $('#btnSaveActualConsumption').attr('datatab', 1); //1 for actual consumption, 2 for estimated consumption
            $('#btnCalculateConsumption').attr('datatype', "NormalConsumption_ForRlngAndGas");

            getSavedActualConsumption_ForRlngAndGas(1); //1 for actual consumption, 2 for estimated consumption

            // It needs Fuel Index and Data tab for populating the components
            populateActualConsumptionComponents($('#fuelIndexHidden').val(), 2);  //2 for actual consumption, 3 for estimated consumption
        });

        $('body').off("click", "#MoDataTab");
        $('body').on("click", "#MoDataTab", function (event) {
            isReceiptTabOpened = 0;


            filesData = [];
            $('#actualConsumptionComponents').html('');
            $('#receiptComponents').html('');
            getSavedMoData();
            getMoDataSummary();
            //populateMODataComponents();
            //$('#btnSaveActualConsumption').attr('datatab', 1); //1 for actual consumption, 2 for estimated consumption
            //getSavedActualConsumption_ForRlngAndGas(1); //1 for actual consumption, 2 for estimated consumption

            // It needs Fuel Index and Data tab for populating the components
            //populateActualConsumptionComponents($('#fuelIndexHidden').val(), 2);  //2 for actual consumption, 3 for estimated consumption
        });

        $('body').off('click', '#btnExport');
        $('body').on('click', '#btnExport', function (e) {
            e.preventDefault();

            $('#dvexl').show();
            $('#tblprnt').tableExport({ fileName: 'Exported Data', type: 'excel', escape: 'false' });
            $('#dvexl').hide();
            e.preventDefault();
        });

        $('body').off('click', '#btnExportDetailedList');
        $('body').on('click', '#btnExportDetailedList', function (e) {
            e.preventDefault();

            $('#dvexl_detailedList').show();
            $('#tblprnt_detailedList').tableExport({ fileName: 'Exported Data', type: 'excel', escape: 'false' });
            $('#dvexl_detailedList').hide();
            e.preventDefault();
        });


        $('body').off("paste", '.form-control');
        $('body').on("paste", '.form-control', function (e) {

            e.preventDefault();
            return false;
        });

        $('body').off("keyup", ".decicost");
        $('body').on("keyup", ".decicost", function (event) { //4 dec places

            if ($('#155').val() != "" && $('#155').val() != undefined && $('#155').val() != 0 && isReceiptTabOpened == 1) {
                debugger;
                $('#165').addClass('Mandatory');
                $('#165').removeClass('Optional');
                $('#165').prev().html('Remarks <span class="required">*</span>');

            }
            else if ($('#160').val() != "" && $('#160').val() != undefined && $('#160').val() != 0 && isReceiptTabOpened == 1) {
                $('#166').addClass('Mandatory');
                $('#166').removeClass('Optional');
                $('#166').prev().html('Remarks <span class="required">*</span>');
            }
            else if (isReceiptTabOpened == 1){
                $('#165').removeClass('Mandatory');
                $('#165').prev().html('Remarks');
                $('#165').addClass('Optional');

                $('#166').removeClass('Mandatory');
                $('#166').prev().html('Remarks');
                $('#166').addClass('Optional');
            }

            var keyCode = event.keyCode || event.which;
            if (keyCode == 8 || keyCode == 46) {

                $('#btnCalculateReceipt').show();
                $('#btnSaveReceipt').hide();
                $('#btnUpdateReceipt').hide();
                $('#btnUpdateActualConsumption').hide();

                if ($('#btnCalculateConsumption').attr('datatype') == "NormalConsumption" && $('#btnCalculateConsumption').attr('case') == "1") {
                    //Save Case for actual consumtpion in RFO, HSD, COAL
                    $('#btnCalculateConsumption').hide();
                    $('#btnSaveActualConsumption').show();
                    $('#btnUpdateActualConsumption').hide();

                    $('#actualConsumptionComponents').find('.formulainputs').each(function () {
                        $('#btnCalculateConsumption').show();
                        $('#btnSaveActualConsumption').hide();
                        $('#btnUpdateActualConsumption').hide();

                    });
                }
                else if ($('#btnCalculateConsumption').attr('datatype') == "NormalConsumption" && $('#btnCalculateConsumption').attr('case') == "2") {
                    //Update Case for actual consumtpion in RFO, HSD, COAL
                    $('#btnCalculateConsumption').hide();
                    $('#btnUpdateActualConsumption').show();
                    $('#btnSaveActualConsumption').hide();

                    $('#actualConsumptionComponents').find('.formulainputs').each(function () {
                        $('#btnCalculateConsumption').show();
                        $('#btnUpdateActualConsumption').hide();
                        $('#btnSaveActualConsumption').hide();


                    });

                }

                else if ($('#btnCalculateConsumption').attr('datatype') == "NormalConsumption_ForRlngAndGas" && $('#btnCalculateConsumption').attr('case') == "1") {
                    //Save Case for Actual consumtpion in GAS and RLNG
                    $('#btnCalculateConsumption').hide();
                    $('#btnSaveActualConsumption').show();
                    $('#btnUpdateActualConsumption').hide();

                    $('#actualConsumptionComponents').find('.formulainputs').each(function () {
                        $('#btnCalculateConsumption').show();
                        $('#btnUpdateActualConsumption').hide();
                        $('#btnSaveActualConsumption').hide();

                    });
                }

                else if ($('#btnCalculateConsumption').attr('datatype') == "NormalConsumption_ForRlngAndGas" && $('#btnCalculateConsumption').attr('case') == "2") {
                    //Update Case for Actual consumtpion in GAS and RLNG
                    $('#btnCalculateConsumption').hide();
                    $('#btnUpdateActualConsumption').show();
                    $('#btnSaveActualConsumption').hide();

                    $('#actualConsumptionComponents').find('.formulainputs').each(function () {
                        $('#btnCalculateConsumption').show();
                        $('#btnUpdateActualConsumption').hide();
                        $('#btnSaveActualConsumption').hide();

                    });
                }
                else if ($('#btnCalculateConsumption').attr('datatype') == "EstimatedConsumption_ForRlngAndGas" && $('#btnCalculateConsumption').attr('case') == "1") {
                    //Save Case for Estimated consumtpion in GAS and RLNG
                    //This one is 100% okay. Use Same Logic for rest If Found Errors in hiding and unhiding the buttons

                    $('#btnCalculateConsumption').hide();
                    $('#btnSaveActualConsumption').show();
                    $('#btnUpdateActualConsumption').hide();

                    $('#actualConsumptionComponents').find('.formulainputs').each(function () {
                        $('#btnCalculateConsumption').show();
                        $('#btnUpdateActualConsumption').hide();
                        $('#btnSaveActualConsumption').hide();

                    });
                }

                else if ($('#btnCalculateConsumption').attr('datatype') == "EstimatedConsumption_ForRlngAndGas" && $('#btnCalculateConsumption').attr('case') == "2") {
                    //Update Case for Estimated consumtpion in GAS and RLNG
                    $('#btnCalculateConsumption').hide();
                    $('#btnUpdateActualConsumption').show();
                    $('#btnSaveActualConsumption').hide();

                    $('#actualConsumptionComponents').find('.formulainputs').each(function () {
                        $('#btnCalculateConsumption').show();
                        $('#btnUpdateActualConsumption').hide();
                        $('#btnSaveActualConsumption').hide();

                    });
                }
            }

        });




        $('body').off("keypress", ".decicost");
        $('body').on("keypress", ".decicost", function (event) { //4 dec places

            debugger;
            $('#btnCalculateReceipt').show();
            $('#btnSaveReceipt').hide();
            $('#btnUpdateReceipt').hide();

            //$('#btnCalculateConsumption').show();
            //$('#btnSaveActualConsumption').hide();
            $('#btnUpdateActualConsumption').hide();


            if ($('#btnCalculateConsumption').attr('datatype') == "NormalConsumption" && $('#btnCalculateConsumption').attr('case') == "1") {
                //Save Case for actual consumtpion in RFO, HSD, COAL
                $('#btnCalculateConsumption').hide();
                $('#btnSaveActualConsumption').show();
                $('#btnUpdateActualConsumption').hide();

                $('#actualConsumptionComponents').find('.formulainputs').each(function () {
                    $('#btnCalculateConsumption').show();
                    $('#btnSaveActualConsumption').hide();
                    $('#btnUpdateActualConsumption').hide();


                });
            }
            else if ($('#btnCalculateConsumption').attr('datatype') == "NormalConsumption" && $('#btnCalculateConsumption').attr('case') == "2") {
                //Update Case for actual consumtpion in RFO, HSD, COAL
                $('#btnCalculateConsumption').hide();
                $('#btnUpdateActualConsumption').show();
                $('#btnSaveActualConsumption').hide();

                $('#actualConsumptionComponents').find('.formulainputs').each(function () {
                    $('#btnCalculateConsumption').show();
                    $('#btnUpdateActualConsumption').hide();
                    $('#btnSaveActualConsumption').hide();


                });

            }

            else if ($('#btnCalculateConsumption').attr('datatype') == "NormalConsumption_ForRlngAndGas" && $('#btnCalculateConsumption').attr('case') == "1") {
                //Save Case for Actual consumtpion in GAS and RLNG

                $('#btnCalculateConsumption').hide();
                $('#btnSaveActualConsumption').show();
                $('#btnUpdateActualConsumption').hide();

                $('#actualConsumptionComponents').find('.formulainputs').each(function () {

                    $('#btnCalculateConsumption').show();
                    $('#btnUpdateActualConsumption').hide();
                    $('#btnSaveActualConsumption').hide();

                });



            }

            else if ($('#btnCalculateConsumption').attr('datatype') == "NormalConsumption_ForRlngAndGas" && $('#btnCalculateConsumption').attr('case') == "2") {
                //Update Case for Actual consumtpion in GAS and RLNG
                $('#btnCalculateConsumption').hide();
                $('#btnUpdateActualConsumption').show();
                $('#btnSaveActualConsumption').hide();

                $('#actualConsumptionComponents').find('.formulainputs').each(function () {
                    $('#btnCalculateConsumption').show();
                    $('#btnUpdateActualConsumption').hide();
                    $('#btnSaveActualConsumption').hide();


                });
            }
            else if ($('#btnCalculateConsumption').attr('datatype') == "EstimatedConsumption_ForRlngAndGas" && $('#btnCalculateConsumption').attr('case') == "1") {
                //Save Case for Estimated consumtpion in GAS and RLNG
                $('#btnCalculateConsumption').hide();
                $('#btnSaveActualConsumption').show();
                $('#btnUpdateActualConsumption').hide();

                $('#actualConsumptionComponents').find('.formulainputs').each(function () {
                    $('#btnCalculateConsumption').show();
                    $('#btnUpdateActualConsumption').hide();
                    $('#btnSaveActualConsumption').hide();

                });
            }

            else if ($('#btnCalculateConsumption').attr('datatype') == "EstimatedConsumption_ForRlngAndGas" && $('#btnCalculateConsumption').attr('case') == "2") {
                //Update Case for Estimated consumtpion in GAS and RLNG
                $('#btnCalculateConsumption').hide();
                $('#btnUpdateActualConsumption').show();
                $('#btnSaveActualConsumption').hide();

                $('#actualConsumptionComponents').find('.formulainputs').each(function () {
                    $('#btnCalculateConsumption').show();
                    $('#btnUpdateActualConsumption').hide();
                    $('#btnSaveActualConsumption').hide();


                });
            }


            var keyCode = event.keyCode || event.which;
            if (keyCode == 9) {
                e.preventDefault();
                // call custom function here
            }
            var $this = $(this);

            if (
                (event.which != 46 || $this.val().indexOf('.') != -1)
                &&
                ((
                    (event.which < 48 && event.which != 45) ||
                    event.which > 57
                )
                    &&
                    (event.which != 0 && event.which != 8))
                ||
                (event.which == 45)) {

                var countMinusSign = ($this.val().match(/-/g) || []).length;
                var count = 0;
                for (let i = 0; i < _IsPositive.length; ++i) {

                    if ($this.attr("id") == _IsPositive[i]) {

                        count++;

                    }
                }
                if (count == 0) {
                    event.preventDefault();
                }




                    //}
                    //if ($this.attr("id") != 169 && $this.attr("id") != 175 && $this.attr("id") != 209 && $this.attr("id") != 240
                    //    && $this.attr("id") != 241
                    //    && $this.attr("id") != 242
                    //    && $this.attr("id") != 243) {
                    //    event.preventDefault();
                    //}
                    var text = $(this).val();
                    text = text.replace(/,/g, '');
                    if ((event.which == 46) && (text.indexOf('.') == -1)) {
                        setTimeout(function () {
                            if ($this.val().substring($this.val().indexOf('.')).length > 5) {
                                $this.val($this.val().substring(0, $this.val().indexOf('.') + 5));
                            }
                        }, 1);
                    }

                    if ((text.indexOf('.') != -1) &&
                        (text.substring(text.indexOf('.')).length > 4) &&
                        (event.which != 0 && event.which != 8) &&
                        ($(this)[0].selectionStart >= text.length - 4)) {
                        event.preventDefault();
                    }


                if (countMinusSign >= 1) {
                    event.preventDefault();
                }

            }// END of For Loop
        }); // END OF KEY PRESS

        $('.RlngAndGas').hide();
        $('.NonRlngAndGas').hide();
        $('.BothCases').hide();

        function populateFuelIndex() {
            debugger;
            filesData = [];
            fuelType = $('#fuelType').val();
            vendorId = $('#vendorId').val();
            getStockDate();
            $('#dateHidden').val($('#actualconsumptiondate').val());

           // if ($('#fuelType').val().toUpperCase() == 'HSD' || $('#fuelType').val().toUpperCase() == 'RFO' || $('#fuelType').val().toUpperCase() == 'COAL') {
                 if ($('#fuelType').val().toUpperCase() == 'HSD' || $('#fuelType').val().toUpperCase() == 'RFO' || $('#fuelType').val().toUpperCase() == 'COAL') {
                $('.RlngAndGas').hide();
                $('.NonRlngAndGas').show();
                     $('.BothCases').show();
                     populateFuelIndexIDForCoal();
                     debugger;
                     //var fIndex = $('#fuelIndexHidden').val()


                $('#receiptsTab').addClass('active');
                $('#consumptionTab').removeClass('active');
                $('#detailedlistTab').removeClass('active');
                $('#adjustmentTab').removeClass('active');
                $('#actualconsumptionTab').removeClass('active');
                $('#estimatedconsumptionTab').removeClass('active');
                $('#MoDataTab').removeClass('active');

                $('#receipts').addClass('active in');
                $('#consumption').removeClass('active in');
                $('#detailedlist').removeClass('active in');
                $('#adjustment').removeClass('active in');
                $('#actualconsumption').removeClass('active in');
                $('#estimatedconsumption').removeClass('active in');
                $('#modata').removeClass('active in');

                $('.tab-content').show();

                $('#btnCalculateReceipt').attr('datatype', "Receipts");

                type = 1;
                     isReceiptTabOpened = 1;

                     //if (_FuelIDCoal == 100) {
                     //    $('#estimationTab').show();
                     //}
                     //else {
                     //    $('#estimationTab').hide();
                     //}

            }
            else if ($('#fuelType').val().toUpperCase() == 'RLNG' || $('#fuelType').val().toUpperCase() == 'GAS') {
                $('.RlngAndGas').show();
                $('.NonRlngAndGas').hide();
                     $('.BothCases').show();

                $('#receiptsTab').removeClass('active');
                $('#consumptionTab').removeClass('active');
                $('#detailedlistTab').removeClass('active');
                $('#adjustmentTab').removeClass('active');
                $('#actualconsumptionTab').addClass('active');
                $('#estimatedconsumptionTab').removeClass('active');
                $('#MoDataTab').removeClass('active');
                $('#detailedlistRlngGasTab').removeClass('active');



                $('#receipts').removeClass('active in');
                $('#consumption').removeClass('active in');
                $('#detailedlist').removeClass('active in');
                $('#adjustment').removeClass('active in');
                $('#actualconsumption').addClass('active in');
                $('#estimatedconsumption').removeClass('active in');
                $('#modata').removeClass('active in');
                $('#detailedlistRlngGas').removeClass('active in');

                $('.tab-content').show();

                $('#btnSaveActualConsumption').attr('datatab', 1);
                $('#btnCalculateConsumption').attr('datatype', "NormalConsumption_ForRlngAndGas");
                type = 2;
                isReceiptTabOpened = 0;

            }
            else if ($('#fuelType').val() == '-1') {
                $('.RlngAndGas').hide();
                $('.NonRlngAndGas').hide();
                $('.tab-content').hide();
                $('.BothCases').hide();
                type = 0;


            }

            $.ajax({
                type: "GET",
                url: "../MeritOrder/populateFuelIndex?vendorId=" + vendorId + "&fuelType=" + fuelType + "&type=" + type,
                dataType: 'json',

                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {
                    debugger;

                    if (data.length == 1 && (fuelType != "COAL" && fuelType != "Coal") ) {
                        $('#fuelIndex').hide();
                        $('#fuelIndexHidden').val(data[0].RuFuelIndex_Id);



                        if ($('#fuelType').val().toUpperCase() == "RLNG" || $('#fuelType').val().toUpperCase() == "GAS") {
                            $('#btnSaveActualConsumption').attr('datatab', '1');

                            //Populate Consumption Components
                            populateActualConsumptionComponents(data[0].RuFuelIndex_Id, 2)
                        }
                        else {
                            //Validate Receipts

                            //Populate Receipt Components
                            populateComponents(data[0].RuFuelIndex_Id, 1)
                        }

                        //$('#fuelIndex').append(
                        //    '<option value="' + data[0].RuFuelIndex_Id + '">' + data[0].RuFuelIndex_Name + '</option>'
                        //);

                        //populateComponents(data[0].RuFuelIndex_Id, 1);
                        // 1-->Reciepts, 2-->Actual Consumption, 3-->Estimated Consumption
                    }

                    else if (data.length >= 1) {
                        $('#fuelIndex').html('');
                        $('#fuelIndex').append(
                            '<option value="-1" selected > Select Fuel Index</option>'
                        );
                        $.each(data, function (index, value) {

                            var RuFuelIndex_Id = value.RuFuelIndex_Id;
                            var RuFuelIndex_Name = value.RuFuelIndex_Name;

                            $('#fuelIndex').append(
                                '<option value="' + RuFuelIndex_Id + '">' + RuFuelIndex_Name + '</option>'
                            );

                        });

                    }
                    $.unblockUI();
                    //getStockDate();

                    RecieptsValidation();
                    getSavedActualConsumption_ForRlngAndGas(1);
                    getSavedEstConsumption_ForRlngAndGas(2)
                    getSavedReceipt();
                    getOpeningStockWidget();
                    getReceiptStockWidget();
                    getClosingStockWidget();
                    getSavedActualConsumption();
                    getUnits();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });
        }
        //var _FuelIDCoal;
        var _FuelIDCoal = 0;
        function populateFuelIndexIDForCoal(_FuelIDCoal) {
            debugger;
            filesData = [];
            fuelType = $('#fuelType').val();
            vendorId = $('#vendorId').val();
            getStockDate();
           // var type = 1;
            $('#dateHidden').val($('#actualconsumptiondate').val());

            $.ajax({
                type: "GET",
                url: "../MeritOrder/populateFuelIndexID?vendorId=" + vendorId + "&fuelType=" + fuelType + "&type=1",
                dataType: 'json',
                async: false,

                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {
                    debugger;
                    _FuelIDCoal = data[0].RuFuelIndex_Id;
                    if (_FuelIDCoal == 100) {
                        $('#estimationTab').show();
                    }
                    else {
                        $('#estimationTab').hide();
                    }

                    $.unblockUI();
                    //getStockDate();

                    RecieptsValidation();
                    getSavedActualConsumption_ForRlngAndGas(1);
                    getSavedEstConsumption_ForRlngAndGas(2)
                    getSavedReceipt();
                    getOpeningStockWidget();
                    getReceiptStockWidget();
                    getClosingStockWidget();
                    getSavedActualConsumption();
                    getUnits();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });
        }

        function getStockDate() {

            $.ajax({
                type: "GET",
                url: "../MeritOrder/getStockDate?vendorId=" + vendorId + "&fuelType=" + fuelType,
                dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {

                    var resArr = data.split('½');

                    var Actual_Reciept_Date = resArr[0];
                    var Estimated_Date = resArr[1];
                    var error_description = resArr[2];
                    Actual_Reciept_Date = moment(Actual_Reciept_Date).format('DD-MMM-YYYY');
                    Estimated_Date = moment(Estimated_Date).format('DD-MMM-YYYY');

                    $('#date').val(Actual_Reciept_Date);
                    $('#consumptiondate').val(Actual_Reciept_Date);
                    $('#actualconsumptiondate').val(Actual_Reciept_Date);
                    $('#estimatedconsumptiondate').val(Estimated_Date);
                    $('#MoDataDate').val(Actual_Reciept_Date);
                    $('#estimateddate').val(Estimated_Date);

                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });

        }


        $('body').off("click", "#addEstConsumptionModalBtn");
        $('body').on("click", "#addEstConsumptionModalBtn", function (event) {

            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }
            debugger;
            var isValidated = EstConsumptionValidation();
            if (isValidated == "-1") {
                return;
            }
            filesData = [];
            $('.clsUpload').val('');
            $('#downloadConsumption_res').html('');

            $('#dateHidden').val($('#actualconsumptiondate').val());
            $('#btnCalculateConsumption').attr('datatype', "NormalConsumption");
            $('#btnCalculateConsumption').attr('case', '1');

            $('#btnSaveEstConsumption').show();
            $('#btnCalculateConsumption').hide();
            $('#actualConsumptionComponents').find('.formulainputs').each(function () {

                $('#btnCalculateConsumption').show();
                $('#btnSaveEstConsumption').hide();

            });

            // $('#btnCalculateConsumption').hide();

            $('#estimatedHeading').html('');
            $('#estimatedHeading').html('<span class="fa fa-file-text-o"></span> Estimated Consumption');

            //$('#addconsumptionModal').modal('show');
            $('#mtConsumptionHeader_Id').val('0');
            //$('#btnSaveEstConsumption').show();
            $('#btnUpdateEstConsumption').hide();
            $('#totalestquantity').val('');

            debugger;
            populateFuelIndexConsumptionComponents($('#vendorId').val(), $('#fuelIndex').val(), $('#estimateddate').val())
            $('#downloadConsumption_res').html('');
            //$('#actualConsumptionComponents').html('');
            //populateComponents($('#fuelIndex').val(), 1);

            $("#addestimatedModal").modal({
                backdrop: 'static',
                keyboard: false
            });

        }); /*to open est con modal*/


        function populateSubType() {
           // $('#selectsubtype').hide();
            debugger;
            var fuelIndex = $('#fuelIndex').val();
            var vendorId = $('#vendorId').val();
            var fuelIndexHiddenId;
            $.ajax({
                type: "GET",
                url: "../MeritOrder/populateSubType?vendorId=" + vendorId + "&fuelIndex=" + fuelIndex,
                dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {
                    debugger;

                    if (data == '') {
                        $('#selectsubtype').hide();
                        populateComponents_bySelection();
                    }

                    else {
                        // Assuming 'selectSubType' is the ID of your dropdown
                        var selectSubType = $('#selectsubtype');

                    // Clear existing options
                    selectSubType.empty();

                    if (data.length > 0) {
                        $('#selectsubtype').append(
                            '<option value="-1" selected > Select Fuel Sub Type</option>'
                        );
                        // Iterate through the data array and append options to the dropdown
                        $.each(data, function (index, item) {
                            selectSubType.append($('<option>', {
                                value: item.RuFuelIndexSubType_Id,
                                text: item.RuFuelIndexSubType_Name
                            }));
                        });

                        // If there's only one item, you can set the hidden fields directly
                        if (data.length === 1) {
                            fuelIndexHiddenId = data[0].RuFuelIndexSubType_Id;
                            $('#fuelIndexHiddenId').val(fuelIndexHiddenId);
                            // $('#fuelIndexHiddenId').val(data[0].RuFuelIndexSubType_Id);
                            $('#fuelIndexHiddenName').val(data[0].RuFuelIndexSubType_Name);
                        }
                        else {
                            $('#fuelIndexHiddenId').val('-1');
                            $('#fuelIndexHiddenName').val('');
                        }

                        $('#selectsubtype').show();

                        selectSubType.on('change', function () {
                            fuelIndexHiddenId = $(this).val();
                            $('#fuelIndexHiddenId').val(fuelIndexHiddenId);
                            populateComponents_bySelection(fuelIndexHiddenId);

                        });
                    }
                    else {
                        $('#fuelIndexHiddenId').val('-1');
                        $('#fuelIndexHiddenName').val('');
                    }

                    $.unblockUI();
                }
            }
            });

        }

        populateSubType(function (fuelIndexHiddenId) {
            if (fuelIndexHiddenId !== null) {
                populateComponents_bySelection(fuelIndexHiddenId);
            } else {
                console.error('Error: Unable to retrieve fuelIndexHiddenId');
            }
        });

        var RuFuelIndexID;
        var _shipmentIDs = [];
        var _ConsumedQuan = [];
        function populateFuelIndexConsumptionComponents(vendorId, RuFuelIndexID, date) {
            var RuFuelIndexID = 100;
            debugger;

            $.ajax({
                type: "GET",
                url: "../MeritOrder/populateFuelIndexConsumptionComponents?vendorId=" + vendorId + "&FuelIndex=" + RuFuelIndexID + "&date=" + date,
                dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {
                    var tblestFuelConsumption = $('#tbl_estfuelConsumption_res');

                    tblestFuelConsumption.html('');
                    debugger;
                    //var shipmentIDs = [];
                    if (data.length > 0) {
                        for (var i = 0; i < data.length; i++) {
                            var rowData = data[i];
                            var CompRow = $('<tr class="files"></tr>');
                            var shipmentID = rowData.ShipmentID; // Store ShipmentID in a variable
                            _shipmentIDs.push(shipmentID);

                            $('#fullloadConsumption').val(rowData.FullLoadConsumption);
                            //var result = $(CompRow).closest('tr').data('result');

                            CompRow.append('<td class="text-center readonly">' + rowData.ShipmentID + '</td>');
                            CompRow.append('<td class="text-center readonly">' + rowData.Shipment_Number + '</td>');
                            CompRow.append('<td class="text-center readonly">' + rowData.ShipmentQuantity + '</td>');
                            CompRow.append('<td class="text-center readonly">' + rowData.ShipmentRate + '</td>');
                            CompRow.append('<td class="text-center readonly">' + rowData.Actual_CV + '</td>');
                            CompRow.append('<td class="text-center" rid=' + rowData.ShipmentID +'><input type="text" oninput="validateNumericInput(this)" style="border: none !important;margin-top: -6px;" class="consumedMT text-center" value=""></td>');

                            //CompRow.append('<td class="text-center readonly result-td"></td>');
                            CompRow.append('<td class="text-center readonly result-td">' + rowData.ShipmentQuantity + '</td>');

                            tblestFuelConsumption.append(CompRow);
                            _ConsumedQuan = [];

                        }
                    } else {
                        $('#fuelIndexHidden').val('-1');
                    }
                   // addEstConsumption(shipmentIDs);
                    $.unblockUI();
                },
                error: function (request, textStatus, errorThrown) {
                    // Handle error
                    $.unblockUI();
                }
            });
        }



        $(document).on('input', '.consumedMT', function () {
            debugger;
            var sum = 0;
            $('.consumedMT').each(function () {
                var value = parseFloat($(this).val()) || 0;
                sum += value;
            });
            $('#totalestquantity').val(sum);
        });


        $(document).on('change', '.consumedMT', function () {
            debugger;
            var inputVal = parseFloat($(this).val());
            //if (isNaN(inputVal))  {
            //    $(this).closest('tr').find('.result-td').text('');
            //}

            var id = $(this).closest('td').attr('rid');
            var consumedQ = {
                'Id': id,
                'ConsumedQuantity': inputVal
            };

            var existingIndex = _ConsumedQuan.findIndex(function (item) {
                return item.Id === id;
            });

            if (existingIndex !== -1) {
                // If id already exists, remove the item
                _ConsumedQuan.splice(existingIndex, 1);
            }

            // Push the new item
            _ConsumedQuan.push(consumedQ);


         //   var consumedQ = inputVal; // Store ShipmentID in a variable
        //    _ConsumedQuan.push(consumedQ);

            var quantity = parseFloat($(this).closest('tr').find('.text-center:eq(2)').text());


            //if (_ConsumedQuan[0].ConsumedQuantity > quantity) {
            //    swal({
            //        title: "Validation!",
            //        text: "Consumed quantity should be less than or equal to the Shipment Quantity.",
            //        type: "warning",
            //        showCancelButton: false,
            //        showConfirmButton: true
            //    });
            //    $(this).val('');
            //    return;
            //}
            if (inputVal > quantity) {
                swal({
                    title: "Validation!",
                    text: "Consumed quantity should be less than or equal to the Shipment Quantity.",
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                //$(this).val('');
                return;
            }
            var result = quantity - consumedQ.ConsumedQuantity;

            $(this).closest('tr').data('result', result);

            $(this).closest('tr').find('.result-td').text(result);

            //if (isNaN(result)) {
            //    $(this).closest('tr').find('.result-td').text('');

            //}

            if (isNaN(result)) {
                var shipmentQuantity = parseFloat($(this).closest('tr').find('.text-center:eq(2)').text());
                $(this).closest('tr').find('.result-td').text(shipmentQuantity);
            }
        });


        var RuFuelIndexID;
        var _shipmentIDs = [];
        var _ConsumedQuan = [];
        function populateFuelIndexActualConsumptionComponents(vendorId, fuelIndex, date) {
            //var RuFuelIndexID = $('#fuelIndex').val();
            debugger;

            $.ajax({
                type: "GET",
                url: "../MeritOrder/populateFuelIndexActualConsumptionComponents?vendorId=" + vendorId + "&fuelIndex=" + fuelIndex + "&date=" + date,
                dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {
                    var tblactualFuelConsumption = $('#tbl_actualfuelConsumption_res');

                    tblactualFuelConsumption.html('');
                    debugger;
                    //var shipmentIDs = [];
                    if (data.length > 0) {
                        for (var i = 0; i < data.length; i++) {
                            var rowData = data[i];
                            var ActualRow = $('<tr class="files"></tr>');
                            var shipmentID = rowData.ShipmentID; // Store ShipmentID in a variable
                            _shipmentIDs.push(shipmentID);


                            //var result = $(CompRow).closest('tr').data('result');

                            ActualRow.append('<td class="text-center readonly" rid="refNo" >' + rowData.ShipmentID + '</td>');
                            ActualRow.append('<td class="text-center readonly">' + rowData.Shipment_Number + '</td>');
                            ActualRow.append('<td class="text-center readonly">' + rowData.ShipmentQuantity + '</td>');
                            ActualRow.append('<td class="text-center readonly">' + rowData.ShipmentRate + '</td>');
                            ActualRow.append('<td class="text-center readonly">' + rowData.Actual_CV + '</td>');
                            ActualRow.append('<td class="text-center" rid=' + rowData.ShipmentID + '><input type="text" oninput="validateNumericInput(this)" class="consumedMTAct text-center" style="border: none !important;" value=""></td>');

                            //ActualRow.append('<td class="text-center readonly result-td"></td>');
                            ActualRow.append('<td class="text-center readonly result-td">' + rowData.ShipmentQuantity + '</td>');

                            tblactualFuelConsumption.append(ActualRow);

                        }

                    } else {
                        $('#fuelIndexHidden').val('-1');
                    }


                    // addEstConsumption(shipmentIDs);
                    $.unblockUI();
                },
                error: function (request, textStatus, errorThrown) {
                    // Handle error
                    $.unblockUI();
                }
            });
        }

        //function validateNumericInput(input) {
        //    input.value = input.value.replace(/[^0-9]/g, '');
        //}
        function validateNumericInput(input) {

            input.value = input.value.replace(/[^\d.]/g, '');

            input.value = input.value.replace(/(\..*)\./g, '$1');

            input.value = input.value.replace(/(\.\d*?)\./g, '$1');
        }






        $(document).on('input', '.consumedMTAct', function () {
            debugger;
            var sum = 0;
            $('.consumedMTAct').each(function () {
                var value = parseFloat($(this).val()) || 0;
                sum += value;
            });
            $('#totalquantity').val(sum);
        });


        //$(document).on('change', '.consumedMTAct', function () {
        //    debugger;
        //    var inputVal = parseFloat($(this).val());
        //    var id = $(this).closest('td').attr('rid');
        //    var consumedQ = {
        //        'Id': id,
        //        'ConsumedQuantity': inputVal
        //    };

        //    var existingIndex = _ConsumedQuan.findIndex(function (item) {
        //        return item.Id === id;
        //    });

        //    if (existingIndex !== -1) {
        //        // If id already exists, remove the item
        //        _ConsumedQuan.splice(existingIndex, 1);
        //    }

        //    // Push the new item
        //    _ConsumedQuan.push(consumedQ);

        //    var quantity = parseFloat($(this).closest('tr').find('.text-center:eq(1)').text());

        //    for (var i = 0; i < _ConsumedQuan.length; i++) {
        //        if (_ConsumedQuan[i].ConsumedQuantity > quantity) {
        //            swal({
        //                title: "Validation!",
        //                text: "Consumed quantity should be less than or equal to the Shipment Quantity.",
        //                type: "warning",
        //                showCancelButton: false,
        //                showConfirmButton: true
        //            });
        //            //$(this).val('');
        //            return;
        //        }
        //    }
        //    var result = quantity - consumedQ.ConsumedQuantity;

        //    $(this).closest('tr').data('result', result);

        //    $(this).closest('tr').find('.result-td').text(result);
        //});


        $(document).on('change', '.consumedMTAct', function () {
            debugger;
            var inputVal = parseFloat($(this).val());
            var id = $(this).closest('td').attr('rid');
            var consumedQ = {
                'Id': id,
                'ConsumedQuantity': inputVal
            };

            var existingIndex = _ConsumedQuan.findIndex(function (item) {
                return item.Id === id;
            });

            if (existingIndex !== -1) {
                // If id already exists, remove the item
                _ConsumedQuan.splice(existingIndex, 1);
            }

            // Push the new item
            _ConsumedQuan.push(consumedQ);

            var quantity = parseFloat($(this).closest('tr').find('.text-center:eq(2)').text());

            if (inputVal > quantity) {
                swal({
                    title: "Validation!",
                    text: "Consumed quantity should be less than or equal to the Shipment Quantity.",
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                //$(this).val('');
                return;
            }

            var result = quantity - consumedQ.ConsumedQuantity;

            $(this).closest('tr').data('result', result);

            $(this).closest('tr').find('.result-td').text(result);

            if (isNaN(result)) {
                var shipmentQuantity = parseFloat($(this).closest('tr').find('.text-center:eq(2)').text());
                $(this).closest('tr').find('.result-td').text(shipmentQuantity);
            }

        });


        function populatesubtype_bySelection() {

            debugger;

            populateSubType();



        }
        var _IsPositive = [];
        function populateComponents_bySelection(fuelIndexHiddenId = null) {

            debugger;
            //populateSubType();
            //$('#selectsubtype').show();

            $('#fuelIndexHidden').val($('#fuelIndex').val());
           // var fuelIndexHiddenId = $('#fuelIndexHiddenId').val();
            var fuelIndex = $('#fuelIndex').val();
            var vendorId = $('#vendorId').val();
            var typee = 1;
            debugger;
            $.ajax({
                type: "GET",
                url: "../MeritOrder/populateComponents?vendorId=" + vendorId + "&fuelIndex=" + fuelIndex + "&type=" + typee + "&fuelIndexHiddenId=" + fuelIndexHiddenId,
                dataType: 'json',
                async: false,

                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {

                    debugger;
                    var response = JSON.parse(data[0].components);
                    $('#receiptComponents').html('');
                    $('#downloadReceipt_res').html('');
                    if (response.length > 0) {
                        _IsPositive = [];
                        var isCal = 0;
                        $.each(response, function (index, value) {
                            debugger;
                            var ID = value.ID;
                            var Name = value.Name;
                            var UNIT = value.UNIT;
                            var TYPE = value.TYPE;
                            var Value = value.Value;
                            var Formula = value.Formula;
                            var IsPositive = value.IsPositive;
                            if (IsPositive == -1) {
                                _IsPositive.push(ID);
                            }
                            if (value.InputType =="Mandatory") {
                                var span = '<span class="required">*</span>';
                            }
                            else {
                                var span = '<span></span>';
                            }


                            if (TYPE == "Input") {
                                debugger;
                                var readonly = '';
                                var type = 'text';
                                var clsDecimal = 'decicost';

                            }

                            else if (TYPE == "Text") {
                                var readonly = '';
                                var type = 'text';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Date") {
                                var readonly = '';
                                var type = 'date';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Calculated") {
                                var readonly = 'readonly';
                                var type = 'text';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Configurable") {
                                var readonly = 'readonly';
                                var type = 'text';
                                var clsDecimal = 'decicost';

                            }
                            else if (TYPE == "Configurable") {
                                var readonly = 'readonly';
                                var type = 'text';
                                var clsDecimal = 'decicost';

                            }
                            else if (TYPE == "TextArea") {
                                var readonly = '';
                                var type = 'TextArea';
                                var clsDecimal = '';

                            }

                            if (Formula == "" || Formula == "0") {

                                if (type == "TextArea") {
                                    $('#receiptComponents').append(
                                        '<div class="form-group col-md-12">\
                                                                        <label for= "'+ Name + '"   style="font-size: 12px;"> ' + Name + ' ' + UNIT + '   ' + span + '</label>\
                                                                        <textarea rows="5" class="form-control ' + value.InputType + '" id="' + ID + '" style="height: 100px !important;resize: none;">' + Value + '</textarea>\
                                                                    </div>'
                                    );
                                }
                                else {

                                        $('#receiptComponents').append(
                                            '<div class="form-group col-md-6">\
                                                                        <label for= "'+ Name + '"   style="font-size: 12px;"> ' + Name + ' ' + UNIT + '   ' + span + '</label>\
                                                                        <input type="'+ type + '" class="form-control ' + clsDecimal + ' ' + value.InputType + '" id="' + ID + '" value="' + Value + '" ' + readonly + ' formula="' + Formula + '">\
                                                                    </div>'
                                        );
                                    }


                            }
                            else {

                                $('#receiptComponents').append(
                                    '<div class="form-group col-md-6">\
                                                                        <label for= "'+ Name + '"   style="font-size: 12px;"> ' + Name + ' ' + UNIT + '  ' + span +' </label>\
                                                                        <input type="'+ type + '" class="form-control formulainputs ' + clsDecimal + ' ' + value.InputType +'" id="' + ID + '" value="' + Value + '" ' + readonly + ' formula="' + Formula + '" onchange="return calculateReceipt(this,' + isCal + ')">\
                                                                    </div>'
                                );
                                if (isCal == 0)
                                    isCal = 1;
                            }
                        });




                    }
                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });
        }

        function populateComponents(fuelIndex, type) {
            debugger;
            var fuelIndexx = fuelIndex;
            var typee = type;
            var vendorId = $('#vendorId').val();

            $.ajax({
                type: "GET",
                url: "../MeritOrder/populateComponents?vendorId=" + vendorId + "&fuelIndex=" + fuelIndexx + "&type=" + typee,
                dataType: 'json',
                async: false,

                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {
                    debugger;

                    var response = JSON.parse(data[0].components);
                    $('#receiptComponents').html('');
                    $('#downloadReceipt_res').html('');
                    if (response.length > 0) {
                        var isCal = 0;
                        $.each(response, function (index, value) {
                            debugger;
                            var ID = value.ID;
                            var Name = value.Name;
                            var UNIT = value.UNIT;
                            var TYPE = value.TYPE;
                            var Value = value.Value;
                            var Formula = value.Formula;

                            if (value.InputType == "Mandatory") {
                                var span = '<span class="required">*</span>';
                            }
                            else {
                                var span = '<span></span>';
                            }

                            if (TYPE == "Input") {
                                var readonly = '';
                                var type = 'text';
                                var clsDecimal = 'decicost';

                            }

                            else if (TYPE == "Text") {
                                var readonly = '';
                                var type = 'text';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Date") {
                                var readonly = '';
                                var type = 'date';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Calculated") {
                                var readonly = 'readonly';
                                var type = 'text';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Configurable") {
                                var readonly = 'readonly';
                                var type = 'text';
                                var clsDecimal = 'decicost';

                            }
                            else if (TYPE == "Configurable") {
                                var readonly = 'readonly';
                                var type = 'text';
                                var clsDecimal = 'decicost';

                            }
                            else if (TYPE == "TextArea") {
                                var readonly = '';
                                var type = 'TextArea';
                                var clsDecimal = '';

                            }



                            if (Formula == "" || Formula == "0") {

                                if (type == "TextArea") {
                                    $('#receiptComponents').append(
                                        '<div class="form-group col-md-12">\
                                                                        <label for= "'+ Name + '"   style="font-size: 12px;"> ' + Name + ' ' + UNIT + '   ' + span + '</label>\
                                                                        <textarea rows="5" class="form-control ' + value.InputType + '" id="' + ID + '" style="height: 100px !important;resize: none;">' + Value + '</textarea>\
                                                                    </div>'
                                    );
                                }
                                else {

                                    $('#receiptComponents').append(
                                        '<div class="form-group col-md-6">\
                                                                        <label for= "'+ Name + '"   style="font-size: 12px;"> ' + Name + ' ' + UNIT + '   ' + span + '</label>\
                                                                        <input type="'+ type + '"  class="form-control ' + clsDecimal + ' ' + value.InputType + '" id="' + ID + '" value="' + Value + '" ' + readonly + ' formula="' + Formula + '">\
                                                                    </div>'
                                    );

                                }

                            }
                            else {

                                $('#receiptComponents').append(
                                    '<div class="form-group col-md-6">\
                                                                        <label for= "'+ Name + '"   style="font-size: 12px;"> ' + Name + ' ' + UNIT + '   ' + span +'</label>\
                                                                        <input type="'+ type + '" class="form-control formulainputs ' + clsDecimal + '  ' + value.InputType +'" id="' + ID + '" value="' + Value + '" ' + readonly + ' formula="' + Formula + '" onchange="return calculateReceipt(this,' + isCal + ')">\
                                                                    </div>'
                                );
                                if (isCal == 0)
                                    isCal = 1;
                            }
                        });




                    }
                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });
        }

        function populateActualConsumptionComponents(fuelIndex, type) {

            var fuelIndexx = fuelIndex;
            var typee = type;
            var vendorId = $('#vendorId').val();

            $.ajax({
                type: "GET",
                url: "../MeritOrder/populateComponents?vendorId=" + vendorId + "&fuelIndex=" + fuelIndexx + "&type=" + typee,
                dataType: 'json',
                async: false,

                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {
                    debugger;

                    var response = JSON.parse(data[0].components);
                    $('#actualConsumptionComponents').html('');
                    if (response.length > 0) {
                        var isCal = 0;
                        $.each(response, function (index, value) {

                            var ID = value.ID;
                            var Name = value.Name;
                            var UNIT = value.UNIT;
                            var TYPE = value.TYPE;
                            var Value = value.Value;
                            var Formula = value.Formula;


                            if (value.InputType == "Mandatory") {
                                var span = '<span class="required">*</span>';
                            }
                            else {
                                var span = '<span></span>';
                            }

                            if (TYPE == "Input") {
                                var readonly = '';
                                var type = 'text';
                                var clsDecimal = 'decicost';
                            }

                            else if (TYPE == "Text") {
                                var readonly = '';
                                var type = 'text';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Date") {
                                var readonly = '';
                                var type = 'date';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Calculated") {
                                var readonly = 'readonly';
                                var type = 'text';
                                var clsDecimal = '';

                            }

                            else if (TYPE == "Configurable") {
                                var readonly = 'readonly';
                                var type = 'text';
                                var clsDecimal = 'decicost';

                            }

                            else if (TYPE == "TextArea") {
                                var readonly = '';
                                var type = 'TextArea';
                                var clsDecimal = '';


                            }

                            if (Formula == "" || Formula == "0") {

                                if (type == "TextArea") {
                                    $('#actualConsumptionComponents').append(
                                        '<div class="form-group col-md-12">\
                                                                        <label for= "'+ Name + '"   style="font-size: 12px;"> ' + Name + ' ' + UNIT + '   ' + span + '</label>\
                                                                        <textarea rows="5" class="form-control ' + value.InputType + '" id="' + ID + '" style="height: 100px !important;resize: none;">' + Value + '</textarea>\
                                                                    </div>'
                                    );
                                }
                                else {

                                        $('#actualConsumptionComponents').append(
                                            '<div class="form-group col-md-6">\
                                                                        <label for= "'+ Name + '"   style="font-size: 12px;"> ' + Name + ' ' + UNIT + '   ' + span + '</label>\
                                                                        <input type="'+ type + '" class="form-control ' + clsDecimal + ' ' + value.InputType + '" id="' + ID + '" value="' + Value + '" ' + readonly + ' formula="' + Formula + '">\
                                                                    </div>'
                                        );

                                }

                            }
                            else {

                                $('#actualConsumptionComponents').append(
                                    '<div class="form-group col-md-6">\
                                                                        <label for= "'+ Name + '"   style="font-size: 12px;"> ' + Name + ' ' + UNIT + '  <span class="required">*</span></label>\
                                                                        <input type="'+ type + '" class="form-control formulainputs ' + clsDecimal + '" id="' + ID + '" value="' + Value + '" ' + readonly + ' formula="' + Formula + '" onchange="return calculateReceipt(this)">\
                                                                    </div>'
                                );
                                if (isCal == 0)
                                    isCal = 1;
                            }
                        });





                    }
                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });
        }

        function populateEstConsumptionComponents(fuelIndex, type) {

            var fuelIndexx = fuelIndex;
            var typee = type;
            var vendorId = $('#vendorId').val();

            $.ajax({
                type: "GET",
                url: "../MeritOrder/populateComponents?vendorId=" + vendorId + "&fuelIndex=" + fuelIndexx + "&type=" + typee,
                dataType: 'json',
                async: false,

                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {
                    debugger;

                    var response = JSON.parse(data[0].components);
                    $('#estConsumptionComponents').html('');
                    if (response.length > 0) {
                        var isCal = 0;
                        $.each(response, function (index, value) {

                            var ID = value.ID;
                            var Name = value.Name;
                            var UNIT = value.UNIT;
                            var TYPE = value.TYPE;
                            var Value = value.Value;
                            var Formula = value.Formula;


                            if (value.InputType == "Mandatory") {
                                var span = '<span class="required">*</span>';
                            }
                            else {
                                var span = '<span></span>';
                            }

                            if (TYPE == "Input") {
                                var readonly = '';
                                var type = 'text';
                                var clsDecimal = 'decicost';
                            }

                            else if (TYPE == "Text") {
                                var readonly = '';
                                var type = 'text';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Date") {
                                var readonly = '';
                                var type = 'date';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Calculated") {
                                var readonly = 'readonly';
                                var type = 'text';
                                var clsDecimal = '';

                            }

                            else if (TYPE == "Configurable") {
                                var readonly = 'readonly';
                                var type = 'text';
                                var clsDecimal = 'decicost';

                            }

                            else if (TYPE == "TextArea") {
                                var readonly = '';
                                var type = 'TextArea';
                                var clsDecimal = '';


                            }

                            if (Formula == "" || Formula == "0") {

                                if (type == "TextArea") {
                                    $('#actualConsumptionComponents').append(
                                        '<div class="form-group col-md-12">\
                                                                        <label for= "'+ Name + '"   style="font-size: 12px;"> ' + Name + ' ' + UNIT + '   ' + span + '</label>\
                                                                        <textarea rows="5" class="form-control ' + value.InputType + '" id="' + ID + '" style="height: 100px !important;resize: none;">' + Value + '</textarea>\
                                                                    </div>'
                                    );
                                }
                                else {

                                    $('#actualConsumptionComponents').append(
                                        '<div class="form-group col-md-6">\
                                                                        <label for= "'+ Name + '"   style="font-size: 12px;"> ' + Name + ' ' + UNIT + '   ' + span + '</label>\
                                                                        <input type="'+ type + '" class="form-control ' + clsDecimal + ' ' + value.InputType + '" id="' + ID + '" value="' + Value + '" ' + readonly + ' formula="' + Formula + '">\
                                                                    </div>'
                                    );

                                }

                            }
                            else {

                                $('#actualConsumptionComponents').append(
                                    '<div class="form-group col-md-6">\
                                                                        <label for= "'+ Name + '"   style="font-size: 12px;"> ' + Name + ' ' + UNIT + '  <span class="required">*</span></label>\
                                                                        <input type="'+ type + '" class="form-control formulainputs ' + clsDecimal + '" id="' + ID + '" value="' + Value + '" ' + readonly + ' formula="' + Formula + '" onchange="return calculateReceipt(this)">\
                                                                    </div>'
                                );
                                if (isCal == 0)
                                    isCal = 1;
                            }
                        });





                    }
                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });
        }

        function splitFormula(thisCtrl) {

            const numbers = thisCtrl.split(/[*]|[+]|[-]|[(]|[)]|[\/]/);
            //const operators = thisCtrl.split(/[^-|+|\/|\*]/).filter(e => e);
            const operators = thisCtrl.match(/[+\-*/()]/g);
            return {
                "numbers": numbers,
                "operators": operators
            };
        }

        function addReceipt() {

            var valArr = [];
            isRequired = false;



            $('#receiptComponents').children().find('input, textarea').each(function () {

                if ($(this).hasClass("Mandatory")) {
                    if ($(this).val() == "") {
                        isRequired = true;
                    }
                }

                valArr.push({
                    ID: $(this).attr('id'),
                    Value: $(this).val()
                });
            });

            fuelType = $('#fuelType').val();
            vendorId = $('#vendorId').val();
            date = $('#date').val();
            userId = $('#userId').val();
            var fuelIndex = $('#fuelIndexHidden').val();


            if (fuelType == '-1') {
                swal({
                    title: "Mandatory!",
                    text: "Select Fuel Type",
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
            }
            else if (isRequired == true) {
                swal({
                    title: "Mandatory!",
                    text: "All field required",
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
            }
            else if (fuelIndex == '-1' || fuelIndex == '0') {
                swal({
                    title: "Mandatory!",
                    text: "Select Fuel Index",
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
            }
            else {


                var formdata = new FormData();
                formdata.append('fuelType', fuelType);
                formdata.append('valArr', JSON.stringify(valArr));
                formdata.append('vendorId', vendorId);
                formdata.append('date', date);
                formdata.append('fuelIndex', fuelIndex);
                formdata.append('userId', userId);
                formdata.append('filesData', JSON.stringify(filesData));

                $.ajax({
                    type: "POST",
                    url: "../MeritOrder/addReceipt",
                    data: formdata,
                    contentType: false,
                    processData: false,

                    beforeSend: function () {
                        $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (data) {
                        debugger;
                        $.unblockUI();

                        var resArr = data.split('½');
                        if (resArr[0] == "1") {

                            swal({
                                title: "Inserted!",
                                text: "Stock inserted successfully.",
                                type: "success",
                                showCancelButton: false,
                                showConfirmButton: true
                            }, function () {
                                $('#addreceiptModal').modal('hide');
                                getSavedReceipt();
                            }
                            );

                        }
                        else {
                            swal({
                                title: "Error!",
                                text: resArr[1],
                                type: "error",
                                showCancelButton: false,
                                showConfirmButton: true
                            });
                        }



                    },
                    error: function (request, textStatus, errorThrown) {
                        $.unblockUI();
                    }
                });

            }
        }

        function submitReceipts() {

            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }

            swal({
                title: "Are you sure?",
                text: "You are going to submit Receipt!",
                type: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn btn-danger",
                confirmButtonText: "Yes, submit it",
                cancelButtonText: "No, cancel"
            }, function () {

                fuelType = $('#fuelType').val();
                vendorId = $('#vendorId').val();
                date = $('#date').val();
                userId = $('#userId').val();

                var formdata = new FormData();
                formdata.append('fuelType', fuelType);
                formdata.append('vendorId', vendorId);
                formdata.append('date', date);
                formdata.append('userId', userId);


                $.ajax({
                    type: "POST",
                    url: "../MeritOrder/submitReceipts",
                    data: formdata,
                    async: false,
                    contentType: false,
                    processData: false,

                    beforeSend: function () {
                        $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (data) {


                        var resArr = data.split('½');
                        if (resArr[0] == "1") {
                            setTimeout(function () {
                                swal({
                                    title: "Submitted!",
                                    text: "Receipt Submitted Successfully",
                                    type: "success",
                                    showCancelButton: false,
                                    showConfirmButton: true
                                }, function () {
                                    getSavedReceipt();
                                    RecieptsValidation();

                                    getOpeningStockWidget();
                                    getClosingStockWidget();
                                    getReceiptStockWidget();
                                }
                                );
                            }, 500);

                        }
                        else {
                            swal({
                                title: "Error!",
                                text: resArr[1],
                                type: "error",
                                showCancelButton: false,
                                showConfirmButton: true
                            });
                        }

                        //var resArr = data.split('½');
                        //if (resArr[0] == "1") {

                        //    swal({
                        //        title: "Submitted!",
                        //        text: "Receipt Submitted Successfully",
                        //        type: "success",
                        //        showCancelButton: false,
                        //        showConfirmButton: true
                        //    }, function () {
                        //        getSavedReceipt();
                        //    }
                        //    );

                        //}
                        //else {
                        //    swal({
                        //        title: "Error!",
                        //        text: resArr[1],
                        //        type: "error",
                        //        showCancelButton: false,
                        //        showConfirmButton: true
                        //    });
                        //}

                        $.unblockUI();

                    },
                    error: function (request, textStatus, errorThrown) {
                        $.unblockUI();
                    }
                });
            });

        }

        function currencyFormat(value) {

            //var amount = parseFloat(value).toFixed(4);
            //amount = amount.toLocaleString('en-US');
            //return amount;
            //var num = 2046430.123;
            var amount = value.toLocaleString(undefined, {
                minimumFractionDigits: 4,
                maximumFractionDigits: 4
            });
            return amount;

        }

        function getSavedReceipt() {

            fuelType = $('#fuelType').val();
            vendorId = $('#vendorId').val();
            date = $('#date').val();

            $.ajax({
                type: "GET",
                url: "../MeritOrder/getSavedReceipt?vendorId=" + vendorId + "&fuelType=" + fuelType + "&date=" + date,
                dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {

                    $('#tbl_entered_receipts').html('');
                    if (data.length > 0) {


                        $.each(data, function (index, value) {
                            var downloadData = "";
                            //const momentTimestamp = moment(value.Reciept_Date);
                            //var date = momentTimestamp.format("DD MMM YYYY");
                            const momentTimestamp = moment(value.Reciept_Date);
                            var date = momentTimestamp.format("DD-MMM-YYYY");
                            if (value.attachments != '') {
                                var attachments = JSON.parse(value.attachments);
                                if (attachments.length > 0) {
                                    for (var i = 0; i < attachments.length; i++) {
                                        var attachmentId = attachments[i]['ID'];
                                        var attachmentName = attachments[i]['Name'];

                                        downloadData += '<a onclick="return downloadAttachment(' + attachmentId + ')">' + attachmentName + '  &nbsp;<span class="fa fa-download"></span></a>';
                                    }
                                }
                            }

                            if (value.hide_submitbutton == "1") {
                                $('#btnSubmitReceipts').attr('disabled', true);
                            }
                            else {
                                $('#btnSubmitReceipts').attr('disabled', false);
                            }
                            @*<td align="center">'+ date + '</td>\*@
                            if (value.submitted_flag == "1") {
                                $('#tbl_entered_receipts').append(
                                    '<tr style="background:#e1e1e1;">\
                                                                        <td align="right">'+ currencyFormat(value.Quantity) + '</td>\
                                                                        <td align="right">'+ currencyFormat(value.Rate) + '</td>\
                                                                        <td align="right">'+ currencyFormat(value.amount) + '</td>\
                                                                        <td align="center">\
                                                                           <div class="dropdown">\
                                                                        <button onclick = "myFunction(this)" class= "dropbtn" > View</button >\
                                                                    <div id="myDropdown" class="dropdown-content">\
                                                                        '+ downloadData + '\
                                                                    </div>\
                                                                            </div >\
                                                                        </td>\
                                                                        <td align="center">\
                                                                            <i class="fa fa-edit icondisabled" ></i> | \
                                                                            <i class="fa fa-trash icondisabled"></i>\
                                                                        </td >\
                                                                    </tr>\ '
                                );
                            }
                            else {
                                $('#tbl_entered_receipts').append(
                                    '<tr>\
                                                                        <td align="right">'+ currencyFormat(value.Quantity) + '</td>\
                                                                        <td align="right">'+ currencyFormat(value.Rate) + '</td>\
                                                                        <td align="right">'+ currencyFormat(value.amount) + '</td>\
                                                                        <td align="center">\
                                                                           <div class="dropdown">\
                                                                        <button onclick = "myFunction(this)" class= "dropbtn" > View</button >\
                                                                    <div id="myDropdown" class="dropdown-content">\
                                                                        '+ downloadData + '\
                                                                    </div>\
                                                                            </div >\
                                                                        </td>\
                                                                        <td align="center">\
                                                                            <i class="fa fa-edit" onclick=" return editStockRecord('+ value.mtReceiptsHeader_Id + ', ' + value.RuFuelIndex_Id + ', 1)"></i> | \
                                                                            <i class="fa fa-trash" onclick=" return deleteStock('+ value.mtReceiptsHeader_Id + ')"></i>\
                                                                    </td >\
                                                                    </tr>\ '
                                );
                            }


                        });


                    }
                    else {
                        $('#btnSubmitReceipts').attr('disabled', true);

                        $('#tbl_entered_receipts').append(
                            '<tr><td align="center" colspan="5">No Record Found</td></tr>\ '
                        );
                    }
                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });
        }

        function getOpeningStockWidget() {

            $.ajax({
                type: "GET",
                url: "../MeritOrder/getOpeningStockWidget?vendorId=" + vendorId + "&fuelType=" + fuelType + "&date=" + date,
                dataType: 'json',
                async: false,

                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {
                    $('#tbl_openingstock_res').html('');
                    if (data.length > 0) {
                        var totalQuantity = 0;
                        var totalRate = 0;
                        var totalAmount = 0;

                        $.each(data, function (index, value) {
                            $('#tbl_openingstock_res').append(
                                '<tr>\
                                        <td align="right">'+ currencyFormat(value.Quantity) + '</td>\
                                        <td align="right">'+ currencyFormat(value.Rate) + '</td>\
                                        <td align="right">'+ currencyFormat(value.Amount) + '</td>\
                                    </tr>\ '
                            );

                            totalQuantity += value.Quantity;
                            //totalRate += value.Rate;
                            totalAmount += value.Amount;

                        });
                        totalRate = totalAmount / totalQuantity;


                        $('#tbl_openingstock_res').append(
                            '<tr>\
                                        <td align="right" style="font-weight:bold;">'+ currencyFormat(totalQuantity) + '</td>\
                                        <td align="right" style="font-weight:bold;">'+ currencyFormat(totalRate) + '</td>\
                                        <td align="right" style="font-weight:bold;">'+ currencyFormat(totalAmount) + '</td>\
                                    </tr>\ '
                        );
                    }
                    else {
                        $('#tbl_openingstock_res').append(
                            '<tr>\
                                        <td colspan="3" align="center">No Record Found</td>\
                                    </tr>\ '
                        );
                    }
                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });

        }

        function getClosingStockWidget() {
            debugger;
            $.ajax({
                type: "GET",
                url: "../MeritOrder/getClosingStockWidget?vendorId=" + vendorId + "&fuelType=" + fuelType + "&date=" + date,
                dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {
                    $('#tbl_closingstock_res').html('');
                    if (data.length > 0) {
                        var totalQuantity = 0;
                        var totalRate = 0;
                        var totalAmount = 0;
                        $.each(data, function (index, value) {
                            $('#tbl_closingstock_res').append(
                                '<tr>\
                                        <td align="right">'+ currencyFormat(value.Quantity) + '</td>\
                                        <td align="right">'+ currencyFormat(value.Rate) + '</td>\
                                        <td align="right">'+ currencyFormat(value.Amount) + '</td>\
                                    </tr>\ '
                            );
                            totalQuantity += value.Quantity;
                           // totalRate += value.Rate;
                            totalAmount += value.Amount;
                        });
                        totalRate = totalAmount / totalQuantity;
                        $('#tbl_closingstock_res').append(
                            '<tr>\
                                        <td align="right" style="font-weight:bold;">'+ currencyFormat(totalQuantity) + '</td>\
                                        <td align="right" style="font-weight:bold;">'+ currencyFormat(totalRate) + '</td>\
                                        <td align="right" style="font-weight:bold;">'+ currencyFormat(totalAmount) + '</td>\
                                    </tr>\ '
                        );
                    }
                    else {
                        $('#tbl_closingstock_res').append(
                            '<tr>\
                                        <td colspan="3" align="center">No Record Found</td>\
                                    </tr>\ '
                        );
                    }
                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });

        }

        function getReceiptStockWidget() {

            $.ajax({
                type: "GET",
                url: "../MeritOrder/getReceiptStockWidget?vendorId=" + vendorId + "&fuelType=" + fuelType + "&date=" + date,
                dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {
                    $('#tbl_receiptstock_res').html('');
                    if (data.length > 0) {
                        var totalQuantity = 0;
                        var totalRate = 0;
                        var totalAmount = 0;
                        $.each(data, function (index, value) {
                            $('#tbl_receiptstock_res').append(
                                '<tr>\
                                        <td align="right">'+ currencyFormat(value.Quantity) + '</td>\
                                        <td align="right">'+ currencyFormat(value.Rate) + '</td>\
                                        <td align="right">'+ currencyFormat(value.Amount) + '</td>\
                                    </tr>\ '
                            );
                            totalQuantity += value.Quantity;
                         //   totalRate += value.Rate;
                            totalAmount += value.Amount;
                        });

                        totalRate = totalAmount / totalQuantity;
                        $('#tbl_receiptstock_res').append(
                            '<tr>\
                                        <td align="right" style="font-weight:bold;">'+ currencyFormat(totalQuantity) + '</td>\
                                        <td align="right" style="font-weight:bold;">'+ currencyFormat(totalRate) + '</td>\
                                        <td align="right" style="font-weight:bold;">'+ currencyFormat(totalAmount) + '</td>\
                                    </tr>\ '
                        );

                    }
                    else {
                        $('#tbl_receiptstock_res').append(
                            '<tr>\
                                        <td colspan="3" align="center">No Record Found</td>\
                                    </tr>\ '
                        );
                    }
                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });

        }

        function deleteAttachment(thisCtrl) {

            var idpk = 0;
            $(thisCtrl).attr('isdeleted', 1);
            $(thisCtrl).parent().hide();
            idpk = parseInt($(thisCtrl).attr('idpk'));

            filesData.push({
                ID: idpk,
                ACTION: 3,
                Name: "",
                TYPE: "",
                PATH: "",
                file_data: ""
            });

        }

        function editStockRecord(ReceiptheaderId, fuelIndexId, type) {
            debugger;
            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }
            filesData = [];
            $('#btnCalculateReceipt').attr('case', '2'); // 1 For save, 2 For update
            $('#files').val('');

            $.ajax({
                type: "GET",
                url: "../MeritOrder/editStockRecord?ReceiptheaderId=" + ReceiptheaderId + "&fuelIndexId=" + fuelIndexId + "&type=" + type,
                dataType: 'json',

                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {
                    debugger;
                    var response = JSON.parse(data[0].components);
                    var attachments = JSON.parse(data[0].Attachment_data);
                    if (response.length > 0) {
                        $('#receiptComponents').html('');
                        $('#downloadReceipt_res').html('');
                        var downloadData = '';
                        if (attachments.length > 0) {
                            for (var i = 0; i < attachments.length; i++) {
                                var attachmentId = attachments[i]['ID'];
                                var attachmentName = attachments[i]['Name'];

                                downloadData += '<a href="#" class="badge badge-secondary">' + attachmentName + ' &nbsp; <span class="fa fa-trash" onclick="deleteAttachment(this)" isdeleted="0" idpk="' + attachmentId + '" ></span></a>';
                            }
                            $('#downloadReceipt_res').append(downloadData);
                        }


                        $.each(response, function (index, value) {

                            var ID = value.ID;
                            var Name = value.Name;
                            var UNIT = value.UNIT;
                            var TYPE = value.TYPE;
                            var Value = value.Value;
                            var Formula = value.Formula;
                            $('#fuelIndex').val(value.RuFuelIndex_Id);

                            if (value.InputType == "Mandatory") {
                                var span = '<span class="required">*</span>';
                            }
                            else {
                                var span = '<span></span>';
                            }

                            if (TYPE == "Input") {
                                var readonly = '';
                                var type = 'text';
                                var clsDecimal = 'decicost';
                            }

                            else if (TYPE == "Text") {
                                var readonly = '';
                                var type = 'text';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Date") {
                                var readonly = '';
                                var type = 'date';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Calculated") {
                                var readonly = 'readonly';
                                var type = 'text';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Configurable") {
                                var readonly = 'readonly';
                                var type = 'text';
                                var clsDecimal = 'decicost';

                            }
                            else if (TYPE == "TextArea") {
                                var readonly = '';
                                var type = 'TextArea';
                                var clsDecimal = '';

                            }



                            if (Formula == "" || Formula == "0") {

                                if (type == "TextArea") {
                                    $('#receiptComponents').append(
                                        '<div class="form-group col-md-12">\
                                                                        <label for= "'+ Name + '"   style="font-size: 12px;"> ' + Name + ' ' + UNIT + '   ' + span + '</label>\
                                                                        <textarea rows="5" class="form-control ' + value.InputType + '" id="' + ID + '" style="height: 100px !important;resize: none;">' + Value + '</textarea>\
                                                                    </div>'
                                    );
                                }
                                else {
                                    $('#receiptComponents').append(
                                        '<div class="form-group col-md-6">\
                                                                        <label for= "'+ Name + '"   style="font-size: 12px;"> ' + Name + ' ' + UNIT + '   ' + span + '</label>\
                                                                        <input type="'+ type + '" class="form-control ' + clsDecimal + ' ' + value.InputType + '" id="' + ID + '" value="' + Value + '" ' + readonly + ' formula="' + Formula + '">\
                                                                    </div>'
                                    );
                                }

                            }
                            else {

                                $('#receiptComponents').append(
                                    '<div class="form-group col-md-6">\
                                                                        <label for= "'+ Name + '"   style="font-size: 12px;"> ' + Name + ' ' + UNIT + '  ' + span + '</label>\
                                                                        <input type="'+ type + '" class="form-control formulainputs ' + clsDecimal + '" id="' + ID + '" value="' + Value + '" ' + readonly + ' formula="' + Formula + '" onchange="return calculateReceipt(this)">\
                                                                    </div>'
                                );
                            }
                        });

                        $('#receiptHeading').text('Update Receipt');
                        $('#addreceiptModal').modal('show');
                        $('#mtReceiptsHeader_Id').val(ReceiptheaderId);

                        $('#btnSaveReceipt').hide();
                        $('#btnUpdateReceipt').show();



                    }

                    $('#btnCalculateReceipt').show();
                    $('#btnUpdateReceipt').hide();
                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });

        }

        function updateReceipt() {
            var valArr = [];
            isRequired = false;
            $('#receiptComponents').children().find('input').each(function () {
                if ($(this).hasClass("Mandatory")) {
                    if ($(this).val() == "") {
                        isRequired = true;
                    }
                }
                valArr.push({
                    ID: $(this).attr('id'),
                    Value: $(this).val()
                });
            });



            if (isRequired == true) {
                swal({
                    title: "Mandatory!",
                    text: "All field required",
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
            }
            else {
                fuelType = $('#fuelType').val();
                vendorId = $('#vendorId').val();
                date = $('#date').val();
                userId = $('#userId').val();
                var fuelIndex = $('#fuelIndexHidden').val();
                var mtReceiptsHeader_Id = $('#mtReceiptsHeader_Id').val();

                var formdata = new FormData();
                formdata.append('fuelType', fuelType);
                formdata.append('valArr', JSON.stringify(valArr));
                formdata.append('vendorId', vendorId);
                formdata.append('date', date);
                formdata.append('fuelIndex', fuelIndex);
                formdata.append('userId', userId);
                formdata.append('mtReceiptsHeader_Id', mtReceiptsHeader_Id);
                formdata.append('filesData', JSON.stringify(filesData));

                $.ajax({
                    type: "POST",
                    url: "../MeritOrder/updateReceipt",
                    data: formdata,
                    contentType: false,
                    processData: false,

                    beforeSend: function () {
                        $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (data) {

                        $.unblockUI();

                        var resArr = data.split('½');
                        if (resArr[0] == "1") {
                            swal({
                                title: "Receipt!",
                                text: "Updated successfully.",
                                type: "success",
                                showCancelButton: false,
                                showConfirmButton: true
                            }, function () {

                                getSavedReceipt();
                                $('#addreceiptModal').modal('hide');

                            }
                            );
                        }
                        else if (resArr[0] == "-1") {
                            swal({
                                title: "Not Allowed!",
                                text: resArr[1],
                                type: "warning",
                                showCancelButton: false,
                                showConfirmButton: true
                            });
                        }


                    },
                    error: function (request, textStatus, errorThrown) {
                        $.unblockUI();
                    }
                });

            }
        }



        function editActualConsumption(ConsumptionheaderId, fuelIndexId, type) {

            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }

            filesData = [];
            $('#btnCalculateConsumption').attr('case', '2');
            $('.clsUpload').val('');

            debugger;

            $.ajax({
                type: "GET",
                url: "../MeritOrder/editStockRecord?ReceiptheaderId=" + ConsumptionheaderId + "&fuelIndexId=" + fuelIndexId + "&type=" + type,
                dataType: 'json',

                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {

                    debugger;
                    var response = JSON.parse(data[0].components);
                    var attachments = JSON.parse(data[0].Attachment_data);
                    if (response.length > 0) {
                        $('#actualConsumptionComponents').html('');
                        $('#downloadConsumption_res').html('');
                        var downloadData = '';
                        if (attachments.length > 0) {
                            for (var i = 0; i < attachments.length; i++) {
                                var attachmentId = attachments[i]['ID'];
                                var attachmentName = attachments[i]['Name'];

                                //downloadData += '<a href="#" class="badge badge-secondary">' + attachmentName + ' &nbsp; <span class="fa fa-trash"></span></a>';
                                downloadData += '<a href="#" class="badge badge-secondary">' + attachmentName + ' &nbsp; <span class="fa fa-trash" onclick="deleteAttachment(this)" isdeleted="0" idpk="' + attachmentId + '" ></span></a>';
                            }
                            $('#downloadConsumption_res').append(downloadData);
                        }

                        $.each(response, function (index, value) {

                            var ID = value.ID;
                            var Name = value.Name;
                            var UNIT = value.UNIT;
                            var TYPE = value.TYPE;
                            var Value = value.Value;
                            var Formula = value.Formula;

                            if (value.InputType =="Mandatory") {
                                var span = '<span class="required">*</span>';
                            }
                            else {
                                var span = '<span></span>';
                            }


                            if (TYPE == "Input") {
                                var readonly = '';
                                var type = 'text';
                                var clsDecimal = 'decicost';
                            }

                            else if (TYPE == "Text") {
                                var readonly = '';
                                var type = 'text';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Date") {
                                var readonly = '';
                                var type = 'date';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Calculated") {
                                var readonly = 'readonly';
                                var type = 'text';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Configurable") {
                                var readonly = 'readonly';
                                var type = 'text';
                                var clsDecimal = 'decicost';

                            }


                            if (Formula == "" || Formula == "0") {

                                if (type == "TextArea") {
                                    $('#actualConsumptionComponents').append(
                                        '<div class="form-group col-md-12">\
                                                                        <label for= "'+ Name + '"   style="font-size: 12px;"> ' + Name + ' ' + UNIT + '   ' + span + '</label>\
                                                                        <textarea rows="5" class="form-control ' + value.InputType + '" id="' + ID + '" style="height: 100px !important;resize: none;">' + Value + '</textarea>\
                                                                    </div>'
                                    );
                                }
                                else {
                                    $('#actualConsumptionComponents').append(
                                        '<div class="form-group col-md-6">\
                                                                        <label for= "'+ Name + '"   style="font-size: 12px;"> ' + Name + ' ' + UNIT + '   ' + span + '</label>\
                                                                        <input type="'+ type + '" class="form-control ' + clsDecimal + ' ' + value.InputType + '" id="' + ID + '" value="' + Value + '" ' + readonly + ' formula="' + Formula + '">\
                                                                    </div>'
                                    );
                                }

                            }
                            else {
                                $('#actualConsumptionComponents').append(
                                    '<div class="form-group col-md-6" >\
                                                                        <label for= "'+ Name + '"  style="font-size:12px" > ' + Name + ' ' + UNIT + '  <span class="required">*</span></label>\
                                                                        <input type="'+ type + '" class="form-control formulainputs ' + clsDecimal + '" id="' + ID + '" value="' + Value + '" ' + readonly + ' formula="' + Formula + '" onchange="return calculateReceipt(this)">\
                                                                    </div>'
                                );
                            }


                        });

                    }

                    $('#addconsumptionModal').modal('show');
                    $('#mtConsumptionHeader_Id').val(ConsumptionheaderId);

                    $('#btnSaveActualConsumption').hide();
                    $('#btnUpdateActualConsumption').show();
                    $('#btnCalculateConsumption').hide();

                    $('#actualConsumptionComponents').find('.formulainputs').each(function () {

                        $('#btnCalculateConsumption').show();
                        $('#btnUpdateActualConsumption').hide();

                    });

                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });

        }
        ///////////////////////
        function editActualConsumptionForUpdate(vendorId, fuelIndexId, date) {
            debugger;
            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }

            filesData = [];
            $('#btnCalculateConsumption').attr('case', '2');
            $('.clsUpload').val('');

            debugger;

            $.ajax({
                type: "GET",
                url: "../MeritOrder/editActualStockRecord?vendorId=" + vendorId + "&fuelIndexId=" + fuelIndexId + "&date=" + date,
                dataType: 'json',

                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {

                    debugger;
                    if (data.length === 0) {
                        $.unblockUI();
                        console.log("no data found.")
                        swal({
                            title: "No data found!",
                            text: "No data found",
                            type: "warning",
                            showCancelButton: false,
                            showConfirmButton: true
                        });
                        return;
                    }
                    // var response = JSON.parse(data[0].components);
                    //var attachments = JSON.parse(data[0].Attachment_data);
                    if (data.length > 0) {
                        //$('#actualConsumptionComponents').html('');
                        $('#tbl_actualfuelConsumption_res').html('');
                        //$('#downloadConsumption_res').html('');
                        var downloadData = '';
                        //if (attachments.length > 0) {
                        //    for (var i = 0; i < attachments.length; i++) {
                        //        var attachmentId = attachments[i]['ID'];
                        //        var attachmentName = attachments[i]['Name'];

                        //        //downloadData += '<a href="#" class="badge badge-secondary">' + attachmentName + ' &nbsp; <span class="fa fa-trash"></span></a>';
                        //        downloadData += '<a href="#" class="badge badge-secondary">' + attachmentName + ' &nbsp; <span class="fa fa-trash" onclick="deleteAttachment(this)" isdeleted="0" idpk="' + attachmentId + '" ></span></a>';
                        //    }
                        //    $('#downloadConsumption_res').append(downloadData);
                        //}

                        $.each(data, function (index, value) {

                            var reference = value.ShipmentID;
                            var shipmentNo = value.Shipment_Number;
                            var Quntity = value.ActualConsumption;

                            var rate = value.ShipmentRate;
                            var cv = value.Actual_CV;
                            //var consumed = value.ShipmentQuantity;
                            var consumed = value.ShipmentQuantity ? value.ShipmentQuantity : '';
                            var remaining = value.ActualConsumption - value.ShipmentQuantity;
                            var fullLoadConsumption = value.FullLoadConsumption;
                            $('#mtConsumptionHeader_Id').val(value.mtConsumptionHeader_Id);




                            $('#tbl_actualfuelConsumption_res').append(
                                '<tr>\
                                <td class="text-center readonly" >'+ reference + '</td> <td class="text-center readonly" >' + shipmentNo + '</td><td class="text-center readonly" >' + Quntity + '</td><td class = "text-center readonly">' + rate + '</td><td class = "text-center readonly">' + cv + '</td>'
                                + '<td class="text-center "  rid=' + value.ShipmentID + '><input type="text" oninput="validateNumericInput(this)" class="consumedMTAct text-center " style="border: none !important;" value="' + consumed + '"></td>' +
                                '<td class="text-center readonly result-td"> ' + remaining + '</td>\
                                </tr > '
                            );



                        });

                    }

                    $('#addconsumptionModal').modal('show');
                    // $('#mtConsumptionHeader_Id').val(ConsumptionheaderId);

                    $('#btnSaveActualConsumption').hide();
                    $('#btnUpdateActualConsumption').show();
                    $('#btnCalculateConsumption').hide();

                    $('#actualConsumptionComponents').find('.formulainputs').each(function () {

                        $('#btnCalculateConsumption').show();
                        $('#btnUpdateActualConsumption').hide();

                    });

                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });

        }



        ///////////////////////
        var fuel, vendorId;
        function editEstConsumption(vendorId, fuel, date) {
            debugger;
           // date_est = $('#estimateddate').val();
            fuel = $('#fuelIndexHidden').val();
            vendorId = $('#vendorId').val();

            debugger;
            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }

            filesData = [];
            $('#btnCalculateConsumption').attr('case', '2');
            $('.clsUpload').val('');



            $.ajax({
                type: "GET",
                url: "../MeritOrder/editEstRecord?vendorId=" + vendorId + "&FuelIndex=" + fuel + "&date=" + date,

                dataType: 'json',

                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {
                    $('#tbl_estfuelConsumption_res').empty();
                    debugger;
                   // var response = JSON.parse(data[0].components);
                   // var response = $.parseJSON(data);
                    var attachments = JSON.parse(data[0].attachment_data);
                    if (data.length > 0) {
                        $('#estConsumptionComponents').html('');
                        $('#downloadConsumption_estres').html('');
                        var downloadData = '';
                        if (attachments.length > 0) {
                            for (var i = 0; i < attachments.length; i++) {
                                var attachmentId = attachments[i]['ID'];
                                var attachmentName = attachments[i]['Name'];

                                //downloadData += '<a href="#" class="badge badge-secondary">' + attachmentName + ' &nbsp; <span class="fa fa-trash"></span></a>';
                                downloadData += '<a href="#" class="badge badge-secondary">' + attachmentName + ' &nbsp; <span class="fa fa-trash" onclick="deleteAttachment(this)" isdeleted="0" idpk="' + attachmentId + '" ></span></a>';
                            }
                            $('#downloadConsumption_estres').append(downloadData);
                        }

                        $.each(data, function (index, value) {
                            console.log(value);

                            debugger;
                            //var rowData = data[value];
                            var CompRow = $('<tr class="files"></tr>');
                            var shipmentID = value.ShipmentID; // Store ShipmentID in a variable
                            _shipmentIDs.push(shipmentID);



                            $('#fullloadConsumption').val(value.FullLoadConsumption);


                            //var result = $(CompRow).closest('tr').data('result');

                            CompRow.append('<td class="text-center readonly">' + value.ShipmentID + '</td>');
                            CompRow.append('<td class="text-center readonly">' + value.Shipment_Number + '</td>');
                            CompRow.append('<td class="text-center readonly">' + value.EstimatedConsumption + '</td>');
                            CompRow.append('<td class="text-center readonly">' + value.ShipmentRate + '</td>');
                            CompRow.append('<td class="text-center readonly">' + value.Actual_CV + '</td>');
                            //CompRow.append('<td class="text-center" rid=' + value.ShipmentID + '><input type="text" class="consumedMT text-center"  style="border: none !important;" value="' + value.ShipmentQuantity + '"></td>');
                            CompRow.append('<td class="text-center" rid="' + value.ShipmentID + '"><input type="text" oninput="validateNumericInput(this)" class="consumedMT text-center" style="border: none !important;" value="' + (value.ShipmentQuantity ? value.ShipmentQuantity : '') + '"></td>');




                            //CompRow.append('<td class="text-center readonly result-td"></td>');
                            CompRow.append('<td class="text-center readonly result-td">' + value.EstimatedConsumption + '</td>');

                            $('#tbl_estfuelConsumption_res').append(CompRow);


                        });

                    }

                    $('#addestimatedModal').modal('show');
                    $('#mtConsumptionHeader_Id').val(data[0].mtConsumptionHeader_Id);

                    $('#btnSaveEstConsumption').hide();
                    $('#btnUpdateEstConsumption').show();
                    $('#btnCalculateConsumption').hide();

                    $('#estConsumptionComponents').find('.formulainputs').each(function () { //estConsumptionComponents

                        $('#btnCalculateConsumption').show();
                        $('#btnUpdateEstConsumption').hide();

                    });

                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });

        }

        function updateEstConsumption() {
            debugger;
            //filesData = [];
            var valArr = [];
            isRequired = false;

            var minLength = Math.min(_shipmentIDs.length, _ConsumedQuan.length);
            for (var i = 0; i < minLength; i++) {
                //var shipmentID = _shipmentIDs[i];
                //var consumedQ = _ConsumedQuan[i];
                //// For example, push ShipmentID values into valArr
                //valArr.push({
                //    ID: shipmentID,
                //    //Value: '"' + consumedQ + '"'
                //    Value: consumedQ.toString()
                //});


                var shipmentID = _ConsumedQuan[i].Id;//_shipmentIDs[i];
                var consumedQ = _ConsumedQuan[i].ConsumedQuantity;

                valArr.push({
                    ID: shipmentID,
                    Value: consumedQ
                });
            }
            //$('#actualConsumptionComponents').children().find('input').each(function () {
            //    if ($(this).hasClass("Mandatory")) {
            //        if ($(this).val() == "") {
            //            isRequired = true;
            //        }
            //    }
            //    valArr.push({
            //        ID: $(this).attr('id'),
            //        Value: $(this).val()
            //    });
            //});

            if (isRequired == true) {
                swal({
                    title: "Mandatory!",
                    text: "All field required",
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
            }
            else {
                fuelType = $('#fuelType').val();
                vendorId = $('#vendorId').val();
                //date = $('#dateHidden').val();
                userId = $('#userId').val();
                var fuelIndex = $('#fuelIndexHidden').val();
                var mtConsumptionHeader_Id = $('#mtConsumptionHeader_Id').val();

                var formdata = new FormData();
                formdata.append('fuelType', fuelType);
                formdata.append('valArr', JSON.stringify(valArr));
                formdata.append('vendorId', vendorId);
                formdata.append('date', date);
                formdata.append('fuelIndex', fuelIndex);
                formdata.append('userId', userId);
                formdata.append('mtConsumptionHeader_Id', mtConsumptionHeader_Id);
                formdata.append('filesData', JSON.stringify(filesData));
                formdata.append('data_tab', $('#btnSaveEstConsumption').attr('datatab'));


                $.ajax({
                    type: "POST",
                    url: "../MeritOrder/updateEstConsumption",
                    data: formdata,
                    contentType: false,
                    processData: false,

                    beforeSend: function () {
                        $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (data) {


                        $.unblockUI();
                        var resArr = data.split('½');
                        if (resArr[0] == "1") {
                            swal({
                                title: "Consumption!",
                                text: "Updated successfully.",
                                type: "success",
                                showCancelButton: false,
                                showConfirmButton: true
                            }, function () {

                                if ($('#fuelType').val().toUpperCase() == "RLNG" || $('#fuelType').val().toUpperCase() == "GAS") {
                                    getSavedEstConsumption_ForRlngAndGas($('#btnSaveEstConsumption').attr('datatab'));
                                }
                                else {
                                    getSavedEstConsumption();
                                }

                                $('#addestimatedModal').modal('hide');

                            }
                            );
                        }
                        else if (resArr[0] == "-1") {
                            swal({
                                title: "Not Allowed!",
                                text: resArr[1],
                                type: "warning",
                                showCancelButton: false,
                                showConfirmButton: true
                            });
                        }


                    },
                    error: function (request, textStatus, errorThrown) {
                        $.unblockUI();
                    }
                });

            }
        }

        function submitEstConsumption() {
            debugger;
            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }


            swal({
                title: "Are you sure?",
                text: "You are going to submit Consumption!",
                type: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn btn-danger",
                confirmButtonText: "Yes, submit it",
                cancelButtonText: "No, cancel"
            }, function () {

                fuelType = $('#fuelType').val();
                vendorId = $('#vendorId').val();
                date = $('#estimateddate').val();
                userId = $('#userId').val();

                var formdata = new FormData();
                formdata.append('fuelType', fuelType);
                formdata.append('vendorId', vendorId);
                formdata.append('date', date);
                formdata.append('userId', userId);
                formdata.append('type', '2');


                $.ajax({
                    type: "POST",
                    url: "../MeritOrder/submitEstConsumption",
                    data: formdata,
                    async: false,
                    contentType: false,
                    processData: false,
                    dataType: 'json',
                    beforeSend: function () {
                        $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (data) {
                        debugger;
                        var resArr = data.split('½');
                        if (resArr[0] == "1") {
                            setTimeout(function () {
                                swal({
                                    title: "Submitted!",
                                    text: "Consumption Submitted Successfully",
                                    type: "success",
                                    showCancelButton: false,
                                    showConfirmButton: true
                                }, function () {
                                    getSavedEstConsumption();

                                    getClosingStockWidget();
                                    //ActualConsumptionValidation();
                                }
                                );
                            }, 500);

                        }
                        else {
                            swal({
                                title: "Error!",
                                text: resArr[1],
                                type: "error",
                                showCancelButton: false,
                                showConfirmButton: true
                            });
                        }


                    },
                    error: function (request, textStatus, errorThrown) {
                        $.unblockUI();
                    }
                });
            });
        }

        function submitEstConsumption_ForRlngGas(type) {

            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }

            swal({
                title: "Are you sure?",
                text: "You are going to submit Consumption!",
                type: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn btn-danger",
                confirmButtonText: "Yes, submit it",
                cancelButtonText: "No, cancel"
            }, function () {

                fuelType = $('#fuelType').val();
                vendorId = $('#vendorId').val();
                date = $('#dateHidden').val();
                userId = $('#userId').val();

                var formdata = new FormData();
                formdata.append('fuelType', fuelType);
                formdata.append('vendorId', vendorId);
                formdata.append('date', date);
                formdata.append('userId', userId);
                formdata.append('type', type);


                $.ajax({
                    type: "POST",
                    url: "../MeritOrder/submitEstConsumption",
                    data: formdata,
                    async: false,
                    contentType: false,
                    processData: false,
                    dataType: 'json',
                    beforeSend: function () {
                        $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (data) {




                        var resArr = data.split('½');
                        if (resArr[0] == "1") {
                            setTimeout(function () {
                                swal({
                                    title: "Submitted!",
                                    text: "Consumption Submitted Successfully",
                                    type: "success",
                                    showCancelButton: false,
                                    showConfirmButton: true
                                }, function () {
                                    if ($('#fuelType').val().toUpperCase() == "RLNG" || $('#fuelType').val().toUpperCase() == "GAS") {

                                        getSavedEstConsumption_ForRlngAndGas($('#btnSaveEstConsumption').attr('datatab'));
                                    }
                                    else {
                                        getSavedEstConsumption();
                                    }
                                }
                                );
                            }, 500);

                        }
                        else {
                            swal({
                                title: "Error!",
                                text: resArr[1],
                                type: "error",
                                showCancelButton: false,
                                showConfirmButton: true
                            });
                        }



                    },
                    error: function (request, textStatus, errorThrown) {
                        $.unblockUI();
                    }
                });
            });
        }



        function ActualConsumptionValidation() {
            debugger;
            var result = "";
            fuelType = $('#fuelType').val();
            vendorId = $('#vendorId').val();
            date = $('#date').val();
            var type = $('#btnSaveActualConsumption').attr('datatab');


            $.ajax({
                type: "GET",
                url: "../MeritOrder/ActualConsumptionValidation?vendorId=" + vendorId + "&fuelType=" + fuelType + "&date=" + date + "&type=" + type,
                //dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {
                    debugger;
                    var resArr = data.split('½');
                    if (resArr[0] == "-1") {
                        swal({
                            title: "Not Allowed!",
                            text: resArr[1],
                            type: "warning",
                            showCancelButton: false,
                            showConfirmButton: true
                        });
                         result ="-1";

                    }
                    else if (resArr[0] == "1") {
                        // Success
                        //addActualConsumption();
                        //return "1";
                         result ="1";
                    }



                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });

            return result;
        }

        function EstConsumptionValidation() {
            debugger;
            var result = "";
            fuelType = $('#fuelType').val();
            vendorId = $('#vendorId').val();
            date = $('#date').val();
            var type = $('#btnSaveEstConsumption').attr('datatab');


            $.ajax({
                type: "GET",
                url: "../MeritOrder/ActualConsumptionValidation?vendorId=" + vendorId + "&fuelType=" + fuelType + "&date=" + date + "&type=" + type,
                //dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {
                    debugger;
                    var resArr = data.split('½');
                    if (resArr[0] == "-1") {
                        swal({
                            title: "Not Allowed!",
                            text: resArr[1],
                            type: "warning",
                            showCancelButton: false,
                            showConfirmButton: true
                        });
                        result = "-1";

                    }
                    else if (resArr[0] == "1") {
                        // Success
                        //addActualConsumption();
                        //return "1";
                        result = "1";
                    }



                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });

            return result;
        }
        function addActualConsumption() {
            //
            debugger;
            var valArr = [];
            isRequired = false;


            if ($('#fuelIndexHidden').val() != 100) {
                $('#actualConsumptionComponents').children().find('input').each(function () {

                    if ($(this).hasClass("Mandatory")) {
                        if ($(this).val() == "") {
                            isRequired = true;
                        }
                    }

                    valArr.push({
                        ID: $(this).attr('id'),
                        Value: $(this).val()
                    });
                });
            }

            else {
                var minLength = Math.min(_shipmentIDs.length, _ConsumedQuan.length);
                for (var i = 0; i < minLength; i++) {
                    var shipmentID = _ConsumedQuan[i].Id;//_shipmentIDs[i];
                    var consumedQ = _ConsumedQuan[i].ConsumedQuantity;
                    if (!isNaN(consumedQ)) {
                        valArr.push({
                            ID: shipmentID,
                            Value: consumedQ
                        });
                    }
                }
            }

            fuelType = $('#fuelType').val();
            vendorId = $('#vendorId').val();
            date = $('#dateHidden').val();
            userId = $('#userId').val();
            var fuelIndex = $('#fuelIndexHidden').val();

            var data_tab = $('#btnSaveActualConsumption').attr('datatab');
            // 1--> actual, 2 -- > estimated

            if (fuelType == '-1') {
                swal({
                    title: "Mandatory!",
                    text: "Select Fuel Type",
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
            }
            else if (isRequired == true) {
                swal({
                    title: "Mandatory!",
                    text: "All field required",
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
            }
            else {

                var formdata = new FormData();
                formdata.append('fuelType', fuelType);
                formdata.append('valArr', JSON.stringify(valArr));
                formdata.append('vendorId', vendorId);
                formdata.append('date', date);
                formdata.append('fuelIndex', fuelIndex);
                formdata.append('userId', userId);
                formdata.append('data_tab', data_tab);
                formdata.append('filesData', JSON.stringify(filesData));


                $.ajax({
                    type: "POST",
                    url: "../MeritOrder/addActualConsumption",
                    data: formdata,
                    contentType: false,
                    processData: false,
                    async: false,
                    beforeSend: function () {
                        $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (data) {


                        $.unblockUI();
                        var resArr = data.split('½');
                        if (resArr[0] == "1") {
                            swal({
                                title: "Consumption!",
                                text: "Inserted successfully.",
                                type: "success",
                                showCancelButton: false,
                                showConfirmButton: true
                            }, function () {

                                if ($('#fuelType').val().toUpperCase() == "RLNG" || $('#fuelType').val().toUpperCase() == "GAS") {

                                    getSavedActualConsumption_ForRlngAndGas($('#btnSaveActualConsumption').attr('datatab'));
                                }
                                else {
                                    getSavedActualConsumption();
                                }

                                $('#addconsumptionModal').modal('hide');

                            }
                            );
                        }
                        else if (resArr[0] == "-1") {
                            swal({
                                title: "Not Allowed!",
                                text: resArr[1],
                                type: "warning",
                                showCancelButton: false,
                                showConfirmButton: true
                            });
                        }

                    },
                    error: function (request, textStatus, errorThrown) {
                        $.unblockUI();
                    }
                });

            }
        }

        function getSavedActualConsumption_ForRlngAndGas(type) {
            //
            fuelType = $('#fuelType').val();
            fuelIndex = $('#fuelIndexHidden').val();
            vendorId = $('#vendorId').val();
            date = $('#dateHidden').val();

            $.ajax({
                type: "GET",
                url: "../MeritOrder/getSavedActualConsumption_ForRlngAndGas?vendorId=" + vendorId + "&fuelType=" + fuelType + "&fuelIndex=" + fuelIndex + "&date=" + date + "&type=" + type,
                dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {

                    debugger;
                    var resArr = data.split('½');
                    var headerId_Res = resArr[0];
                    var FuelIndexId_Res = resArr[1];
                    var components_Res = resArr[2];
                    var Date_time = resArr[3];
                    var Is_Submitted = resArr[4];
                    var attachment_data = resArr[5];
                    if (Date_time) {
                        Date_time = moment(Date_time).format("DD-MMM-YYYY");
                    }

                    if ($('#fuelIndexHidden').val() != 100) {
                        var editFunction = 'editActualConsumption';
                    } else {
                        var editFunction = 'editActualConsumptionForUpdate';
                    }

                    if ($('#btnCalculateConsumption').attr('datatype') == "NormalConsumption_ForRlngAndGas") {
                        var tempType = 2;
                    }
                    else if ($('#btnCalculateConsumption').attr('datatype') == "EstimatedConsumption_ForRlngAndGas") {
                        var tempType = 3;

                    }

                    if (headerId_Res == '') {
                        //When header Id is empty, it means no consumption is there, So show the Add Consumption button
                        $('#btnSubmitEstimatedConsummtion_ForRlngAndGas').attr('disabled', true);
                        $('#btnSubmitActualConsumption_ForRlngAndGas').attr('disabled', true);
                        $('#addEstimatedConsumptionForRlngAndGas_ModalBtn').attr('disabled', false);
                        $('#addActualConsumptionForRlngAndGas_ModalBtn').attr('disabled', false);

                    }
                    else {
                        $('#btnSubmitEstimatedConsummtion_ForRlngAndGas').attr('disabled', false);
                        $('#btnSubmitActualConsumption_ForRlngAndGas').attr('disabled', false);
                        $('#addEstimatedConsumptionForRlngAndGas_ModalBtn').attr('disabled', true);
                        $('#addActualConsumptionForRlngAndGas_ModalBtn').attr('disabled', true);
                    }

                    if (Is_Submitted == "1" && headerId_Res != "") {
                        //Hide submit button
                        $('#btnSubmitActualConsumption_ForRlngAndGas').attr('disabled', true);
                        $('#btnSubmitEstimatedConsummtion_ForRlngAndGas').attr('disabled', true);
                    }
                    else if (Is_Submitted == "0" && headerId_Res != "") {
                        //Show submit button
                        $('#btnSubmitActualConsumption_ForRlngAndGas').attr('disabled', false);
                        $('#btnSubmitEstimatedConsummtion_ForRlngAndGas').attr('disabled', false);
                    }
                    else if (Is_Submitted == "0" && headerId_Res == "") {
                        //Show submit button
                        $('#btnSubmitActualConsumption_ForRlngAndGas').attr('disabled', true);
                        $('#btnSubmitEstimatedConsummtion_ForRlngAndGas').attr('disabled', true);
                    }

                    var downloadData = "";
                    if (attachment_data != "") {
                        var attachments = JSON.parse(attachment_data);
                        if (attachments.length > 0) {
                            for (var i = 0; i < attachments.length; i++) {
                                var attachmentId = attachments[i]['ID'];
                                var attachmentName = attachments[i]['Name'];

                                downloadData += '<a onclick="return downloadAttachment(' + attachmentId + ')">' + attachmentName + '  &nbsp;<span class="fa fa-download"></span></a>';
                            }
                        }
                    }

                    var td_length = JSON.parse(resArr[2]).length;
                    debugger;
                    $('.ajaxRes_actualconsumption_ForRlngGas_Header').html('');
                    $('.ajaxRes_actualconsumption_ForRlngGas').html('');
                    if (JSON.parse(resArr[2]).length > 0) {

                        $('.ajaxRes_actualconsumption_ForRlngGas_Header').append('<th scope="col" class="text-center darkblueBg">Date</th>');
                        $.each(JSON.parse(resArr[2]), function (index, value) {

                            $('.ajaxRes_actualconsumption_ForRlngGas_Header').append('<th scope="col" class="text-center darkblueBg">' + value.Name + ' ' + value.UNIT + '</th>');

                            //const momentTimestamp = moment(value.Date);
                            //var date = momentTimestamp.format("DD MMM YYYY");
                        });
                        $('.ajaxRes_actualconsumption_ForRlngGas_Header').append('<th scope="col" class="text-center darkblueBg">Attachments</th>');
                        $('.ajaxRes_actualconsumption_ForRlngGas_Header').append('<th scope="col" class="text-center darkblueBg">Action</th>');

                        var tempArr = JSON.parse(resArr[2]);
                        if (Is_Submitted == '1') {
                            var tr = '<tr style="background: #e1e1e1;">' + '<td  align="center">' + Date_time + '</td>';
                        }
                        else {
                            var tr = '<tr>' + '<td  align="center">' + Date_time + '</td>';
                        }

                        //For loop for adding data .i.e td with data to our dynamic generated table
                        for (var i = 0; i < tempArr.length; i++) {
                            tr += '<td  align="right">' + tempArr[i].Value + '</td>';
                        }

                        if (headerId_Res != '') {
                            tr += '<td align="center">\
                                 <div class="dropdown">\
                                   <button onclick = "myFunction(this)" class= "dropbtn" > View</button >\
                                   <div id="myDropdown" class="dropdown-content">\
                                      '+ downloadData + '\
                                   </div>\
                                 </div >\
                               </td>';
                        }

                        if (headerId_Res == '' && Is_Submitted == '0') {
                            //There is No consumption there and Not Submitted
                            tr += '<td> </td>';
                        }
                        else if (headerId_Res != '' && Is_Submitted == '0') {
                            //There is a consumption there but it is not submitted yet
                            tr += '<td align="center"> <i class="fa fa-edit" onclick=" return ' + editFunction + '(' + headerId_Res + ', ' + $('#fuelIndexHidden').val() + ', ' + tempType+ ')"></i> | \
                                                        <i class="fa fa-trash" onclick=" return deleteActualConsumption('+ headerId_Res + ')"></i>\
                                                    </td>';
                        }
                        else if (headerId_Res != '' && Is_Submitted == '1') {
                            tr += '<td align="center"> <i class="fa fa-edit icondisabled"></i> | \
                                            <i class="fa fa-trash icondisabled" ></i>\
                                       </td>';
                        }

                        tr += '</tr>';
                        $('.ajaxRes_actualconsumption_ForRlngGas').append(tr);


                      }
                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });
        }

        function getSavedActualConsumption() {
            //
            fuelType = $('#fuelType').val();
            vendorId = $('#vendorId').val();
            date = $('#date').val();
            var date2 = "'" + date + "'"

            $.ajax({
                type: "GET",
                url: "../MeritOrder/getSavedActualConsumption?vendorId=" + vendorId + "&fuelType=" + fuelType + "&date=" + date + "&type=1",
                dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {

                    $('#ajaxRes_actualconsumption').html('');
                    if (data.length > 0) {

                        var counter = 1;
                        $.each(data, function (index, value) {

                            //const momentTimestamp = moment(value.Date);
                            //var date = momentTimestamp.format("DD MMM YYYY");

                            const momentTimestamp = moment(value.Date);
                            var date = momentTimestamp.format("DD-MMM-YYYY");

                            if (value.Is_Submitted == true) {
                                $('#btnSubmitActualConsumption').attr('disabled', true);
                            }
                            else {
                                $('#btnSubmitActualConsumption').attr('disabled', false);
                            }
                            if (value.mtConsumptionHeader_Id != '') {
                                //$('#addActualConsumptionModalBtn').hide();
                                $('#addActualConsumptionModalBtn').attr('disabled', true);
                            }
                            else {
                                //$('#addActualConsumptionModalBtn').show();
                                $('#addActualConsumptionModalBtn').attr('disabled', false);
                            }

                            var downloadData = "";
                            if (value.attachment_data != "") {
                                var attachments = JSON.parse(value.attachment_data);
                                if (attachments.length > 0) {
                                    for (var i = 0; i < attachments.length; i++) {
                                        var attachmentId = attachments[i]['ID'];
                                        var attachmentName = attachments[i]['Name'];

                                        downloadData += '<a onclick="return downloadAttachment(' + attachmentId + ')">' + attachmentName + '  &nbsp;<span class="fa fa-download"></span></a>';
                                    }
                                }
                            }

                            if (value.Is_Submitted == "1") {
                                if (counter == 1) {
                                    $('#ajaxRes_actualconsumption').append(
                                        '<tr style="background:#e1e1e1;">\
                                           <td align="center" rowspan="'+ data.length + '" style="vertical-align: middle;">' + date + '</td>\
                                           <td align="right">'+ currencyFormat(value.Quantity) + '</td>\
                                           <td align="right">'+ currencyFormat(value.Rate) + '</td>\
                                           <td align="right">'+ currencyFormat(value.Amount) + '</td>\
                                           <td align="center" rowspan="'+ data.length + '" style="vertical-align: middle;">' + currencyFormat(value.ActualWar) + '</td>\
                                           <td align="center" rowspan="'+ data.length + '" style="vertical-align: middle;">\
                                           <div class="dropdown">\
                                           <button onclick = "myFunction(this)" class= "dropbtn" > View</button >\
                                               <div id="myDropdown" class="dropdown-content">\
                                                '+ downloadData + '\
                                               </div>\
                                               </div >\
                                           </td>\
                                           <td align="center" rowspan="'+ data.length + '" style="vertical-align: middle;">\
                                                                            <i class="fa fa-edit icondisabled" ></i> | \
                                                                            <i class="fa fa-trash icondisabled"></i>\
                                           </td >\
                                         </tr>\ '
                                    );
                                }
                                else {
                                    $('#ajaxRes_actualconsumption').append(
                                        '<tr  style="background:#e1e1e1;">\
                                            <td align="right">'+ currencyFormat(value.Quantity) + '</td>\
                                            <td align="right">'+ currencyFormat(value.Rate) + '</td>\
                                            <td align="right">'+ currencyFormat(value.Amount) + '</td>\
                                        </tr>\ '
                                    );
                                }
                            }
                            else {
                                //if ($('#fuelIndexHidden').val() != 100) {
                                //    var editFunction = 'editActualConsumption';
                                //} else {
                                //    var editFunction = 'editActualConsumptionForUpdate';
                                //}
                                if (counter == 1 && $('#fuelIndexHidden').val() == 100) {
                                    $('#ajaxRes_actualconsumption').append(
                                        '<tr>\
                                          <td align="center" rowspan="'+ data.length + '" style="vertical-align: middle;">' + date + '</td>\
                                          <td align="right">'+ currencyFormat(value.Quantity) + '</td>\
                                          <td align="right">'+ currencyFormat(value.Rate) + '</td>\
                                          <td align="right">'+ currencyFormat(value.Amount) + '</td>\
                                          <td align="center" rowspan="'+ data.length + '" style="vertical-align: middle;">' + currencyFormat(value.ActualWar) + '</td>\
                                          <td align="center" rowspan="'+ data.length + '" style="vertical-align: middle;">\
                                              <div class="dropdown">\
                                              <button onclick = "myFunction(this)" class= "dropbtn" > View</button >\
                                                 <div id="myDropdown" class="dropdown-content">\
                                                    '+ downloadData + '\
                                                 </div>\
                                              </div >\
                                          </td>\
                                          <td align="center" rowspan="'+ data.length + '" style="vertical-align: middle;">\
                                                                            <i class="fa fa-edit" onclick=" return editActualConsumptionForUpdate(' + vendorId + ', ' + $('#fuelIndexHidden').val() + ',' + date2 + ')"></i> | \
                                                                            <i class="fa fa-trash" onclick=" return deleteActualConsumption('+ value.mtConsumptionHeader_Id + ')"></i>\
                                                                    </td >\
                                                                    </tr>\ '
                                    );
                                }

                                else if (counter == 1 && $('#fuelIndexHidden').val() != 100) {
                                    $('#ajaxRes_actualconsumption').append(
                                        '<tr>\
                              <td align="center" rowspan="'+ data.length + '" style="vertical-align: middle;">' + date + '</td>\
                              <td align="right">'+ currencyFormat(value.Quantity) + '</td>\
                              <td align="right">'+ currencyFormat(value.Rate) + '</td>\
                              <td align="right">'+ currencyFormat(value.Amount) + '</td>\
                              <td align="center" rowspan="'+ data.length + '" style="vertical-align: middle;">' + currencyFormat(value.ActualWar) + '</td>\
                              <td align="center" rowspan="'+ data.length + '" style="vertical-align: middle;">\
                                  <div class="dropdown">\
                                  <button onclick = "myFunction(this)" class= "dropbtn" > View</button >\
                                     <div id="myDropdown" class="dropdown-content">\
                                        '+ downloadData + '\
                                     </div>\
                                  </div >\
                              </td>\
                              <td align="center" rowspan="'+ data.length + '" style="vertical-align: middle;">\
                                <i class="fa fa-edit" onclick=" return editActualConsumption('+ value.mtConsumptionHeader_Id + ', ' + $('#fuelIndexHidden').val() + ', 2)"></i> | \
                                <i class="fa fa-trash" onclick=" return deleteActualConsumption('+ value.mtConsumptionHeader_Id + ')"></i>\
                              </td >\
                            </tr>\ '
                                    );

                                }
                                else {
                                    $('#ajaxRes_actualconsumption').append(
                                        '<tr>\
                                            <td align="right">'+ currencyFormat(value.Quantity) + '</td>\
                                            <td align="right">'+ currencyFormat(value.Rate) + '</td>\
                                            <td align="right">'+ currencyFormat(value.Amount) + '</td>\
                                        </tr>\ '
                                    );
                                }
                            }

                            counter++;
                        });
                    }
                    else {
                        $('#btnSubmitActualConsumption').attr('disabled', true);
                        $('#addActualConsumptionModalBtn').attr('disabled', false);
                        $('#ajaxRes_actualconsumption').append(
                            '<tr style="background:#e1e1e1;"><td align="center" colspan="7">No Record Found</td></tr>\ '
                        );
                    }
                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });
        }

        var _headerIdValue;
        function updateActualConsumption() {

            //filesData = [];
            var valArr = [];
            isRequired = false;

            if ($("#fuelIndexHidden").val() != '100') {
                $('#actualConsumptionComponents').children().find('input').each(function () {
                    debugger;

                    if ($(this).hasClass("Mandatory")) {
                        if ($(this).val() == "") {
                            isRequired = true;
                        }
                    }
                    valArr.push({
                        ID: $(this).attr('id'),
                        Value: $(this).val()
                    });
                });
            }
            else {

                $('#tdActualFuelConsumption').children().find('input').each(function () {
                    debugger;
                    if ($(this).hasClass("Mandatory")) {
                        if ($(this).val() == "") {
                            isRequired = true;
                        }
                    }
                    var referenceValue = $(this).closest('td').attr('rid');

                    valArr.push({
                        ID: referenceValue,
                        Value: $(this).val()
                    });

                });
            }

            //$('#actualConsumptionComponents').children().find('input').each(function () {
            //    if ($(this).hasClass("Mandatory")) {
            //        if ($(this).val() == "") {
            //            isRequired = true;
            //        }
            //    }
            //    valArr.push({
            //        ID: $(this).attr('id'),
            //        Value: $(this).val()
            //    });
            //});

            if (isRequired == true) {
                swal({
                    title: "Mandatory!",
                    text: "All field required",
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
            }
            else {
                fuelType = $('#fuelType').val();
                vendorId = $('#vendorId').val();
                date = $('#dateHidden').val();
                userId = $('#userId').val();
                var fuelIndex = $('#fuelIndexHidden').val();
                var mtConsumptionHeader_Id = $('#mtConsumptionHeader_Id').val();

                var formdata = new FormData();
                formdata.append('fuelType', fuelType);
                formdata.append('valArr', JSON.stringify(valArr));
                formdata.append('vendorId', vendorId);
                formdata.append('date', date);
                formdata.append('fuelIndex', fuelIndex);
                formdata.append('userId', userId);
                formdata.append('mtConsumptionHeader_Id', mtConsumptionHeader_Id);
                formdata.append('filesData', JSON.stringify(filesData));
                formdata.append('data_tab', $('#btnSaveActualConsumption').attr('datatab'));


                $.ajax({
                    type: "POST",
                    url: "../MeritOrder/updateActualConsumption",
                    data: formdata,
                    contentType: false,
                    processData: false,

                    beforeSend: function () {
                        $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (data) {


                        $.unblockUI();
                        var resArr = data.split('½');
                        if (resArr[0] == "1") {
                            swal({
                                title: "Consumption!",
                                text: "Updated successfully.",
                                type: "success",
                                showCancelButton: false,
                                showConfirmButton: true
                            }, function () {

                                if ($('#fuelType').val().toUpperCase() == "RLNG" || $('#fuelType').val().toUpperCase() == "GAS") {
                                    getSavedActualConsumption_ForRlngAndGas($('#btnSaveActualConsumption').attr('datatab'));
                                }
                                else {
                                    getSavedActualConsumption();
                                }

                                $('#addconsumptionModal').modal('hide');

                            }
                            );
                        }
                        else if (resArr[0] == "-1") {
                            swal({
                                title: "Not Allowed!",
                                text: resArr[1],
                                type: "warning",
                                showCancelButton: false,
                                showConfirmButton: true
                            });
                        }


                    },
                    error: function (request, textStatus, errorThrown) {
                        $.unblockUI();
                    }
                });

            }
        }

        function deleteActualConsumption(thisCtrl) {
            debugger;

            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }
            var rowCount = $('#actualConsumption_tbl tr').length;
            var delMsg = "";

            if (rowCount == 2) {
                delMsg = "You are going to delete Consumption!";
            }
            else {
                delMsg = "All related consumption entries will be deleted!";
            }

            swal({
                title: "Are you sure?",
                text: delMsg,
                type: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn btn-danger",
                confirmButtonText: "Yes, delete it",
                cancelButtonText: "No, cancel"
            }, function () {

                $.ajax({
                    type: "GET",
                    url: "../MeritOrder/deleteActualConsumption?mtConsumptionHeader_Id=" + thisCtrl,
                    dataType: 'json',

                    beforeSend: function () {
                        $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (data) {
                        _ConsumedQuan = [];

                        var resArr = data.split('½');
                        if (resArr[0] == "1") {
                            setTimeout(function () {
                                swal({
                                    title: "Deleted!",
                                    text: "Consumption Deleted Successfully",
                                    type: "success",
                                    showCancelButton: false,
                                    showConfirmButton: true
                                }, function () {
                                    if ($('#fuelType').val().toUpperCase() == "RLNG" || $('#fuelType').val().toUpperCase() == "GAS") {
                                        getSavedActualConsumption_ForRlngAndGas($('#btnSaveActualConsumption').attr('datatab'));
                                    }
                                    else {
                                        getSavedActualConsumption();
                                    }

                                }
                                );
                            }, 500);



                        }
                        else {
                            swal({
                                title: "Error!",
                                text: resArr[1],
                                type: "error",
                                showCancelButton: false,
                                showConfirmButton: true
                            });
                        }


                        $.unblockUI();

                    },
                    error: function (request, textStatus, errorThrown) {
                        // alert(request.getResponseHeader('some_header'));
                        $.unblockUI();
                    }

                });
            });
        }

        function addEstConsumption() {
            debugger;
            var valArr = [];
            isRequired = false;
            //$('#tbl_estfuelConsumption_res').children().find('input').each(function () {

            //    if ($(this).hasClass("Mandatory")) {
            //        if ($(this).val() == "") {
            //            isRequired = true;
            //        }
            //    }

                var minLength = Math.min(_shipmentIDs.length, _ConsumedQuan.length);
                for (var i = 0; i < minLength; i++) {
        //            var shipmentID = _shipmentIDs[i];
        //            var consumedQ = _ConsumedQuan[i];
        //            // For example, push ShipmentID values into valArr
        //            valArr.push({
        //                ID: shipmentID,
        //                //Value: '"' + consumedQ + '"'
        //                Value: consumedQ.toString()
        //});
                    var shipmentID = _ConsumedQuan[i].Id;//_shipmentIDs[i];
                    var consumedQ = _ConsumedQuan[i].ConsumedQuantity;

                    valArr.push({
                        ID: shipmentID,
                        Value: consumedQ
                    });
                }

                //valArr.push({
                //    ID: $(this).attr('id'),
                //    Value: $(this).val()
                //});


           // });

            fuelType = $('#fuelType').val();
            vendorId = $('#vendorId').val();
            date = $('#estimateddate').val();
            userId = $('#userId').val();
            var fuelIndex = $('#fuelIndexHidden').val();

            var data_tab = $('#btnSaveEstConsumption').attr('datatab');
            // 1--> actual, 2 -- > estimated

            if (fuelType == '-1') {
                swal({
                    title: "Mandatory!",
                    text: "Select Fuel Type",
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
            }
            else if (isRequired == true) {
                swal({
                    title: "Mandatory!",
                    text: "All field required",
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
            }
            else {

                var formdata = new FormData();
                formdata.append('fuelType', fuelType);
                formdata.append('valArr', JSON.stringify(valArr));
                formdata.append('vendorId', vendorId);
                formdata.append('date', date);
                formdata.append('fuelIndex', fuelIndex);
                formdata.append('userId', userId);
                formdata.append('data_tab', data_tab);
                formdata.append('filesData', JSON.stringify(filesData));


                $.ajax({
                    type: "POST",
                    url: "../MeritOrder/addEstConsumption",
                    data: formdata,
                    contentType: false,
                    processData: false,
                    async: false,
                    beforeSend: function () {
                        $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (data) {


                        $.unblockUI();
                        var resArr = data.split('½');
                        if (resArr[0] == "1") {
                            swal({
                                title: "Consumption!",
                                text: "Inserted successfully.",
                                type: "success",
                                showCancelButton: false,
                                showConfirmButton: true
                            }, function () {

                                if ($('#fuelType').val().toUpperCase() == "COAL") {
                                    getSavedEstConsumption();

                                }
                                else {

                                    getSavedEstConsumption_ForRlngAndGas($('#btnSaveEstConsumption').attr('datatab'));
                                }

                                $('#addestimatedModal').modal('hide');

                            }
                            );
                        }
                        else if (resArr[0] == "-1") {
                            swal({
                                title: "Not Allowed!",
                                text: resArr[1],
                                type: "warning",
                                showCancelButton: false,
                                showConfirmButton: true
                            });
                        }

                    },
                    error: function (request, textStatus, errorThrown) {
                        $.unblockUI();
                    }
                });

            }
        }

        function getSavedEstConsumption_ForRlngAndGas(type) {
            debugger;
            fuelType = $('#fuelType').val();
            //fuelIndex = $('#fuelIndexHidden').val();
            vendorId = $('#vendorId').val();
            date = $('#estimateddate').val();

            $.ajax({
                type: "GET",
                url: "../MeritOrder/getSavedEstConsumption_ForRlngAndGas?vendorId=" + vendorId + "&fuelType=" + fuelType + "&fuelIndex=" + fuelIndex + "&date=" + date + "&type=" + 2,
                dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {

                    debugger;
                    var resArr = data.split('½');
                    var headerId_Res = resArr[0];
                    var Date_time = resArr[1];
                    var Quantity = resArr[2];
                    var Rate = resArr[3];
                    var Amount = resArr[4];
                    var Wavg = resArr[5];
                    var Is_Submitted = resArr[6];
                    var attachment_data = resArr[7];
                    if (Date_time) {
                        Date_time = moment(Date_time).format("DD-MMM-YYYY");
                    }


                    // if ($('#btnCalculateConsumption').attr('datatype') == "EstimatedConsumption_ForRlngAndGas") {
                    //    var tempType = 2;

                    //}

                    if (headerId_Res == '') {
                        //When header Id is empty, it means no consumption is there, So show the Add Consumption button
                        $('#btnSubmitEstimatedConsummtion_ForRlngAndGas').attr('disabled', true);
                        $('#btnSubmitActualConsumption_ForRlngAndGas').attr('disabled', true);
                        $('#addEstimatedConsumptionForRlngAndGas_ModalBtn').attr('disabled', false);
                        $('#addActualConsumptionForRlngAndGas_ModalBtn').attr('disabled', false);

                    }
                    else {
                        $('#btnSubmitEstimatedConsummtion_ForRlngAndGas').attr('disabled', false);
                        $('#btnSubmitActualConsumption_ForRlngAndGas').attr('disabled', false);
                        $('#addEstimatedConsumptionForRlngAndGas_ModalBtn').attr('disabled', true);
                        $('#addActualConsumptionForRlngAndGas_ModalBtn').attr('disabled', true);
                    }

                    if (Is_Submitted == "1" && headerId_Res != "") {
                        //Hide submit button
                        $('#btnSubmitActualConsumption_ForRlngAndGas').attr('disabled', true);
                        $('#btnSubmitEstimatedConsummtion_ForRlngAndGas').attr('disabled', true);
                    }
                    else if (Is_Submitted == "0" && headerId_Res != "") {
                        //Show submit button
                        $('#btnSubmitActualConsumption_ForRlngAndGas').attr('disabled', false);
                        $('#btnSubmitEstimatedConsummtion_ForRlngAndGas').attr('disabled', false);
                    }
                    else if (Is_Submitted == "0" && headerId_Res == "") {
                        //Show submit button
                        $('#btnSubmitActualConsumption_ForRlngAndGas').attr('disabled', true);
                        $('#btnSubmitEstimatedConsummtion_ForRlngAndGas').attr('disabled', true);
                    }

                    var downloadData = "";
                    if (attachment_data != "") {
                        var attachments = JSON.parse(attachment_data);
                        if (attachments.length > 0) {
                            for (var i = 0; i < attachments.length; i++) {
                                var attachmentId = attachments[i]['ID'];
                                var attachmentName = attachments[i]['Name'];

                                downloadData += '<a onclick="return downloadAttachment(' + attachmentId + ')">' + attachmentName + '  &nbsp;<span class="fa fa-download"></span></a>';
                            }
                        }
                    }

                    var td_length = JSON.parse(resArr[2]).length;
                    debugger;
                    $('.ajaxRes_actualconsumption_ForRlngGas_Header').html('');
                    $('.ajaxRes_actualconsumption_ForRlngGas').html('');
                   // if (JSON.parse(resArr[2]).length > 0) {
                    if (JSON.parse(resArr[2]).length > 0) {
                        $('.ajaxRes_actualconsumption_ForRlngGas_Header').append('<th scope="col" class="text-center darkblueBg">Date</th>');
                       // $.each(JSON.parse(resArr[2]), function (index, value) {
                            $.each(JSON.parse(resArr[2]), function (index, value) {
                            $('.ajaxRes_actualconsumption_ForRlngGas_Header').append('<th scope="col" class="text-center darkblueBg">' + value.Name + ' ' + value.UNIT + '</th>');

                            //const momentTimestamp = moment(value.Date);
                            //var date = momentTimestamp.format("DD MMM YYYY");
                        });
                        $('.ajaxRes_actualconsumption_ForRlngGas_Header').append('<th scope="col" class="text-center darkblueBg">Attachments</th>');
                        $('.ajaxRes_actualconsumption_ForRlngGas_Header').append('<th scope="col" class="text-center darkblueBg">Action</th>');
                        debugger;
                        var tempArr = JSON.parse(resArr[2]);
                        if (Is_Submitted == '1') {
                            var tr = '<tr style="background: #e1e1e1;">' + '<td  align="center">' + Date_time + '</td>';
                        }
                        else {
                            var tr = '<tr>' + '<td  align="center">' + Date_time + '</td>';
                        }

                        //For loop for adding data .i.e td with data to our dynamic generated table
                        for (var i = 0; i < tempArr.length; i++) {
                            tr += '<td  align="right">' + tempArr[i].Value + '</td>';
                        }

                        if (headerId_Res != '') {
                            tr += '<td align="center">\
                                 <div class="dropdown">\
                                   <button onclick = "myFunction(this)" class= "dropbtn" > View</button >\
                                   <div id="myDropdown" class="dropdown-content">\
                                      '+ downloadData + '\
                                   </div>\
                                 </div >\
                               </td>';
                        }

                        if (headerId_Res == '' && Is_Submitted == '0') {
                            //There is No consumption there and Not Submitted
                            tr += '<td> </td>';
                        }
                        else if (headerId_Res != '' && Is_Submitted == '0') {
                            //There is a consumption there but it is not submitted yet
                            tr += '<td align="center"> <i class="fa fa-edit" onclick=" return editEstConsumption(' + value.vendorId + ', ' + value.fuelIndex + ', ' + date + ')"></i> | \
                                                        <i class="fa fa-trash" onclick=" return deleteEstConsumption('+ headerId_Res + ')"></i>\
                                                    </td>';
                        }
                        else if (headerId_Res != '' && Is_Submitted == '1') {
                            tr += '<td align="center"> <i class="fa fa-edit icondisabled"></i> | \
                                            <i class="fa fa-trash icondisabled" ></i>\
                                       </td>';
                        }

                        tr += '</tr>';
                        $('.ajaxRes_actualconsumption_ForRlngGas').append(tr);


                    }
                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });
        }

        function getSavedEstConsumption() {
            debugger;

            var mtConsumptionHeader_Id = $('#mtConsumptionHeader_Id').val();
            //
            fuelType = $('#fuelType').val();
            vendorId = $('#vendorId').val();
            date = $('#estimateddate').val();

            $.ajax({
                type: "GET",
                url: "../MeritOrder/getSavedEstConsumption?vendorId=" + vendorId + "&fuelType=" + fuelType + "&date=" + date + "&type=2",
                dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {

                    $('#ajaxRes_estconsumption').html('');
                    if (data.length > 0) {
                        debugger;
                        var counter = 1;
                        $.each(data, function (index, value) {

                            //const momentTimestamp = moment(value.Date);
                            //var date = momentTimestamp.format("DD MMM YYYY");

                            const momentTimestamp = moment(value.Date);
                            var date = momentTimestamp.format("DD-MMM-YYYY");

                            if (value.Is_Submitted == true) {

                                $('#btnSubmitEstConsumption').attr('disabled', true);
                            }
                            else {
                                $('#btnSubmitEstConsumption').attr('disabled', false);
                            }
                            if (value.mtConsumptionHeader_Id != '') {
                                //$('#addActualConsumptionModalBtn').hide();
                                $('#addEstConsumptionModalBtn').attr('disabled', true);
                            }
                            else {
                                //$('#addActualConsumptionModalBtn').show();
                                $('#addEstConsumptionModalBtn').attr('disabled', false);
                            }

                            var downloadData = "";
                            if (value.attachment_data != "") {
                                var attachments = JSON.parse(value.attachment_data);
                                if (attachments.length > 0) {
                                    for (var i = 0; i < attachments.length; i++) {
                                        var attachmentId = attachments[i]['ID'];
                                        var attachmentName = attachments[i]['Name'];

                                        downloadData += '<a onclick="return downloadAttachment(' + attachmentId + ')">' + attachmentName + '  &nbsp;<span class="fa fa-download"></span></a>';
                                    }
                                }
                            }

                            if (value.Is_Submitted == "1") {
                                if (counter == 1) {
                                    $('#ajaxRes_estconsumption').append(
                                        '<tr style="background:#e1e1e1;">\
                                           <td align="center" rowspan="'+ data.length + '" style="vertical-align: middle;">' + date + '</td>\
                                           <td align="right">'+ currencyFormat(value.Quantity) + '</td>\
                                           <td align="right">'+ currencyFormat(value.Rate) + '</td>\
                                           <td align="right">'+ currencyFormat(value.Amount) + '</td>\
                                           <td align="center" rowspan="'+ data.length + '" style="vertical-align: middle;">' + currencyFormat(value.ActualWar) + '</td>\
                                           <td align="center" rowspan="'+ data.length + '" style="vertical-align: middle;">\
                                           <div class="dropdown">\
                                           <button onclick = "myFunction(this)" class= "dropbtn" > View</button >\
                                               <div id="myDropdown" class="dropdown-content">\
                                                '+ downloadData + '\
                                               </div>\
                                               </div >\
                                           </td>\
                                           <td align="center" rowspan="'+ data.length + '" style="vertical-align: middle;">\
                                                                            <i class="fa fa-edit icondisabled" ></i> | \
                                                                            <i class="fa fa-trash icondisabled"></i>\
                                           </td >\
                                         </tr>\ '
                                    );
                                }
                                else {
                                    $('#ajaxRes_estconsumption').append(
                                        '<tr  style="background:#e1e1e1;">\
                                            <td align="right">'+ currencyFormat(value.Quantity) + '</td>\
                                            <td align="right">'+ currencyFormat(value.Rate) + '</td>\
                                            <td align="right">'+ currencyFormat(value.Amount) + '</td>\
                                        </tr>\ '
                                    );
                                }
                            }
                            else {

                                debugger;
                                if (counter == 1) {
                                    $('#ajaxRes_estconsumption').append(
                                        '<tr>\
                                          <td align="center" rowspan="'+ data.length + '" style="vertical-align: middle;">' + date + '</td>\
                                          <td align="right">'+ currencyFormat(value.Quantity) + '</td>\
                                          <td align="right">'+ currencyFormat(value.Rate) + '</td>\
                                          <td align="right">'+ currencyFormat(value.Amount) + '</td>\
                                          <td align="center" rowspan="'+ data.length + '" style="vertical-align: middle;">' + currencyFormat(value.ActualWar) + '</td>\
                                          <td align="center" rowspan="'+ data.length + '" style="vertical-align: middle;">\
                                              <div class="dropdown">\
                                              <button onclick = "myFunction(this)" class= "dropbtn" > View</button >\
                                                 <div id="myDropdown" class="dropdown-content">\
                                                    '+ downloadData + '\
                                                 </div>\
                                              </div >\
                                          </td>\
                                          <td align="center" rowspan="'+ data.length + '" style="vertical-align: middle;">\
                                                                           <i class="fa fa-edit" onclick="return editEstConsumption('+ $('#vendorId').val() + ', ' + $('#fuelIndexHidden').val() + ', \'' + $('#estimateddate').val() + '\')"></i> | \
                                                                            <i class="fa fa-trash" onclick=" return deleteEstConsumption('+ value.mtConsumptionHeader_Id + ')"></i>\
                                                                    </td >\
                                                                    </tr>\ '
                                    );
                                }
                                else {
                                    $('#ajaxRes_estconsumption').append(
                                        '<tr>\
                                            <td align="right">'+ currencyFormat(value.Quantity) + '</td>\
                                            <td align="right">'+ currencyFormat(value.Rate) + '</td>\
                                            <td align="right">'+ currencyFormat(value.Amount) + '</td>\
                                        </tr>\ '
                                    );
                                }
                            }

                            counter++;
                        });
                    }
                    else {
                        $('#btnSubmitEstConsumption').attr('disabled', true);
                        $('#addEstConsumptionModalBtn').attr('disabled', false);
                        $('#ajaxRes_estconsumption').append(
                            '<tr style="background:#e1e1e1;"><td align="center" colspan="7">No Record Found</td></tr>\ '
                        );
                    }
                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });
        }

        function deleteEstConsumption(thisCtrl) {
            debugger;
            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }
            var rowCount = $('#estConsumption_tbl tr').length;
            var delMsg = "";

            if (rowCount == 2) {
                delMsg = "You are going to delete Consumption!";
            }
            else {
                delMsg = "All related consumption entries will be deleted!";
            }

            swal({
                title: "Are you sure?",
                text: delMsg,
                type: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn btn-danger",
                confirmButtonText: "Yes, delete it",
                cancelButtonText: "No, cancel"
            }, function () {

                $.ajax({
                    type: "GET",
                    url: "../MeritOrder/deleteEstConsumption?mtConsumptionHeader_Id=" + thisCtrl,
                    dataType: 'json',

                    beforeSend: function () {
                        $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (data) {
                        _ConsumedQuan = [];
                        debugger;
                        var resArr = data.split('½');
                        if (resArr[0] == "1") {
                            setTimeout(function () {
                                swal({
                                    title: "Deleted!",
                                    text: "Consumption Deleted Successfully",
                                    type: "success",
                                    showCancelButton: false,
                                    showConfirmButton: true
                                }, function () {
                                    if ($('#fuelType').val().toUpperCase() == "RLNG" || $('#fuelType').val().toUpperCase() == "GAS") {
                                        getSavedEstConsumption_ForRlngAndGas($('#btnSaveEstConsumption').attr('datatab'));
                                    }
                                    else {
                                        getSavedEstConsumption();
                                    }

                                }
                                );
                            }, 500);

                        }
                        else {
                            swal({
                                title: "Error!",
                                text: resArr[1],
                                type: "error",
                                showCancelButton: false,
                                showConfirmButton: true
                            });
                        }


                        $.unblockUI();

                    },
                    error: function (request, textStatus, errorThrown) {
                        // alert(request.getResponseHeader('some_header'));
                        $.unblockUI();
                    }

                });
            });
        }

        function deleteStock(thisCtrl) {
            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }

            swal({
                title: "Are you sure?",
                text: "You are going to delete Receipt!",
                type: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn btn-danger",
                confirmButtonText: "Yes, delete it",
                cancelButtonText: "No, cancel"
            }, function () {

                $.ajax({
                    type: "GET",
                    url: "../MeritOrder/deleteStock?mtReceiptsHeader_Id=" + thisCtrl,
                    dataType: 'json',
                    beforeSend: function () {
                        $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (data) {

                        var resArr = data.split('½');
                        if (resArr[0] == "1") {
                            setTimeout(function () {
                                swal({
                                    title: "Deleted!",
                                    text: "Receipt Deleted Successfully",
                                    type: "success",
                                    showCancelButton: false,
                                    showConfirmButton: true
                                }, function () {
                                    getSavedReceipt();
                                    RecieptsValidation();
                                }
                                );
                            }, 500);

                        }
                        else {
                            swal({
                                title: "Error!",
                                text: resArr[1],
                                type: "error",
                                showCancelButton: false,
                                showConfirmButton: true
                            });
                        }

                        //swal({
                        //    title: "Deleted!",
                        //    text: "Receipt deleted successfully",
                        //    type: "success",
                        //    showCancelButton: false,
                        //    showConfirmButton: true
                        //}, function () {

                        //    if ($('#fuelType').val() == "RLNG" || $('#fuelType').val() == "GAS") {
                        //        //getSavedActualConsumption_ForRlngAndGas($('#btnSaveActualConsumption').attr('datatab'));
                        //    }
                        //    else {
                        //        getSavedReceipt();
                        //        RecieptsValidation();
                        //    }

                        //}
                        //);

                        $.unblockUI();

                    },
                    error: function (request, textStatus, errorThrown) {
                        // alert(request.getResponseHeader('some_header'));
                        $.unblockUI();
                    }

                });
            });
        }

        function getDetailedList() {

            if ($('#fuelType').val() == '-1') {
                swal({
                    title: "Warning!",
                    text: "Select Fuel Type.",
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
            }
            else {


                fuelType = $('#fuelType').val();
                vendorId = $('#vendorId').val();
                date = $('#daterange').val();
                var dateSplit = $('#daterange').val().split(' - ');
                var fromDate = moment(dateSplit[0]).format('YYYY-MM-DD');
                var toDate = moment(dateSplit[1]).format('YYYY-MM-DD');

                $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });

                setTimeout(function () {
                    $.ajax({
                        type: "GET",
                        url: "../MeritOrder/getDetailedList?vendorId=" + vendorId + "&fuelType=" + fuelType + "&fromDate=" + fromDate + "&toDate=" + toDate,
                        dataType: 'json',
                        async: false,
                        beforeSend: function () {
                            $.unblockUI();
                            // $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                        },
                        complete: function () {
                            $.unblockUI();
                        },
                        success: function (data) {
                            debugger;
                            //$('#ajaxRes_detailedlist').html('');

                            if ($.fn.DataTable.isDataTable('#tbl_results_detailedList')) {
                                $('#tbl_results_detailedList').DataTable().destroy();
                            }

                            $('#tbl_results_detailedList tbody').html('');

                            if (data.length > 0) {

                                //$('#tblprntHead_detailedList').append('<tr><th class="ExportCol">Power Producer: </th>\
                                //                            <th class= "ExportCol" id = "expIPP" ></th >\
                                //                            <th class="ExportCol"></th>\
                                //                            <th class="ExportCol">Fuel Type: </th>\
                                //                            <th class="ExportCol" id="expFuel"></th>\
                                //                            <th class="ExportCol"></th>\
                                //                            <th class="ExportCol">Date Range: </th>\
                                //                            <th class="ExportCol" id="expDate"></th></tr>');
                                //$('#tblprntHead_detailedList').append($('table#tbl_results_detailedList thead tr'));
                                var counter = 1;
                                var momentTimestamp;
                                var formatedDate;
                                $.each(data, function (index, value) {

                                    if (moment(value.Stock_date).format("DD-MMM-YYYY") != formatedDate || index == 0) { //TBC
                                        counter = 1;
                                    }

                                    momentTimestamp = moment(value.Stock_date);
                                    formatedDate = momentTimestamp.format("DD-MMM-YYYY");

                                    if (counter == 1) {

                                        $('#ajaxRes_detailedlist, #tblprntBody_detailedList').append(
                                            '<tr>\
                                    <td align = "center" rowspan='+ value.r_count + ' style="vertical-align: middle" > ' + formatedDate + '</td>\
                                    <td align = "right" > '+ currencyFormat(value.Opening_Quantity) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Opening_Rate) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Opening_Amount) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Reciept_Quantity) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Reciept_Rate) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Reciept_Amount) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Consumed_Quantity) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Consumed_Rate) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Consumed_Amount) + '</td>\
                                    <td align="right" rowspan='+ value.r_count + ' style="vertical-align: middle">' + currencyFormat(value.Weighted_Avg_Rate) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Closing_Quantity) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Closing_Rate) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Closing_Amount) + '</td>\
                                    </tr>\ '
                                        );
                                    }
                                    else {
                                        $('#ajaxRes_detailedlist, #tblprntBody_detailedList').append(
                                            '<tr>\
                                    <td align = "right" > '+ currencyFormat(value.Opening_Quantity) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Opening_Rate) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Opening_Amount) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Reciept_Quantity) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Reciept_Rate) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Reciept_Amount) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Consumed_Quantity) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Consumed_Rate) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Consumed_Amount) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Closing_Quantity) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Closing_Rate) + '</td>\
                                    <td align="right">'+ currencyFormat(value.Closing_Amount) + '</td>\
                                    </tr>\ '
                                        );
                                    }
                                    counter++;

                                    //$('#tblprntBody_detailedList').append(
                                    //    '<tr>\
                                    //    <td align = "center" > '+ formatedDate + '</td>\
                                    //    <td align = "right" > '+ currencyFormat(value.Opening_Quantity.toFixed(4)) + '</td>\
                                    //    <td align="right">'+ currencyFormat(value.Opening_Rate.toFixed(4)) + '</td>\
                                    //    <td align="right">'+ currencyFormat(value.Opening_Amount.toFixed(4)) + '</td>\
                                    //    <td align="right">'+ currencyFormat(value.Reciept_Quantity.toFixed(4)) + '</td>\
                                    //    <td align="right">'+ currencyFormat(value.Reciept_Rate.toFixed(4)) + '</td>\
                                    //    <td align="right">'+ currencyFormat(value.Reciept_Amount.toFixed(4)) + '</td>\
                                    //    <td align="right">'+ currencyFormat(value.Consumed_Quantity.toFixed(4)) + '</td>\
                                    //    <td align="right">'+ currencyFormat(value.Consumed_Rate.toFixed(4)) + '</td>\
                                    //    <td align="right">'+ currencyFormat(value.Consumed_Amount.toFixed(4)) + '</td>\
                                    //    <td align="right">'+ currencyFormat(value.Weighted_Avg_Rate.toFixed(4)) + '</td>\
                                    //    <td align="right">'+ currencyFormat(value.Closing_Quantity.toFixed(4)) + '</td>\
                                    //    <td align="right">'+ currencyFormat(value.Closing_Rate.toFixed(4)) + '</td>\
                                    //    <td align="right">'+ currencyFormat(value.Closing_Amount.toFixed(4)) + '</td>\
                                    //    </tr>'
                                    //);
                                });
                            }
                            //var dt = $("#tbl_results_detailedList").DataTable({
                            //    "ordering": false,
                            //    "searching": false,
                            //    "paging": false,
                            //    //"aLengthMenu": [[10, 25, 50, 100, 150, 250, 500, -1], [10, 25, 50, 100, 150, 250, 500, "All"]],
                            //    //"iDisplayLength": 10,
                            //    "bLengthChange": false
                            //});

                            $('#expIPP').text($('#NameTitlebar').text());
                            $('#expFuel').text($('#fuelType').find(":selected").val());
                            $('#expDate').text($('#daterange').val());



                            //dt.columns([0, 1]).visible(false);
                            //else {
                            //    $('1a2xRes_detailedlist').append(
                            //        '<tr>\
                            //                <td align="center" colspan="14">No Record Found</td>\
                            //            </tr> '
                            //    );
                            //}
                            //$.unblockUI();

                        },
                        error: function (request, textStatus, errorThrown) {
                            // alert(request.getResponseHeader('some_header'));
                            $.unblockUI();
                        }
                    });
                },500);

            }
        }

        function submitActualConsumption() {

            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }


            swal({
                title: "Are you sure?",
                text: "You are going to submit Consumption!",
                type: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn btn-danger",
                confirmButtonText: "Yes, submit it",
                cancelButtonText: "No, cancel"
            }, function () {

                fuelType = $('#fuelType').val();
                vendorId = $('#vendorId').val();
                date = $('#date').val();
                userId = $('#userId').val();

                var formdata = new FormData();
                formdata.append('fuelType', fuelType);
                formdata.append('vendorId', vendorId);
                formdata.append('date', date);
                formdata.append('userId', userId);
                formdata.append('type', '1');


                $.ajax({
                    type: "POST",
                    url: "../MeritOrder/submitActualConsumption",
                    data: formdata,
                    async: false,
                    contentType: false,
                    processData: false,
                    dataType: 'json',
                    beforeSend: function () {
                        $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (data) {

                        var resArr = data.split('½');
                        if (resArr[0] == "1") {
                            setTimeout(function () {
                                swal({
                                    title: "Submitted!",
                                    text: "Consumption Submitted Successfully",
                                    type: "success",
                                    showCancelButton: false,
                                    showConfirmButton: true
                                }, function () {
                                    getSavedActualConsumption();
                                    getClosingStockWidget();
                                    //ActualConsumptionValidation();
                                }
                                );
                            }, 500);

                        }
                        else {
                            swal({
                                title: "Error!",
                                text: resArr[1],
                                type: "error",
                                showCancelButton: false,
                                showConfirmButton: true
                            });
                        }


                    },
                    error: function (request, textStatus, errorThrown) {
                        $.unblockUI();
                    }
                });
            });
        }

        function submitActualConsumption_ForRlngGas(type) {

            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }

            swal({
                title: "Are you sure?",
                text: "You are going to submit Consumption!",
                type: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn btn-danger",
                confirmButtonText: "Yes, submit it",
                cancelButtonText: "No, cancel"
            }, function () {

                fuelType = $('#fuelType').val();
                vendorId = $('#vendorId').val();
                date = $('#dateHidden').val();
                userId = $('#userId').val();

                var formdata = new FormData();
                formdata.append('fuelType', fuelType);
                formdata.append('vendorId', vendorId);
                formdata.append('date', date);
                formdata.append('userId', userId);
                formdata.append('type', type);


                $.ajax({
                    type: "POST",
                    url: "../MeritOrder/submitActualConsumption",
                    data: formdata,
                    async: false,
                    contentType: false,
                    processData: false,
                    dataType: 'json',
                    beforeSend: function () {
                        $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (data) {




                        var resArr = data.split('½');
                        if (resArr[0] == "1") {
                            setTimeout(function () {
                                swal({
                                    title: "Submitted!",
                                    text: "Consumption Submitted Successfully",
                                    type: "success",
                                    showCancelButton: false,
                                    showConfirmButton: true
                                }, function () {
                                    if ($('#fuelType').val().toUpperCase() == "RLNG" || $('#fuelType').val().toUpperCase() == "GAS") {

                                        getSavedActualConsumption_ForRlngAndGas($('#btnSaveActualConsumption').attr('datatab'));
                                    }
                                    else {
                                        getSavedActualConsumption();
                                    }
                                }
                                );
                            }, 500);

                        }
                        else {
                            swal({
                                title: "Error!",
                                text: resArr[1],
                                type: "error",
                                showCancelButton: false,
                                showConfirmButton: true
                            });
                        }



                    },
                    error: function (request, textStatus, errorThrown) {
                        $.unblockUI();
                    }
                });
            });
        }

        function RecieptsValidation() {
            //

            debugger;
            fuelType = $('#fuelType').val();
            vendorId = $('#vendorId').val();
            date = $('#date').val();
            //var type = $('#btnSaveActualConsumption').attr('datatab');


            $.ajax({
                type: "GET",
                url: "../MeritOrder/RecieptsValidation?vendorId=" + vendorId + "&fuelType=" + fuelType + "&date=" + date,
                //dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {
                    //
                    // var resArr = data.split('½');
                    if (data == "1") {
                        //$('#addreceiptModalBtn').hide();
                        //$('#btnSubmitReceipts').hide();
                        $('#addreceiptModalBtn').attr('disabled', true);
                        //$('#btnSubmitReceipts').attr('disabled', true);


                    }
                    else {
                        //$('#addreceiptModalBtn').show();
                        //$('#btnSubmitReceipts').show();
                        $('#addreceiptModalBtn').attr('disabled', false);
                        //$('#btnSubmitReceipts').attr('disabled', false);
                    }

                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });
        }

        function getUnits() {

            $.ajax({
                type: "GET",
                url: "../MeritOrder/getUnits?vendorId=" + vendorId + "&fuelType=" + fuelType,
                dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {
                    //

                    if (data.length > 0) {
                        $.each(data, function (index, value) {

                            if (value.Name == "Quantity") {
                                $('.clsQuantity').text(value.Name + ' (' + value.Unit + ')');
                                $('.clsQuantityDet').html(value.Name + '<br />(' + value.Unit + ')');
                            }
                            else if (value.Name == "Amount") {
                                $('.clsAmount').text(value.Name + ' (' + value.Unit + ')');
                                $('.clsAmountDet').html(value.Name + '<br />(' + value.Unit + ')');
                            }
                            else if (value.Name == "Rate") {
                                $('.clsRate').text(value.Name + ' (' + value.Unit + ')')
                                $('.clsRateDet').html(value.Name + '<br />(' + value.Unit + ')')
                            }

                        });


                    }
                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });

        }

        function encodeImgtoBase64(element) {
            const files = element.files;
            var flag = 0;

            for (var i = 0; i < files.length; i++) {
                if (files[i].type != "application/msword" && files[i].type != "application/vnd.ms-excel" && files[i].type != "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" && files[i].type != "application/vnd.ms-powerpoint" && files[i].type != "application/pdf" && files[i].type != "image/jpg" && files[i].type != "image/JPG" && files[i].type != "image/png" && files[i].type != "image/PNG" && files[i].type != "image/jpeg" && files[i].type != "image/JPEG") {
                    swal({
                        title: "Invalid Format!",
                        text: "File Not Allowed",
                        type: "error",
                        showCancelButton: false,
                        showConfirmButton: true
                    });
                    flag = 1;
                    $('.clsUpload').val('');
                }
            }

            if (flag == 0) {
                function readAndPreview(file) {
                    const reader = new FileReader();
                    reader.addEventListener("load", function () {
                        var arrayBuffer = this.result;

                        arrayBuffer = arrayBuffer.substring(arrayBuffer.indexOf(",") + 1);

                        var base64String = arrayBuffer;

                        if (file.type == "application/msword" || file.type == "application/vnd.ms-excel" || file.type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" || file.type == "application/vnd.ms-powerpoint" || file.type == "application/pdf" || file.type == "image/jpg" || file.type == "image/JPG" || file.type == "image/png" || file.type == "image/PNG" || file.type == "image/jpeg" || file.type == "image/JPEG") {
                            filesData.push({
                                ID: 0,
                                ACTION: 1,
                                Name: file.name,
                                TYPE: file.type,
                                PATH: "",
                                file_data: base64String
                            });
                        }
                    }, false);
                    reader.readAsDataURL(file);
                }

                if (files) {
                    Array.prototype.forEach.call(files, readAndPreview);
                }
            }
        }

        function populateMODataComponents() {

            var vendorId = $('#vendorId').val();
            var fuelType = $('#fuelType').val();
            date = $('#date').val();
            $.ajax({
                type: "GET",
                url: "../MeritOrder/populateMODataComponents?vendorId=" + vendorId + "&fuelType=" + fuelType + "&date=" + date,
                dataType: 'json',
                async: false,

                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {


                    var response = JSON.parse(data[0].components);
                    $('#moDataComponents').html('');
                    //$('#downloadReceipt_res').html('');
                    if (response.length > 0) {

                        $.each(response, function (index, value) {

                            var ID = value.ID;
                            var Name = value.Name;
                            var UNIT = value.UNIT;
                            var TYPE = value.TYPE;
                            var Value = value.Value;

                            if (TYPE == "Input") {
                                var readonly = '';
                                var type = 'text';
                                var clsDecimal = 'decicost';
                            }

                            else if (TYPE == "Text") {
                                var readonly = '';
                                var type = 'text';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Date") {
                                var readonly = '';
                                var type = 'date';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Calculated") {
                                var readonly = 'readonly';
                                var type = 'text';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Configurable") {
                                var readonly = 'readonly';
                                var type = 'text';
                                var clsDecimal = 'decicost';

                            }

                            $('#moDataComponents').append(
                                '<div class="form-group col-md-6">\
                                                                    <label for= "'+ Name + '"   style="font-size: 12px;"> ' + Name + ' <span class="required">*</span></label>\
                                                                    <input type="'+ type + '" class="form-control formulainputs ' + clsDecimal + '" id="' + ID + '" value="' + Value + '" ' + readonly + ' >\
                                                                </div>'
                            );

                        });



                    }
                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });
        }

        function addMoData() {
            //
            var valArr = [];
            isRequired = false;
            $('#moDataComponents').children().find('input').each(function () {
                if ($(this).val() == "") {
                    isRequired = true;
                }
                valArr.push({
                    ID: $(this).attr('id'),
                    Value: $(this).val()
                });
            });

            fuelType = $('#fuelType').val();
            vendorId = $('#vendorId').val();
            date = $('#date').val();
            userId = $('#userId').val();

            if (fuelType == '-1') {
                swal({
                    title: "Mandatory!",
                    text: "Select Fuel Type",
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
            }
            else if (isRequired == true) {
                swal({
                    title: "Mandatory!",
                    text: "All field required",
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
            }



            else {

                var formdata = new FormData();
                formdata.append('fuelType', fuelType);
                formdata.append('valArr', JSON.stringify(valArr));
                formdata.append('vendorId', vendorId);
                formdata.append('date', date);
                formdata.append('userId', userId);
                formdata.append('filesData', JSON.stringify(filesData));


                $.ajax({
                    type: "POST",
                    url: "../MeritOrder/addMoData",
                    data: formdata,
                    contentType: false,
                    processData: false,
                    async: false,
                    beforeSend: function () {
                        $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (data) {

                        $.unblockUI();
                        var resArr = data.split('½');
                        if (resArr[0] == "1") {
                            swal({
                                title: "MO Data!",
                                text: "Inserted successfully.",
                                type: "success",
                                showCancelButton: false,
                                showConfirmButton: true
                            }, function () {

                                getSavedMoData();
                                getMoDataSummary();
                                $('#addMoDataModal').modal('hide');

                            }
                            );
                        }
                        else if (resArr[0] == "-1") {
                            swal({
                                title: "Not Allowed!",
                                text: resArr[1],
                                type: "warning",
                                showCancelButton: false,
                                showConfirmButton: true
                            });
                        }

                    },
                    error: function (request, textStatus, errorThrown) {
                        $.unblockUI();
                    }
                });

            }
        }

        function getMoDataSummary() {
            //


            fuelType = $('#fuelType').val();
            vendorId = $('#vendorId').val();
            var dateee = new Date();
            nextDay = new Date(moment(dateee.setDate(dateee.getDate() + 1))['_d']);
            date = moment(nextDay).format('YYYY-MM-DD');

            $.ajax({
                type: "GET",
                url: "../MeritOrder/getMoDataSummary?vendorId=" + vendorId + "&fuelType=" + fuelType + "&date=" + date,
                async: false,
                dataType: 'json',
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {

                    debugger;
                    $('#ajaxRes_MoData2').html('');
                    if (data.length > 0) {

                        $.each(data, function (index, value) {
                            const momentTimestamp = moment(value.MODate);
                            var MODate = momentTimestamp.format("DD-MMM-YYYY");
                            $('#ajaxRes_MoData2').append(
                                '<tr>\
                                        <td align="center">'+ MODate+ '</td>\
                                        <td align="left">'+ value.IPP_Name + '</td>\
                                        <td align="right">'+ currencyFormat(value.FCC) + '</td>\
                                        <td align="right">'+ currencyFormat(value.VariableOM) + '</td>\
                                        <td align="right">'+ currencyFormat(value.OtherCost) + '</td>\
                                        <td align="right">'+ currencyFormat(value.Adjustment) + '</td>\
                                        <td align="right">'+ currencyFormat(value.Total) + '</td>\
                                    </tr>\ '
                            );
                        });
                    }
                    else {
                        $('#ajaxRes_MoData2').append(
                            '<tr>\
                                        <td colspan="7" align="center">No Record Found</td>\
                                    </tr>\ '
                        );
                    }

                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });
        }

        function getSavedMoData() {
            //
            fuelType = $('#fuelType').val();
            vendorId = $('#vendorId').val();
            date = $('#date').val();

            $.ajax({
                type: "GET",
                url: "../MeritOrder/getSavedMoData?vendorId=" + vendorId + "&fuelType=" + fuelType + "&date=" + date,
                dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {

                    debugger;
                    var resArr = data.split('½');
                    var headerId_Res = resArr[0];
                    var components_Res = resArr[1];
                    var Date_time = resArr[2];
                    if (Date_time) {//
                        Date_time = moment(Date_time).format("DD-MMM-YYYY");//
                    }

                    var Is_Submitted = resArr[3];
                    var attachmentData = resArr[4];

                    if (Is_Submitted == "1") {
                        //Hide submit button
                        //$('#btnSubmitMoData').hide();
                        $('#addMoDataModalBtn').attr('disabled', true);
                        $('#btnSubmitMoData').attr('disabled', true);
                    }
                    else {
                        //Show submit button
                        //$('#btnSubmitMoData').show();

                        $('#btnSubmitMoData').attr('disabled', false);

                    }
                    if (headerId_Res == '') {
                        //When header Id is empty, it means no data is there, So show the Add Consumption button
                        // $('#addMoDataModalBtn').show();
                        $('#addMoDataModalBtn').attr('disabled', false);
                        $('#btnSubmitMoData').attr('disabled', true);

                    }
                    else if (headerId_Res != '' && Is_Submitted == "1") {
                        //When header Id is empty, it means no data is there, So show the Add Consumption button
                        // $('#addMoDataModalBtn').show();
                        $('#addMoDataModalBtn').attr('disabled', true);
                        $('#btnSubmitMoData').attr('disabled', true);

                    }
                    else {
                        //$('#addMoDataModalBtn').hide();
                        $('#addMoDataModalBtn').attr('disabled', true);
                        $('#btnSubmitMoData').attr('disabled', false);
                    }




                    var downloadData = "";
                    if (attachmentData != "") {
                        var attachments = JSON.parse(attachmentData);
                        if (attachments.length > 0) {
                            for (var i = 0; i < attachments.length; i++) {
                                var attachmentId = attachments[i]['ID'];
                                var attachmentName = attachments[i]['Name'];

                                downloadData += '<a onclick="return downloadAttachment(' + attachmentId + ')">' + attachmentName + '  &nbsp;<span class="fa fa-download"></span></a>';
                            }
                        }
                    }


                    var td_length = JSON.parse(resArr[1]).length;

                    $('.ajaxRes_MoData_Header').html('');
                    $('.ajaxRes_MoData').html('');
                    if (JSON.parse(resArr[1]).length > 0) {

                        $('.ajaxRes_MoData_Header').append('<th scope="col" class="text-center darkblueBg">Date </th>');
                        $.each(JSON.parse(resArr[1]), function (index, value) {

                            $('.ajaxRes_MoData_Header').append('<th scope="col" class="text-center darkblueBg">' + value.Name + '</th>');

                            //const momentTimestamp = moment(value.Date);
                            //var date = momentTimestamp.format("DD MMM YYYY");
                        });
                        $('.ajaxRes_MoData_Header').append('<th scope="col" class="text-center darkblueBg">Attachment</th>');
                        $('.ajaxRes_MoData_Header').append('<th scope="col" class="text-center darkblueBg">Action</th>');

                        var tempArr = JSON.parse(resArr[1]);
                        if (Is_Submitted == '1') {
                            var tr = '<tr style="background: #e1e1e1;">' + '<td align="center">' + Date_time + '</td>';
                        }
                        else {
                            var tr = '<tr>' + '<td align="center">' + Date_time + '</td>';
                        }

                        //For loop for adding data .i.e td with data to our dynamic generated table

                        if (headerId_Res != '') {
                            for (var i = 0; i < tempArr.length; i++) {
                                tr += '<td align="right">' + parseFloat(tempArr[i].Value).toFixed(4) + '</td>';
                            }


                            tr += '<td align="center">\
                                     <div class="dropdown">\
                                       <button onclick = "myFunction(this)" class= "dropbtn" > View</button >\
                                       <div id="myDropdown" class="dropdown-content">\
                                          '+ downloadData + '\
                                       </div>\
                                     </div >\
                                   </td>';

                            if (headerId_Res == '' && Is_Submitted == '0') {
                                //There is No Data there and Not Submitted
                                tr += '<td> </td>';
                            }
                            else if (headerId_Res != '' && Is_Submitted == '0') {
                                //There is a Data there but it is not submitted yet
                                tr += '<td align="center"> <i class="fa fa-edit" onclick=" return editMoData(' + headerId_Res + ')"></i> | \
                                                        <i class="fa fa-trash" onclick=" return deleteMoData('+ headerId_Res + ')"></i>\
                                                    </td>';
                            }
                            else if (headerId_Res != '' && Is_Submitted == '1') {
                                tr += '<td align="center"><i class="fa fa-edit icondisabled" ></i> | <i class="fa fa-trash icondisabled"></i></td>';
                            }
                        }
                        tr += '</tr>';
                        $('.ajaxRes_MoData').append(tr);


                    }
                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });
        }

        function editMoData(MoDataheaderId) {
            debugger;
            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            date = $('#date').val();
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }

            $('#fetchLatestMODataDiv').hide();
            filesData = [];
            fuelType = $('#fuelType').val();
            vendorId = $('#vendorId').val();
            //$('#files').val('');
            $('.clsUpload').val('');
            //date = $('#date').val();

            $.ajax({
                type: "GET",
                url: "../MeritOrder/editMoData?MoDataheaderId=" + MoDataheaderId + "&vendorId=" + vendorId + "&fuelType=" + fuelType + "&date=" + date,
                dataType: 'json',

                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {

                    debugger;
                    var response = JSON.parse(data[0].components);
                    var attachments = JSON.parse(data[0].attachment_data);
                    if (response.length > 0) {
                        $('#moDataComponents').html('');
                        $('#downloadMOData_res').html('');
                        var downloadData = '';
                        if (attachments.length > 0) {
                            for (var i = 0; i < attachments.length; i++) {
                                var attachmentId = attachments[i]['ID'];
                                var attachmentName = attachments[i]['Name'];

                                downloadData += '<a href="#" class="badge badge-secondary">' + attachmentName + ' &nbsp; <span class="fa fa-trash" onclick="deleteAttachment(this)" isdeleted="0" idpk="' + attachmentId + '" ></span></a>';
                            }
                            $('#downloadMOData_res').append(downloadData);
                        }

                        $.each(response, function (index, value) {

                            var ID = value.ID;
                            var Name = value.Name;
                            var TYPE = value.TYPE;
                            var Value = value.Value;

                            if (TYPE == "Input") {
                                var readonly = '';
                                var type = 'text';
                                var clsDecimal = 'decicost';
                            }

                            else if (TYPE == "Text") {
                                var readonly = '';
                                var type = 'text';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Date") {
                                var readonly = '';
                                var type = 'date';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Calculated") {
                                var readonly = 'readonly';
                                var type = 'text';
                                var clsDecimal = '';

                            }
                            else if (TYPE == "Configurable") {
                                var readonly = 'readonly';
                                var type = 'text';
                                var clsDecimal = 'decicost';

                            }
                            $('#moDataComponents').append(
                                '<div class="form-group col-md-6">\
                                                                    <label for= "'+ Name + '"   style="font-size: 12px;"> ' + Name + ' <span class="required">*</span></label>\
                                                                    <input type="'+ type + '" class="form-control formulainputs ' + clsDecimal + '" id="' + ID + '" value="' + Value + '" ' + readonly + ' >\
                                                                </div>'
                            );
                        });

                        $('#addMoDataModal').modal('show');
                        $('#mtMODataHeader_Id').val(MoDataheaderId);
                        $('#btnSaveMoData').hide();
                        $('#btnUpdateMoData').show();
                    }
                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });

        }

        function updateMoData() {
            var valArr = [];
            isRequired = false;
            $('#moDataComponents').children().find('input').each(function () {
                if ($(this).val() == "") {
                    isRequired = true;
                }
                valArr.push({
                    ID: $(this).attr('id'),
                    Value: $(this).val()
                });
            });



            fuelType = $('#fuelType').val();
            vendorId = $('#vendorId').val();
            date = $('#date').val();
            userId = $('#userId').val();
            var mtMODataHeader_Id = $('#mtMODataHeader_Id').val();

            if (fuelType == '-1') {
                swal({
                    title: "Mandatory!",
                    text: "Select Fuel Type",
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
            }
            else if (isRequired == true) {
                swal({
                    title: "Mandatory!",
                    text: "All field required",
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
            }
            else {

                var formdata = new FormData();
                formdata.append('fuelType', fuelType);
                formdata.append('valArr', JSON.stringify(valArr));
                formdata.append('vendorId', vendorId);
                formdata.append('date', date);
                formdata.append('userId', userId);
                formdata.append('filesData', JSON.stringify(filesData));
                formdata.append('mtMODataHeader_Id', mtMODataHeader_Id);


                $.ajax({
                    type: "POST",
                    url: "../MeritOrder/updateMoData",
                    data: formdata,
                    contentType: false,
                    processData: false,
                    async: false,
                    beforeSend: function () {
                        $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (data) {

                        $.unblockUI();
                        var resArr = data.split('½');
                        if (resArr[0] == "1") {
                            swal({
                                title: "MO Data!",
                                text: "Updated successfully.",
                                type: "success",
                                showCancelButton: false,
                                showConfirmButton: true
                            }, function () {

                                getSavedMoData();
                                getMoDataSummary();
                                $('#addMoDataModal').modal('hide');

                            }
                            );
                        }
                        else if (resArr[0] == "-1") {
                            swal({
                                title: "Not Allowed!",
                                text: resArr[1],
                                type: "warning",
                                showCancelButton: false,
                                showConfirmButton: true
                            });
                        }

                    },
                    error: function (request, textStatus, errorThrown) {
                        $.unblockUI();
                    }
                });

            }
        }

        function submitMoData() {
            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }

            swal({
                title: "Are you sure?",
                text: "You are going to submit MO Data!",
                type: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn btn-danger",
                confirmButtonText: "Yes, submit it",
                cancelButtonText: "No, cancel"
            }, function () {

                fuelType = $('#fuelType').val();
                vendorId = $('#vendorId').val();
                date = $('#date').val();
                userId = $('#userId').val();

                var formdata = new FormData();
                formdata.append('fuelType', fuelType);
                formdata.append('vendorId', vendorId);
                formdata.append('date', date);
                formdata.append('userId', userId);


                $.ajax({
                    type: "POST",
                    url: "../MeritOrder/submitMoData",
                    data: formdata,
                    async: false,
                    contentType: false,
                    processData: false,

                    beforeSend: function () {
                        $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (data) {
                        var resArr = data.split('½');
                        if (resArr[0] == "1") {
                            setTimeout(function () {
                                swal({
                                    title: "Submitted!",
                                    text: "MO Data Submitted Successfully",
                                    type: "success",
                                    showCancelButton: false,
                                    showConfirmButton: true
                                }, function () {
                                    getSavedMoData();
                                    getMoDataSummary();
                                }
                                );
                            }, 500);

                        }
                        else {
                            swal({
                                title: "Error!",
                                text: resArr[1],
                                type: "error",
                                showCancelButton: false,
                                showConfirmButton: true
                            });
                        }

                    },
                    error: function (request, textStatus, errorThrown) {
                        $.unblockUI();
                    }
                });
            });
        }

        function deleteMoData(thisCtrl) {

            var isPortalLocked = LockPortal();
            var isPortalLockedArr = isPortalLocked.split('½');
            if (isPortalLockedArr[0] == "1") {
                swal({
                    title: "Portal Locked!",
                    text: "Portal is locked from " + isPortalLockedArr[1] + " to " + isPortalLockedArr[2],
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
                return;
            }

            swal({
                title: "Are you sure?",
                text: "You are going to delete MO Data!",
                type: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn btn-danger",
                confirmButtonText: "Yes, delete it",
                cancelButtonText: "No, cancel"
            }, function () {

                $.ajax({
                    type: "GET",
                    url: "../MeritOrder/deleteMoData?mtMODataHeader_Id=" + thisCtrl,
                    dataType: 'json',
                    beforeSend: function () {
                        $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (data) {

                        var resArr = data.split('½');
                        if (resArr[0] == "1") {
                            setTimeout(function () {
                                swal({
                                    title: "Deleted!",
                                    text: "MO Data Deleted Successfully",
                                    type: "success",
                                    showCancelButton: false,
                                    showConfirmButton: true
                                }, function () {
                                    getSavedMoData();
                                    getMoDataSummary();
                                }
                                );
                            }, 500);

                        }
                        else {
                            swal({
                                title: "Error!",
                                text: resArr[1],
                                type: "error",
                                showCancelButton: false,
                                showConfirmButton: true
                            });
                        }


                        $.unblockUI();

                    },
                    error: function (request, textStatus, errorThrown) {
                        // alert(request.getResponseHeader('some_header'));
                        $.unblockUI();
                    }

                });
            });
        }

        function validateReceipts() {
            debugger;
            var issue = '';
            var isvalidval = true;
            if ($('#155').val()=="") {
                $('#155').val(0);
            }
            if ($('#160').val() == "") {
                $('#160').val(0);
            }
            //var aa = _IsPositive; _IsPositive
             //var data = ['169', '175', '207', '240', '241', '242', '243', '721', '727', '756', '762', '791', '797']

            //var numericValue = parseInt($(this).val(), 10);

            var data = _IsPositive;
            $('.decicost').each(function () {
                if (data.includes(parseInt($(this).attr('id'))) && parseInt($(this).val()) > 0) {
                    issue += $(this).prev().closest("label").text() + '\n';
                    isvalidval = false;
                }

            });

            isRequired = false;
            if ($('#fuelType').val() == "RFO" || $('#fuelType').val() == "Coal" || $('#fuelType').val() == "HSD") {
                $('.Mandatory').each(function () {

                    if ($(this).val() == "") {
                        isRequired = true;
                    }
                });
            }
            else {
                $('.Mandatory').each(function () {

                    if ($(this).val() == "") {
                        isRequired = true;
                    }
                });
            }


            if (isRequired == true) {
                swal({
                    title: "Mandatory!",
                    text: "All field required",
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
            }
            else if (isvalidval == false) {
                swal({
                    title: "Invalid!",
                    text: 'The following values should be negative: \n' + issue,
                    type: "warning",
                    showCancelButton: false,
                    showConfirmButton: true
                });
            }
            else {

                $('.formulainputs').trigger('change');
                if ($('#btnCalculateConsumption').attr('datatype') == "NormalConsumption" && $('#btnCalculateConsumption').attr('case') == "1") {
                    //Save Case for actual consumtpion in RFO, HSD, COAL
                    $('#btnCalculateConsumption').hide();
                    $('#btnSaveActualConsumption').show();
                    $('#btnUpdateActualConsumption').hide();
                }
                else if ($('#btnCalculateConsumption').attr('datatype') == "NormalConsumption" && $('#btnCalculateConsumption').attr('case') == "2") {
                    //Update Case for actual consumtpion in RFO, HSD, COAL
                    $('#btnCalculateConsumption').hide();
                    $('#btnUpdateActualConsumption').show();
                    $('#btnSaveActualConsumption').hide();
                }
                else if ($('#btnCalculateConsumption').attr('datatype') == "NormalConsumption_ForRlngAndGas" && $('#btnCalculateConsumption').attr('case') == "1") {
                    //Save Case for Actual consumtpion in GAS and RLNG
                    $('#btnCalculateConsumption').hide();
                    $('#btnSaveActualConsumption').show();
                    $('#btnUpdateActualConsumption').hide();
                }
                else if ($('#btnCalculateConsumption').attr('datatype') == "NormalConsumption_ForRlngAndGas" && $('#btnCalculateConsumption').attr('case') == "2") {
                    //Update Case for Actual consumtpion in GAS and RLNG
                    $('#btnCalculateConsumption').hide();
                    $('#btnUpdateActualConsumption').show();
                    $('#btnSaveActualConsumption').hide();
                }
                else if ($('#btnCalculateConsumption').attr('datatype') == "EstimatedConsumption_ForRlngAndGas" && $('#btnCalculateConsumption').attr('case') == "1") {
                    //Save Case for Estimated consumtpion in GAS and RLNG
                    $('#btnCalculateConsumption').hide();
                    $('#btnSaveActualConsumption').show();
                    $('#btnUpdateActualConsumption').hide();
                }

                else if ($('#btnCalculateConsumption').attr('datatype') == "EstimatedConsumption_ForRlngAndGas" && $('#btnCalculateConsumption').attr('case') == "2") {
                    //Update Case for Estimated consumtpion in GAS and RLNG
                    $('#btnCalculateConsumption').hide();
                    $('#btnUpdateActualConsumption').show();
                    $('#btnSaveActualConsumption').hide();
                }
                if ($('#btnCalculateReceipt').attr('datatype') == "Receipts" && $('#btnCalculateReceipt').attr('case') == "1") {
                    //Save Case for Receipts in RFO, HSD, COAL
                    $('#btnCalculateReceipt').hide();
                    $('#btnSaveReceipt').show();
                    $('#btnUpdateReceipt').hide();
                }
                else if ($('#btnCalculateReceipt').attr('datatype') == "Receipts" && $('#btnCalculateReceipt').attr('case') == "2") {
                    //Update Case for Receipts in RFO, HSD, COAL
                    $('#btnCalculateReceipt').hide();
                    $('#btnSaveReceipt').hide();
                    $('#btnUpdateReceipt').show();
                }
                else {
                    $('#btnCalculateReceipt').hide();
                    $('#btnSaveReceipt').hide();
                    $('#btnUpdateReceipt').hide();
                }

            }
        }

        function calculateReceipt(thisCtrl,isCal) {
            if (isCal == 0)
                $('.formulainputs').val('');
            var numObj = splitFormula($(thisCtrl).attr('formula'));
            //var formulaEq = $(thisCtrl).attr('formula').split("");
            var formulaEq = [];
            var length = numObj.numbers.length - 1, myTotal = '';
            var arrLength = numObj.numbers.length-2;
            for (var index = 0; index < numObj.numbers.length; index++) {
                if (numObj.numbers[index] != "") {
                    formulaEq.push(numObj.numbers[index]);
                }
                //if ((numObj.operators[index] && numObj.operators[index].indexOf("(") == -1) && (numObj.operators[index] && numObj.operators[index].indexOf(")") == -1))
                if (index <= arrLength)
                        formulaEq.push(numObj.operators[index]);
                //}
                //else {
                //    if (arrLength <= index)
                //        formulaEq.push(numObj.operators[index]);
                //    else
                //}
            }
            formulaEq = formulaEq.filter(function (element) {
                return element !== undefined;
            });

            for (var i = 0; i < numObj.numbers.length; i++) {
                var elementId = numObj.numbers[i];
                var elementNum = numObj.numbers[i];
                if (elementId != "") {
                    if (elementId.indexOf('%') > -1) {
                        for (var i2 = 0; i2 < formulaEq.length; i2++) {
                            if (formulaEq[i2] === elementNum) {
                                formulaEq[i2] = formulaEq[i2].replace(elementNum.split('%')[0], '#' + elementId.split('%')[0]);
                                break;
                            }
                        }
                    }
                    else {
                        elementId = '#' + elementId;
                        for (var i3 = 0; i3 < formulaEq.length; i3++) {
                            if (formulaEq[i3] === elementNum) {
                                formulaEq[i3] = formulaEq[i3].replace(elementNum, elementId);
                                break;
                            }
                        }
                    }
                }
            }
            $(thisCtrl).val('');
            var a = '';
            for (var i = 0; i < numObj.numbers.length; i++) {

                var operator = '';
                var elementId = numObj.numbers[i];
                if (elementId != "") {
                    if (elementId.indexOf('%') > -1) {
                        elementId = '#' + elementId.split('%')[0];
                    }
                    else {
                        elementId = '#' + elementId;
                    }
                    if ($(elementId).attr('formula') != "" && $(elementId).val() == "")
                        $(elementId).trigger('change');
                    a = $(elementId).val();
                    for (var i2 = 0; i2 < formulaEq.length; i2++) {
                        if (formulaEq[i2].indexOf(elementId) > -1) {
                            formulaEq[i2] = formulaEq[i2].replace(elementId, a);
                            break;
                        }
                    }

                }
                //if (i < length-1) {
                //    operator = numObj.operators[i];
                //}
                //myTotal = myTotal + a + operator;
            }

            formulaEq = formulaEq.join("");
            formulaEq = formulaEq.replace('%', '/100');
            $(thisCtrl).val(eval(formulaEq).toFixed(4));
        }

        function getDetailedListForRlngAndGas(type) {

            fuelType = $('#fuelType').val();
            fuelIndex = $('#fuelIndexHidden').val();
            vendorId = $('#vendorId').val();
            date = $('#daterangeRlngGas').val();
            var dateSplit = $('#daterangeRlngGas').val().split(' - ');
            var fromDate = moment(dateSplit[0]).format('YYYY-MM-DD');
            var toDate = moment(dateSplit[1]).format('YYYY-MM-DD');

            $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });

            setTimeout(function () {
                $.ajax({
                    type: "POST",
                    url: "../MeritOrder/getDetailedListForRlngAndGas?vendorId=" + vendorId + "&fuelType=" + fuelType + "&fuelIndex=" + fuelIndex + "&fromDate=" + fromDate + "&toDate=" + toDate,
                    async: false,
                    beforeSend: function () {
                       // $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                        $.unblockUI();
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (data) {

                        var noOfHeaders = 0;
                        var resArr = JSON.parse(data);
                        var headerId_Res = JSON.parse(resArr['Table'][0]["components_header"]);
                        if ($.fn.DataTable.isDataTable('#tbl_results')) {
                            $('#tbl_results').DataTable().destroy();
                        }

                        $('.ajaxRes_detailedlist_ForRlngGas_Header').html('');
                        $('.ajaxRes_detailedlist_ForRlngGas').html('');

                        if (headerId_Res.length > 0) {

                            $('.ajaxRes_detailedlist_ForRlngGas_Header').append('<th scope="col" class="text-center darkblueBg">Date</th>');
                            $('#tblprntHead').append('<tr><th class="ExportCol">Power Producer: </th>\
                                                        <th class= "ExportCol" id = "expIPP_RLNG" ></th>\
                                                        <th class="ExportCol"></th>\
                                                        <th class="ExportCol">Fuel Type: </th>\
                                                        <th class="ExportCol" id="expFuel_RLNG"></th>\
                                                        <th class="ExportCol"></th>\
                                                        <th class="ExportCol">Date Range: </th>\
                                                        <th class="ExportCol" id="expDate_RLNG"></th></tr>');
                            $.each(headerId_Res, function (index, value) {

                                $('.ajaxRes_detailedlist_ForRlngGas_Header').append('<th scope="col" class="text-center darkblueBg">' + value.Name + ' ' + value.UNIT + '</th>');
                                $('#tblprntHead').append('<tr><th scope = "col" class= "text-center darkblueBg" > Date</th><th scope="col" class="text-center darkblueBg">' + value.Name + ' ' + value.UNIT + '</th></tr>');

                            });

                            noOfHeaders = $('.ajaxRes_detailedlist_ForRlngGas_Header').children().length;

                            var tr = '';
                            var totalRows = resArr['Table1'];
                            if (totalRows.length > 0) {
                                //For loop for adding data .i.e td with data to our dynamic generated table
                                for (var i = 0; i < totalRows.length; i++) {
                                    var Date_time = totalRows[i]["DATE_TIME"].split('T');
                                    const momentTimestamp = moment(Date_time[0]);
                                    var formatedDate = momentTimestamp.format("DD-MMM-YYYY");
                                    var components_Res = JSON.parse(totalRows[i]['Components']);
                                    tr += '<tr>' + '<td  align="center">' + formatedDate + '</td>';
                                    for (var k = 0; k < headerId_Res.length; k++) {

                                        tr += '<td  align="right">' + parseFloat(components_Res[k].Value) + '</td>';
                                    }
                                    tr += '</tr>';
                                }

                                $('.ajaxRes_detailedlist_ForRlngGas').append(tr);
                                $('#tblprntBody').append(tr);

                                $("#tbl_results").DataTable({
                                    "ordering": false,
                                    "searching": false,
                                    //"aLengthMenu": [[10, 25, 50, 100, 150, 250, 500, -1], [10, 25, 50, 100, 150, 250, 500, "All"]],
                                    //"iDisplayLength": 10,
                                    "bLengthChange": false
                                });


                            }

                            else {
                                $('.ajaxRes_detailedlist_ForRlngGas').append(
                                    '<tr><td align="center" colspan="' + noOfHeaders + '">No Record Found</td></tr>\ '
                                );
                            }
                        }
                        $('#expIPP_RLNG').text($('#NameTitlebar').text());
                        $('#expFuel_RLNG').text($('#fuelType').find(":selected").val());
                        $('#expDate_RLNG').text($('#daterange').val());
                        $.unblockUI();

                    },
                    error: function (request, textStatus, errorThrown) {
                        // alert(request.getResponseHeader('some_header'));
                        $.unblockUI();
                    }
                });
            } , 500);


        }

        function downloadAttachment(attachmentId) {

            //$.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
            $.ajax({
                type: "GET",
                url: "../MeritOrder/downloadAttachment?attachmentId=" + attachmentId,
                //dataType: 'json',
                responseType : "blob",
                contentType : false,
                processData : false,
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {

                    result = data;
                    result = JSON.parse(result);
                    var myUrl = "content/_FilesNew/" + attachmentId + "." + result.ext;
                    var win = window.open(myUrl, '_blank');
                    if (win) {
                        //Browser has allowed it to be opened
                        win.focus();
                    } else {
                        //Browser has blocked it
                        alert('Please allow popups for this website');
                    }

                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });

        }

        function LockPortal() {
            var result = "";
            $.ajax({
                type: "GET",
                url: "../MeritOrder/LockPortal",
                //dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {

                    var resArr = data.split('½');

                    var isLocked = resArr[0];
                    var PortalLockFrom = resArr[1];
                    var PortalLockTo = resArr[2];

                    if (data == "1") {
                        $('#PortalLock').val(data);
                        result = isLocked + '½' + PortalLockFrom + '½' + PortalLockTo;
                    }
                    else {
                        $('#PortalLock').val(data);
                        result = isLocked + '½' + PortalLockFrom + '½' + PortalLockTo;

                    }

                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });

            return result;
        }

        function MoDataValidation() {
            debugger;
            fuelType = $('#fuelType').val();
            vendorId = $('#vendorId').val();
            date = $('#date').val();

            var result = "";
            $.ajax({
                type: "GET",
                url: "../MeritOrder/MoDataValidation?vendorId=" + vendorId + "&fuelType=" + fuelType + "&date=" + date,
                //dataType: 'json',
                async: false,
                beforeSend: function () {
                    $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                },
                complete: function () {
                    $.unblockUI();
                },
                success: function (data) {


                    var resArr = data.split('½');
                    if (resArr[0] == "-1") {
                        swal({
                            title: "Not Allowed!",
                            text: resArr[1],
                            type: "warning",
                            showCancelButton: false,
                            showConfirmButton: true
                        });
                        result = "-1";

                    }
                    else if (resArr[0] == "1") {
                        result = "1";
                    }

                    $.unblockUI();

                },
                error: function (request, textStatus, errorThrown) {
                    // alert(request.getResponseHeader('some_header'));
                    $.unblockUI();
                }
            });

            return result;
        }

        function myFunction(element) {

            $(element).next()[0].classList.toggle("show");
        }

        window.onclick = function (event) {
            if (!event.target.matches('.dropbtn')) {
                var dropdowns = document.getElementsByClassName("dropdown-content");
                var i;
                for (i = 0; i < dropdowns.length; i++) {
                    var openDropdown = dropdowns[i];
                    if (openDropdown.classList.contains('show')) {
                        openDropdown.classList.remove('show');
                    }
                }
            }
        }

        function populateFuelTypes() {

            var vendorIdDrp = $('#vendorIdDrp').val();

            $('#vendorId').val(vendorIdDrp);
            $.ajax
                ({
                    type: "GET",
                    url: "/MeritOrder/populateFuelTypes?VendorId=" + vendorIdDrp,
                    dataType: 'json',
                    beforeSend: function () {
                        $.blockUI({ css: { backgroundColor: 'rgb(170, 170, 170)', color: '#fff' } });
                    },
                    complete: function () {
                        $.unblockUI();
                    },
                    success: function (result) {

                        $('#fuelType').html('');
                        if (result.length > 0) {
                            var options;
                            $('#fuelType').html(`<option value="-1" selected>Select Fuel Type</option>`);
                            $(result).each(function (index, option) {

                                $('#fuelType').append('<option value="' + option.FUEL_TYPE_New + '">' + option.FUEL_TYPE + '</option>');

                            });


                        }
                    },     // end of success

                    error: function (request, textStatus, errorThrown) {
                        console.log(request);
                    }
                }); //  ajax ended
        }//end of Function

    </script>
</div>